/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package inventory.vistas;

import inventory.objetos.ObjetosProforma;
import inventory.objetos.ObjetosDetalleProforma;
import inventory.objetos.ObjetosProducto;
import inventory.objetos.ObjetosPersona;
import inventory.objetos.ObjetosCliente;
import inventory.acceso.AccesoPersona;
import inventory.acceso.AccesoExcepciones;
import inventory.acceso.AccesoProforma;
import inventory.acceso.AccesoProducto;
import inventory.acceso.AccesoDetalleProforma;
import inventory.acceso.AccesoCliente;
import inventory.acceso.AccesoInventario;
import java.net.URL;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import javax.swing.table.DefaultTableModel;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.util.JRLoader;
import net.sf.jasperreports.view.JasperViewer;

/**
 *
 * @author Megabyte Soluciones Integrales Guatemala
 */

public class wdwMovimientoProforma extends javax.swing.JInternalFrame {

    /**
     * Creates new form wdwMovimientoVentaDeProductos
     */
    public wdwMovimientoProforma() {
        initComponents();
        cargaEmpleados();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlEncabezado = new javax.swing.JPanel();
        txtProforma = new javax.swing.JTextField();
        lblProformaNo = new javax.swing.JLabel();
        lblNitPersona = new javax.swing.JLabel();
        txtNitPersona = new javax.swing.JTextField();
        lblNombrePersona = new javax.swing.JLabel();
        txtNombrePersona = new javax.swing.JTextField();
        lblTelCliente = new javax.swing.JLabel();
        txtTelCliente = new javax.swing.JTextField();
        lblDirCliente = new javax.swing.JLabel();
        txtDirCliente = new javax.swing.JTextField();
        lblFecha = new javax.swing.JLabel();
        txtFechaEmisionProforma = new javax.swing.JTextField();
        lblTotalFactura = new javax.swing.JLabel();
        txtTotalProforma = new javax.swing.JTextField();
        lblEmpleado = new javax.swing.JLabel();
        cbxEmpleado = new javax.swing.JComboBox();
        txtIdEmpleado = new javax.swing.JTextField();
        pnlBotones = new javax.swing.JPanel();
        btnSalir = new javax.swing.JButton();
        btnNuevo = new javax.swing.JButton();
        btnGuardar = new javax.swing.JButton();
        btnBuscar = new javax.swing.JButton();
        btnImprimir = new javax.swing.JButton();
        btnEliminar = new javax.swing.JButton();
        pnlDetalle = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblDetalleProforma = new javax.swing.JTable();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Proforma de Productos");
        setFrameIcon(new javax.swing.ImageIcon(getClass().getResource("/inventory/imagenes/nuevo.png"))); // NOI18N
        setMinimumSize(new java.awt.Dimension(800, 600));

        pnlEncabezado.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        txtProforma.setBackground(new java.awt.Color(102, 102, 102));
        txtProforma.setEditable(false);
        txtProforma.setForeground(new java.awt.Color(255, 255, 255));
        txtProforma.setToolTipText("El numero de proforma se generara automaticamente");

        lblProformaNo.setText("Proforma No.");

        lblNitPersona.setText("NIT");

        txtNitPersona.setToolTipText("Ingrese el numero de NIT de la Persona");
        txtNitPersona.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtNitPersonaFocusLost(evt);
            }
        });

        lblNombrePersona.setText("Nombre");

        txtNombrePersona.setEditable(false);
        txtNombrePersona.setToolTipText("El sistema obtiene el nombre de la persona");

        lblTelCliente.setText("Telefono");

        txtTelCliente.setEditable(false);
        txtTelCliente.setToolTipText("Ingrese el telefono del cliente");

        lblDirCliente.setText("Direccion");

        txtDirCliente.setEditable(false);
        txtDirCliente.setToolTipText("Ingrese la direccion del cliente, esta es independiente de la direccion de envio");

        lblFecha.setText("Fecha");

        txtFechaEmisionProforma.setToolTipText("Ingrese la fecha del envio");

        lblTotalFactura.setText("Total");

        txtTotalProforma.setEditable(false);
        txtTotalProforma.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtTotalProforma.setToolTipText("");

        lblEmpleado.setText("Empleado");

        cbxEmpleado.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Seleccione" }));
        cbxEmpleado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbxEmpleadoActionPerformed(evt);
            }
        });

        txtIdEmpleado.setEditable(false);

        javax.swing.GroupLayout pnlEncabezadoLayout = new javax.swing.GroupLayout(pnlEncabezado);
        pnlEncabezado.setLayout(pnlEncabezadoLayout);
        pnlEncabezadoLayout.setHorizontalGroup(
            pnlEncabezadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlEncabezadoLayout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(pnlEncabezadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblNitPersona)
                    .addComponent(lblTelCliente)
                    .addComponent(lblProformaNo)
                    .addComponent(lblFecha))
                .addGap(12, 12, 12)
                .addGroup(pnlEncabezadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlEncabezadoLayout.createSequentialGroup()
                        .addGroup(pnlEncabezadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtTelCliente, javax.swing.GroupLayout.DEFAULT_SIZE, 141, Short.MAX_VALUE)
                            .addComponent(txtNitPersona, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(txtProforma, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addGap(18, 18, 18)
                        .addGroup(pnlEncabezadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(lblNombrePersona)
                            .addComponent(lblEmpleado, javax.swing.GroupLayout.DEFAULT_SIZE, 51, Short.MAX_VALUE)
                            .addComponent(lblDirCliente, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addComponent(txtFechaEmisionProforma, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(pnlEncabezadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlEncabezadoLayout.createSequentialGroup()
                        .addComponent(cbxEmpleado, javax.swing.GroupLayout.PREFERRED_SIZE, 293, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtIdEmpleado, javax.swing.GroupLayout.DEFAULT_SIZE, 141, Short.MAX_VALUE))
                    .addComponent(txtNombrePersona, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(txtDirCliente)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlEncabezadoLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(lblTotalFactura)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtTotalProforma, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        pnlEncabezadoLayout.setVerticalGroup(
            pnlEncabezadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlEncabezadoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlEncabezadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtProforma, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblProformaNo)
                    .addComponent(lblEmpleado)
                    .addComponent(cbxEmpleado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtIdEmpleado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlEncabezadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtNitPersona, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblNitPersona)
                    .addComponent(lblNombrePersona)
                    .addComponent(txtNombrePersona, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlEncabezadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtTelCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblTelCliente)
                    .addComponent(lblDirCliente)
                    .addComponent(txtDirCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlEncabezadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblFecha)
                    .addComponent(txtFechaEmisionProforma, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblTotalFactura)
                    .addComponent(txtTotalProforma, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(19, Short.MAX_VALUE))
        );

        pnlBotones.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        btnSalir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/inventory/imagenes/salir.png"))); // NOI18N
        btnSalir.setText("Salir");
        btnSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalirActionPerformed(evt);
            }
        });

        btnNuevo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/inventory/imagenes/nuevo.png"))); // NOI18N
        btnNuevo.setText("Nuevo");
        btnNuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNuevoActionPerformed(evt);
            }
        });

        btnGuardar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/inventory/imagenes/guardar.png"))); // NOI18N
        btnGuardar.setText("Guardar");
        btnGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarActionPerformed(evt);
            }
        });

        btnBuscar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/inventory/imagenes/buscar.png"))); // NOI18N
        btnBuscar.setActionCommand("buscarProducto");
        btnBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarActionPerformed(evt);
            }
        });

        btnImprimir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/inventory/imagenes/impresora.png"))); // NOI18N
        btnImprimir.setActionCommand("imprimirEnvio");
        btnImprimir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnImprimirActionPerformed(evt);
            }
        });

        btnEliminar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/inventory/imagenes/eliminar.png"))); // NOI18N
        btnEliminar.setText("Eliminar");
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlBotonesLayout = new javax.swing.GroupLayout(pnlBotones);
        pnlBotones.setLayout(pnlBotonesLayout);
        pnlBotonesLayout.setHorizontalGroup(
            pnlBotonesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlBotonesLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnImprimir, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnGuardar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnNuevo)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnEliminar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnSalir)
                .addContainerGap())
        );
        pnlBotonesLayout.setVerticalGroup(
            pnlBotonesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlBotonesLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlBotonesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSalir)
                    .addComponent(btnNuevo)
                    .addComponent(btnGuardar)
                    .addComponent(btnBuscar)
                    .addComponent(btnImprimir)
                    .addComponent(btnEliminar))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pnlDetalle.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        tblDetalleProforma.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "No.", "Codigo", "Descripcion del Producto", "Cantidad", "P. Venta", "P. Minimo", "P. Normal", "Total"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.Float.class, java.lang.Float.class, java.lang.Float.class, java.lang.Float.class, java.lang.Float.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, false, true, true, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblDetalleProforma.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        tblDetalleProforma.getTableHeader().setReorderingAllowed(false);
        tblDetalleProforma.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblDetalleProformaMouseClicked(evt);
            }
        });
        tblDetalleProforma.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tblDetalleProformaKeyPressed(evt);
            }
        });
        jScrollPane1.setViewportView(tblDetalleProforma);
        tblDetalleProforma.getColumnModel().getColumn(0).setResizable(false);
        tblDetalleProforma.getColumnModel().getColumn(0).setPreferredWidth(10);
        tblDetalleProforma.getColumnModel().getColumn(1).setResizable(false);
        tblDetalleProforma.getColumnModel().getColumn(1).setPreferredWidth(20);
        tblDetalleProforma.getColumnModel().getColumn(2).setPreferredWidth(250);
        tblDetalleProforma.getColumnModel().getColumn(3).setResizable(false);
        tblDetalleProforma.getColumnModel().getColumn(3).setPreferredWidth(20);
        tblDetalleProforma.getColumnModel().getColumn(4).setResizable(false);
        tblDetalleProforma.getColumnModel().getColumn(4).setPreferredWidth(20);
        tblDetalleProforma.getColumnModel().getColumn(5).setResizable(false);
        tblDetalleProforma.getColumnModel().getColumn(5).setPreferredWidth(30);
        tblDetalleProforma.getColumnModel().getColumn(6).setResizable(false);
        tblDetalleProforma.getColumnModel().getColumn(6).setPreferredWidth(20);
        tblDetalleProforma.getColumnModel().getColumn(7).setResizable(false);
        tblDetalleProforma.getColumnModel().getColumn(7).setPreferredWidth(20);

        javax.swing.GroupLayout pnlDetalleLayout = new javax.swing.GroupLayout(pnlDetalle);
        pnlDetalle.setLayout(pnlDetalleLayout);
        pnlDetalleLayout.setHorizontalGroup(
            pnlDetalleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlDetalleLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
        );
        pnlDetalleLayout.setVerticalGroup(
            pnlDetalleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlDetalleLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 327, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pnlEncabezado, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pnlBotones, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pnlDetalle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pnlEncabezado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(pnlDetalle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlBotones, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    //VARIABLES GLOBALES
    ObjetosProforma Proforma = new ObjetosProforma();
    ObjetosProducto Producto = new ObjetosProducto();
    ObjetosDetalleProforma Detalle = new ObjetosDetalleProforma();
    AccesoCliente NuevoCliente = new AccesoCliente();
    AccesoProforma NuevaProforma = new AccesoProforma();
    AccesoPersona NuevaPersona = new AccesoPersona();
    AccesoProducto NuevoProducto = new AccesoProducto();
    AccesoDetalleProforma NuevoDetalleProforma = new AccesoDetalleProforma();
    AccesoExcepciones Mensaje = new AccesoExcepciones();
    
    Date fecha = new Date();
    float total_factura = 0;
    float cantidad = 0;
    float precio = 0;
    
    //SE COLOCARON PUBLICAS PARA PODER UTILIZARLAS EN EL CATALOGO DE PRODUCTOS
    //YA QUE DESDE ALLI SE PUEDE IMPORTAR UN CODIGO SELECCIONADO PRESIONANDO
    //SOBRE EL CODIGO QUE QUIERE ENVIAR Y LUEGO EL BOTON EVIAR AL DETALLE DE VENTA
    public int fila_seleccionada = 0;
    public int columna_seleccionada = 0;
    
    private void limpiarEncabezadoFactura(){
        txtProforma.setText("");
        txtIdEmpleado.setText("");
        txtNitPersona.setText("");
        txtNombrePersona.setText("");
        txtTelCliente.setText("");
        txtDirCliente.setText("");
        txtFechaEmisionProforma.setText("");
        txtTotalProforma.setText("");
        cbxEmpleado.setSelectedItem("Seleccione");
    }
    
    private void limpiarDetalleFactura(){
        String[] columnas = {"No","Codigo","Descripcion del Producto","Cantidad","P. Venta","P. Minimo","P. Normal", "Total"};
        DefaultTableModel modelo_tabla = new DefaultTableModel(columnas, 14);
        tblDetalleProforma.setModel(modelo_tabla);
        cantidad = 0;
    }
    
    private ObjetosProducto obtenerDatosProducto(String pId_producto){
        
        ArrayList<ObjetosProducto> BuscarProducto = new ArrayList();
        ObjetosProducto Producto = new ObjetosProducto();
        
        //CONSULTAR EL ID DE PRODUCTO PARA OBTENER LOS DATOS
        try{
            BuscarProducto = NuevoProducto.buscarProducto(pId_producto);
        }catch(Exception error){
            Mensaje.manipulacionExcepciones("critico", "Ocurrio un error al consultar el codigo del producto");
        }
        
        //EVALUAR EL RESULTADO DE LA BUSQUEDA
        if(BuscarProducto.isEmpty()){
            System.out.println("NO EXISTE NINGUN PRODUCTO CON ESTE CODIGO");
            Mensaje.manipulacionExcepciones("informacion", "Este Codigo de Producto no existe en su Base de Datos");
        } else {
            if(BuscarProducto.size()>1){
                System.out.println("EXISTEN "+BuscarProducto.size()+"PRODUCTOS CON ESTE CODIGO");
                Mensaje.manipulacionExcepciones("critico", "Existe mas de un producto con este codigo");
            } else {
                Producto.setId_producto(BuscarProducto.get(0).getId_producto());
                Producto.setId_provedor(BuscarProducto.get(0).getId_proveedor());
                Producto.setMarca_producto(BuscarProducto.get(0).getMarca_producto());
                Producto.setDesc_producto(BuscarProducto.get(0).getDesc_producto());
                Producto.setPrecio_compra_producto(BuscarProducto.get(0).getPrecio_compra_producto());
                Producto.setPrecio_est_producto(BuscarProducto.get(0).getPrecio_est_producto());
                Producto.setExi_producto(BuscarProducto.get(0).getExi_producto());
                System.out.println("EXISTENCIA OBTENIDO POR CONSULTA: "+Producto.getExi_producto());
                Producto.setUnidad_medida_producto(BuscarProducto.get(0).getUnidad_medida_producto());
                Producto.setMaximo_producto(BuscarProducto.get(0).getMaximo_producto());
                Producto.setMinimo_producto(BuscarProducto.get(0).getMinimo_producto());
                Producto.setPrj_est_producto(BuscarProducto.get(0).getPrj_est_producto());
                Producto.setPrj_min_producto(BuscarProducto.get(0).getPrj_min_producto());
                Producto.setPrecio_min_producto(BuscarProducto.get(0).getPrecio_min_producto());
                System.out.println("PRECIO MINIMO OBTENIDO POR CONSULTA: "+Producto.getPrecio_min_producto());
            }
        }
        
        return Producto;
    }
    
    private void obtenerDatosCliente(String pNit_persona){
        
        ArrayList<ObjetosPersona> BuscarPersona = new ArrayList();
        ArrayList<ObjetosCliente> BuscarCliente = new ArrayList();
        
        //CONSULTAR EL NUMERO DE NIT DE LA PERSONA
        try{
            BuscarPersona = NuevaPersona.buscarPersona(pNit_persona);
        }catch(Exception error){
            Mensaje.manipulacionExcepciones("critico", "Ocurrio un error al buscar el nombre -> "+error);
        }
        
        //EVALUAR EL RESULTADO DE LA BUSQUEDA
        if(BuscarPersona.isEmpty()){
            System.out.println("NO SE ENCONTRO NINGUNA PERSONA CON ESTE NIT");
            Mensaje.manipulacionExcepciones("critico", "No existen datos de esta Persona en la Base de Datos");
        } else {
            if(BuscarPersona.size()>1){
                System.out.println("EXISTE "+BuscarPersona.size()+" PERSONAS CON ESTE NUMERO DE NIT");
                Mensaje.manipulacionExcepciones("critico", "Existe mas de una persona con este numero de NIT");
            } else {
                txtNombrePersona.setText(BuscarPersona.get(0).getNom_persona());
            }
        }
        
        //CONSULTAR EL NIT DEL CLIENTE
        try{
            BuscarCliente = NuevoCliente.buscarCliente(BuscarPersona.get(0).getId_persona());
        }catch(Exception error){
            Mensaje.manipulacionExcepciones("critico", "Ocurrio un error al buscar los datos del cliente -> "+error);
        }
        
        if (BuscarCliente.isEmpty()) {
            
            System.out.println("NO EXISTE NINGUN CLIENTE CON ESTE NUMERO DE NIT");
            Mensaje.manipulacionExcepciones("interrogante", "Desea crear este cliente en la Base de Datos");
            System.out.println("VALOR DEL MENSAJE = " + Mensaje.valor);
            
            if (Mensaje.valor == 0) {
                wdwCatalogoClientes CatalogoClientes = new wdwCatalogoClientes();
                Inventory.pnlPrincipal.add(CatalogoClientes);
                CatalogoClientes.toFront();
                CatalogoClientes.setVisible(true);
                Mensaje.valor = 2;
            } else {
                txtNitPersona.setText("C/F");
                txtNitPersona.requestFocus();
            }
            
        } else {
            if (BuscarCliente.size() > 1) {
                System.out.println("SE ENCONTRARON " + BuscarCliente.size() + " CLIENTES CON ESTE NUMERO DE NIT");
                Mensaje.manipulacionExcepciones("critico", "Se encontro mas de un Cliente con este numero de NIT");
            } else {
                txtTelCliente.setText(String.valueOf(BuscarCliente.get(0).getTel_cliente()));
                txtDirCliente.setText(BuscarCliente.get(0).getDir_cliente());
                txtFechaEmisionProforma.setText((1900 + fecha.getYear()) + "-" + (fecha.getMonth() + 1) + "-" + fecha.getDate());
                txtTotalProforma.setText("0.00");
                //txtDirEnvioFactura.requestFocus();
            }
        }
        
        BuscarPersona.removeAll(BuscarCliente);
        BuscarCliente.removeAll(BuscarCliente);
    }
    
    private void cargaEmpleados(){
        ArrayList<ObjetosProforma> lUsuarios = new ArrayList();
            
        try{
            lUsuarios = NuevaProforma.retornaNombreEmpleados();
            
        }catch(Exception error){
            Mensaje.manipulacionExcepciones("critico", "Error en busqueda de usuarios " + error);
        }
        
        // Lleno el combobox con los registros de empleados que existen
        for(ObjetosProforma xUsuario : lUsuarios){
            cbxEmpleado.addItem(xUsuario.getNombre_empleado());
        }
        
    }
    
    private int obtenerIdCliente(String pNit_cliente){
        
        ArrayList<ObjetosPersona> BuscarPersona = new ArrayList();
        ArrayList<ObjetosCliente> BuscarCliente = new ArrayList();
        int vId_cliente = 0;
        
        //CONSULTAR EL NUMERO DE NIT DE LA PERSONA
        try{
            BuscarPersona = NuevaPersona.buscarPersona(pNit_cliente);
        }catch(Exception error){
            System.out.println("NO SE ENCONTRO NINGUNA PERSONA CON ESTE NIT");
            Mensaje.manipulacionExcepciones("critico", "Ocurrio un error al consulta el NIT del Cliente -> "+error);
        }
        
        //EVALUANDO LOS DATOS OPTENDIOS DE PERSONA
        if(BuscarPersona.isEmpty()){
            Mensaje.manipulacionExcepciones("critico", "No existe este Cliente en la Base de Datos");
        } else {
            if(BuscarPersona.size()>1){
                Mensaje.manipulacionExcepciones("critico", "Existen mas personas con este Numero de NIT");
            }
        }
                
        //CONSULTAR EL ID DE LA PERSONA EN CLIENTE
        try{
            BuscarCliente = NuevoCliente.buscarCliente(BuscarPersona.get(0).getId_persona());
        }catch(Exception error){
            Mensaje.manipulacionExcepciones("informacion", "Ocurrio un error al consulta este numero de NIT -> "+error);
        }
        
        //EVALUAR EL RESULTADO DE LA BUSQUEDA
        if(BuscarCliente.isEmpty()){
            System.out.println("NO SE ENCONTRO EL CLIENTE SE MOSTRA PANTALLA DE INGRESO DE CLIENTES");
            Mensaje.manipulacionExcepciones("critico", "Debe crear este cliente en la base de datos");
        }else{
            if(BuscarCliente.size()>1){
                System.out.println("EXISTEN "+BuscarCliente.size()+" CLIENTES CON ESTE NUMERO DE NIT");
                Mensaje.manipulacionExcepciones("critical", "Este numero de Nit esta repetido");
            } else {
                vId_cliente = BuscarCliente.get(0).getId_cliente();
            }
        }
        
        return vId_cliente;
    }
    
    private boolean verificarDatosProforma(ObjetosProforma pProforma){
        boolean vDatos_correctos = true;
        
        if("".equals(txtNitPersona.getText())){
            Mensaje.manipulacionExcepciones("critical", "Por favor ingrese el numero de NIT");
            vDatos_correctos = false;
        }
        if("".equals(pProforma.getFecha_emision_proforma())){
            Mensaje.manipulacionExcepciones("critical", "Ingrese la fecha de la proforma");   
            vDatos_correctos = false;
        }
        
        return vDatos_correctos;
    }
    
    private void btnGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarActionPerformed

        boolean error_grabar = false;
        
        /*********************************************************************
         * VERIFICAR QUE ESTA FACTURA NO HAYA SIDO GUARDADA ANTERIORMENTE
         * MEDIANTE EL ID DE VENTA, DE SER ASI SE DEBE PEDIR QUE INGRESE 
         * DE NUEVA OTRA FACTURA PARA PODER CONTINUAR O SALIR DE LA PANTALLA
         * EN CASO NO SE DESE REALIZAR OTRA VENTA. ESTO CON EL MOTIVO DE NO
         * PERMITIR QUE SE GUARDE DOS VECES LA MISMA FACTURA EN LA BD
         */
        if (txtProforma.getText().equals("")){
        try{
            
            Proforma.setId_empleado(Integer.parseInt(txtIdEmpleado.getText()));
            
            // OBTENER EL ID DE LA PERSONA A TRAVES DEL NUMERO DE NIT
            Proforma.setId_cliente(obtenerIdCliente(txtNitPersona.getText()));
            
            Proforma.setDir_envio_proforma(txtDirCliente.getText());
            Proforma.setFecha_emision_proforma(txtFechaEmisionProforma.getText());
            
            //EN ESTE MOMENTO TOTAL ES IGUAL A CERO
            Proforma.setTotal_proforma(Float.parseFloat(txtTotalProforma.getText()));
            
        }catch(Error error){
            Mensaje.manipulacionExcepciones("critico", "Ocurrio un error al leer los datos de la proforma -> "+error);
        }
        
        if(verificarDatosProforma(Proforma)){
            NuevaProforma.insertarProforma(Proforma);
            System.out.println("SE INSERTO LA PROFORMA NO: "+Proforma.getId_proforma()+" DEL CLIENTE : "+Proforma.getId_cliente());
        }else{
            Mensaje.manipulacionExcepciones("critico", "Por favor verifique los datos de la proforma");
        }
        
        //OBTENER EL ID DE LA PROFORMA INGRESADA
        try{
            ArrayList<ObjetosProforma> BuscarProforma = new ArrayList();
            BuscarProforma = NuevaProforma.seleccionarIdProforma(Proforma);
            if(BuscarProforma.isEmpty()){
                Mensaje.manipulacionExcepciones("critico", "No existe esta proforma en la Base de datos");
            } else {
                if(BuscarProforma.size()>1){
                    Mensaje.manipulacionExcepciones("critico", "Existen mas proformas con los mismos datos");
                } else {
                    txtProforma.setText(String.valueOf(BuscarProforma.get(0).getId_proforma()));
                }
            }
        }catch(Exception error){
            Mensaje.manipulacionExcepciones("critico", "Ocurrio un error al consultar el ID proforma -> "+error);
        }
        
        //ALMACENAR EL DETALLE DE LA PROFORMA SIN ACTUALIZAR EL CATALOGO DE PRODUCTOS
        try {
            for (int cFilas = 0; cFilas < tblDetalleProforma.getRowCount(); cFilas++) {
                
                //INSERTAR EN D_PROFORMA LOS PRODUCTOS COTIZADOS POR EL CLIENTE

                if (tblDetalleProforma.getValueAt(cFilas, 0) != null) {
                   
                    try {
                        
                        System.out.println("TRATANDO DE GUARDAR EL REGISTRO NO: "+tblDetalleProforma.getValueAt(cFilas, 0));
                        
                        Detalle.setId_d_proforma((Integer) tblDetalleProforma.getValueAt(cFilas, 0));
                        Detalle.setId_proforma(Integer.parseInt(txtProforma.getText()));
                        Detalle.setId_producto(tblDetalleProforma.getValueAt(cFilas, 1).toString());
                        Detalle.setCant_d_proforma(Float.parseFloat(tblDetalleProforma.getValueAt(cFilas, 3).toString()));
                        Detalle.setPrecio_venta_d_proforma(Float.parseFloat(tblDetalleProforma.getValueAt(cFilas,4).toString()));
                        Detalle.setSub_total_proforma(Float.parseFloat(tblDetalleProforma.getValueAt(cFilas, 7).toString()));
                       
                        if(Float.parseFloat(txtTotalProforma.getText()) > 0.00) {
                            NuevoDetalleProforma.insertarDetalleProforma(Detalle);
                            //descontarProducto(Detalle.getId_producto(), Detalle.getCant_d_factura());
                        }
                        
                    } catch (Exception error) {
                        Mensaje.manipulacionExcepciones("critico", "Ocurrio un error en la Fila " + cFilas + " -> " + error);
                        error_grabar = true;
                    }
                }
            }
            
            if(error_grabar==false){
                Mensaje.manipulacionExcepciones("informacion","Registros guardados exitosamente para la proforma No. "+txtProforma.getText());
            }
            
        } catch (Exception error) {
            Mensaje.manipulacionExcepciones("critico", "Ocurrio un error al almacenar le detalle -> " + error);
        }
        } else {
            Mensaje.manipulacionExcepciones("critico", "Esta proforma ya fue guardada con anterioridad.");
        }
    }//GEN-LAST:event_btnGuardarActionPerformed

    private void txtNitPersonaFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtNitPersonaFocusLost
        
        if (txtNitPersona.getText().equals("c/f") || txtNitPersona.getText().equals("C/F") || txtNitPersona.getText().equals("")) {
            txtNitPersona.setText("C/F");
            txtNombrePersona.setText("Consumidor Final");
            txtTelCliente.setText("0");
            txtDirCliente.setText("Ciudad");
            txtFechaEmisionProforma.setText((1900 + fecha.getYear()) + "-" + (fecha.getMonth()+1) + "-" + fecha.getDate());
            txtTotalProforma.setText("0.00");
           // txtDirEnvioFactura.requestFocus();
        } else {
            obtenerDatosCliente(txtNitPersona.getText());
        }
        
    }//GEN-LAST:event_txtNitPersonaFocusLost

    private void totalFactura() {

        total_factura = 0;
        
        for(int cFilas = 0; cFilas <= 14; cFilas++) {
            try{
                total_factura = total_factura + (float) tblDetalleProforma.getValueAt(cFilas, 3) * (float) tblDetalleProforma.getValueAt(cFilas, 4);
            } catch(Exception error) {
                total_factura = total_factura + 0;
            }
        }
        
        txtTotalProforma.setText(String.valueOf(Math.rint(total_factura * 100)/100));
    }
    
    private void tblDetalleProformaKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tblDetalleProformaKeyPressed

        //VERIFICAR SI SURGE ALGUN EVENTO SOBRE CUALQUIE CELDA DE LA TABLA
        if (evt.getKeyCode() == 9) {

            fila_seleccionada = tblDetalleProforma.getSelectedRow();
            columna_seleccionada = tblDetalleProforma.getSelectedColumn();

            //VERIFICAR LA OPERACION A REALIZAR SEGUN SU POSICION
            System.out.println("POSICIONADO EN LA FILA: " + fila_seleccionada + " COLUMNA: " + columna_seleccionada);

            //BUSCAR LA INFORMACION DEL PRODUCTO SELECCIONADO
            if (columna_seleccionada == 2) {
                Producto = obtenerDatosProducto(tblDetalleProforma.getValueAt(fila_seleccionada, columna_seleccionada - 1).toString());
                tblDetalleProforma.setValueAt((String) Producto.getDesc_producto() + " - " + (String) Producto.getMarca_producto(), fila_seleccionada, columna_seleccionada);
                tblDetalleProforma.setValueAt((float) Producto.getPrecio_est_producto(), fila_seleccionada, columna_seleccionada + 2);
                tblDetalleProforma.setValueAt((float) Producto.getPrecio_min_producto(), fila_seleccionada, columna_seleccionada + 3);
                tblDetalleProforma.setValueAt((float) Producto.getPrecio_est_producto(), fila_seleccionada, columna_seleccionada + 4);
            }
            
            //VERIFICA LA CANTIDAD ACTUAL Y SU EXISTENCIA EN PODUCTOS
            if (columna_seleccionada == 4) {

                //EVALUAR QUE LA CANTIDAD NO SEA NULA
                if (tblDetalleProforma.getValueAt(fila_seleccionada, columna_seleccionada - 1) == null) {
                    Mensaje.manipulacionExcepciones("critico", "No ingreso la cantidad se produjo un error critico");
                } else {
                    cantidad = (float) tblDetalleProforma.getValueAt(fila_seleccionada, columna_seleccionada - 1);
                }

                //EVALUAR QUE SEA MAYOR QUE CERO
                if ((float) tblDetalleProforma.getValueAt(fila_seleccionada, columna_seleccionada - 1) < 0.01) {
                    Mensaje.manipulacionExcepciones("critico", "La cantidad ingresada no es valida");
                }

                System.out.println("EXISTENCIA: " + Producto.getExi_producto());
                System.out.println("MINIMO: " + Producto.getMinimo_producto());

                //EVALUAR QUE NO SEA MAYOR QUE LA EXISTENCIA
                if ((float) tblDetalleProforma.getValueAt(fila_seleccionada, columna_seleccionada - 1) > Producto.getExi_producto()) {
                    Mensaje.manipulacionExcepciones("critico", "Esta cantidad excede el total de existencia");
                }

                //EVALUAR EL MINIMO DE PRODUCTO EXISTENTE
                if (Producto.getExi_producto() <= Producto.getMinimo_producto()) {
                    Mensaje.manipulacionExcepciones("informacion", "Este producto a llegado al minimo");
                }

                //EVALUAR SI EL PRODUCTO ESTA EN CERO
                if (Producto.getExi_producto() < 0.01) {
                    Mensaje.manipulacionExcepciones("informacion", "Este producto a llegado al minimo");
                }

            }

            if (columna_seleccionada == 5) {
                precio = (float) tblDetalleProforma.getValueAt(fila_seleccionada, columna_seleccionada - 1);
            }

            if (columna_seleccionada == 6) {
                
                System.out.println("CANTIDAD: " + cantidad);
                System.out.println("PRECIO: " + precio);

                //EVALUAR QUE NO SEA MENOR AL PRECIO MINIMO A MENOS QUE SEA ADMINISTRADOR                
                if ((Float.parseFloat(tblDetalleProforma.getValueAt(tblDetalleProforma.getSelectedRow(),4).toString()) > Float.parseFloat(tblDetalleProforma.getValueAt(tblDetalleProforma.getSelectedRow(),5).toString())) || (Inventory.lblRol.getText().equals("Administrador"))) {
                    //CALCULAR EL SUB TOTAL Y TOTAL DE LA FACTURA Y REDONDEARLO
                    tblDetalleProforma.setValueAt(Math.rint(cantidad * precio * 100) / 100, fila_seleccionada, columna_seleccionada + 1);
                    tblDetalleProforma.setValueAt(fila_seleccionada + 1, fila_seleccionada, 0);
                    totalFactura();
                } else {
                    Mensaje.manipulacionExcepciones("critico", "No puede vender el producto a este precio");
                }
            }
            
        }
    }//GEN-LAST:event_tblDetalleProformaKeyPressed

    private void btnSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalirActionPerformed
        
        Mensaje.manipulacionExcepciones("interrogante", "Deseas salir de la pantalla de ventas");
        if(Mensaje.valor==0){
            this.dispose();
        }
    }//GEN-LAST:event_btnSalirActionPerformed

    private void btnNuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNuevoActionPerformed
        
       this.dispose();
       wdwMovimientoProforma Ventas = new wdwMovimientoProforma();
       Ventas.setVisible(true);
       Inventory.pnlPrincipal.add(Ventas);
       Ventas.toFront();
    }//GEN-LAST:event_btnNuevoActionPerformed

    private void btnBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarActionPerformed
        
        wdwConsultaProductos BuscarProducto = new wdwConsultaProductos();
        Inventory.pnlPrincipal.add(BuscarProducto);
        BuscarProducto.setVisible(true);
        BuscarProducto.toFront();
        
        //HABILITAR BOTON Y ENVIAR VARIABLES PARA LA UBICACION DE LA COLUMNA
        //LA COLUMNA SIEMPRE ES FIJA PORQUE ALLI SE INGRESA EL CODIGO
        BuscarProducto.btnAgregar.setEnabled(true);
        BuscarProducto.fila_seleccionada = fila_seleccionada;
        BuscarProducto.columan_seleccionada = 1;
    }//GEN-LAST:event_btnBuscarActionPerformed

    private void btnImprimirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnImprimirActionPerformed
        try {
            AccesoInventario Acceso = new AccesoInventario();
            URL url_reporte = this.getClass().getResource("/inventory/reportes/rptProforma.jasper");
            JasperReport reporte = (JasperReport) JRLoader.loadObject(url_reporte);
            HashMap parametro = new HashMap();
            parametro.put("P_ID_FACTURA", Integer.parseInt(txtProforma.getText()));
            JasperPrint pantalla = JasperFillManager.fillReport(reporte, parametro, Acceso.conectar());
            JasperViewer visualizador = new JasperViewer(pantalla, false);
            visualizador.show();
        } catch (JRException error) {
            Mensaje.manipulacionExcepciones("critico", "Ocurrio un error al ejecutar el reporte -> " + error);
        }
    }//GEN-LAST:event_btnImprimirActionPerformed

    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActionPerformed
        
        try{
            DefaultTableModel tabla = new DefaultTableModel();
            tabla.addColumn("No.");
            tabla.addColumn("Codigo");
            tabla.addColumn("Descripcion del Producto");
            tabla.addColumn("Cantidad");
            tabla.addColumn("P. Venta");
            tabla.addColumn("P. Minimo");
            tabla.addColumn("P. Normal");
            tabla.addColumn("Total");
            
            int cVenta = 0;
            
            //ELIMINAR LA FILA SELECCIONADA Y VOLVER A REALIZAR LA SUMA           
            DefaultTableModel modelo = (DefaultTableModel) tblDetalleProforma.getModel();
            Object nueva_fila[] = {null,null,null,null,null,null,null,null};
            modelo.addRow(nueva_fila);
            modelo.removeRow(fila_seleccionada);

            //REORDENAR LA NUMERACION DE LA FILAS
            for(int cFilas = 0; cFilas <= 14; cFilas++){
                if (tblDetalleProforma.getValueAt(cFilas, 0) != null){
                    tblDetalleProforma.setValueAt(cFilas + 1, cFilas, 0);
                }
            }

        }catch(Exception error){
            Mensaje.manipulacionExcepciones("critico", "Se ha eliminado una fila");
        }
        
        totalFactura();
    }//GEN-LAST:event_btnEliminarActionPerformed

    private void tblDetalleProformaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblDetalleProformaMouseClicked

        //CAPTURAR LA FILA SELECCIONADA PARA LA ELIMINACION
        fila_seleccionada = tblDetalleProforma.getSelectedRow();
        columna_seleccionada = tblDetalleProforma.getSelectedColumn();

    }//GEN-LAST:event_tblDetalleProformaMouseClicked

    private void cbxEmpleadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxEmpleadoActionPerformed
        String seleccion = "";
        seleccion = cbxEmpleado.getSelectedItem().toString();
        
        int idEmpleado = 0;
            
        try{
            idEmpleado = NuevaProforma.retornaIDEmpleado(seleccion);
            txtIdEmpleado.setText(String.valueOf(idEmpleado));
            
        }catch(Exception error){
            Mensaje.manipulacionExcepciones("critico", "Error al obtener codigo del usuario seleccionado " + error);
        }
    }//GEN-LAST:event_cbxEmpleadoActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBuscar;
    private javax.swing.JButton btnEliminar;
    private javax.swing.JButton btnGuardar;
    private javax.swing.JButton btnImprimir;
    private javax.swing.JButton btnNuevo;
    private javax.swing.JButton btnSalir;
    private javax.swing.JComboBox cbxEmpleado;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblDirCliente;
    private javax.swing.JLabel lblEmpleado;
    private javax.swing.JLabel lblFecha;
    private javax.swing.JLabel lblNitPersona;
    private javax.swing.JLabel lblNombrePersona;
    private javax.swing.JLabel lblProformaNo;
    private javax.swing.JLabel lblTelCliente;
    private javax.swing.JLabel lblTotalFactura;
    private javax.swing.JPanel pnlBotones;
    private javax.swing.JPanel pnlDetalle;
    private javax.swing.JPanel pnlEncabezado;
    public static javax.swing.JTable tblDetalleProforma;
    private javax.swing.JTextField txtDirCliente;
    private javax.swing.JTextField txtFechaEmisionProforma;
    private javax.swing.JTextField txtIdEmpleado;
    private javax.swing.JTextField txtNitPersona;
    private javax.swing.JTextField txtNombrePersona;
    private javax.swing.JTextField txtProforma;
    private javax.swing.JTextField txtTelCliente;
    public static javax.swing.JTextField txtTotalProforma;
    // End of variables declaration//GEN-END:variables
}

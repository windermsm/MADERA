/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package inventory.vistas;

import inventory.acceso.*;
import inventory.objetos.ObjetosDetalleTraslado;
import inventory.objetos.ObjetosProducto;
import inventory.objetos.ObjetosSucursal;
import inventory.objetos.ObjetosTraslado;
import inventory.servicios.Matematicas;
import java.net.URL;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import javax.swing.table.DefaultTableModel;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.util.JRLoader;
import net.sf.jasperreports.view.JasperViewer;

/**
 *
 * @author Megabyte Soluciones Integrales Guatemala
 */

public class wdwMovimientoTrasladoDeProductos extends javax.swing.JInternalFrame {
    
    String UsuarioLogeado = null;
    String rolUsuario = null;
    
    AccesoArchivo archivo = new AccesoArchivo();
    Matematicas matematica = new Matematicas();

    /**
     * Creates new form wdwMovimientoVentaDeProductos
     */
    public wdwMovimientoTrasladoDeProductos() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlEncabezado = new javax.swing.JPanel();
        lblIdTraslado = new javax.swing.JLabel();
        txtIdTraslado = new javax.swing.JTextField();
        lblIdSucursal = new javax.swing.JLabel();
        txtIdSucursal = new javax.swing.JTextField();
        txtNombreSucursal = new javax.swing.JTextField();
        lblDireccion = new javax.swing.JLabel();
        txtDireccion = new javax.swing.JTextField();
        lblDireccionTraslado = new javax.swing.JLabel();
        lblFecha = new javax.swing.JLabel();
        txtFecha = new javax.swing.JTextField();
        txtDireccionTraslado = new javax.swing.JTextField();
        lblTotal = new javax.swing.JLabel();
        txtTotal = new javax.swing.JTextField();
        pnlBotones = new javax.swing.JPanel();
        btnSalir = new javax.swing.JButton();
        btnNuevo = new javax.swing.JButton();
        btnGuardar = new javax.swing.JButton();
        btnBuscar = new javax.swing.JButton();
        btnImprimir = new javax.swing.JButton();
        btnEliminar = new javax.swing.JButton();
        pnlDetalle = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblDetalleTraslado = new javax.swing.JTable();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Traslado de Productos");
        setFrameIcon(new javax.swing.ImageIcon(getClass().getResource("/inventory/imagenes/tralado.png"))); // NOI18N
        setPreferredSize(new java.awt.Dimension(800, 600));

        pnlEncabezado.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        lblIdTraslado.setText("ID Traslado");

        txtIdTraslado.setBackground(new java.awt.Color(102, 102, 102));
        txtIdTraslado.setEditable(false);
        txtIdTraslado.setForeground(new java.awt.Color(255, 255, 255));
        txtIdTraslado.setToolTipText("ID Venta, se genera al momento de guardar");

        lblIdSucursal.setText("Sucursal");

        txtIdSucursal.setToolTipText("Ingresar el NIT del cliente si no existe debera crearlo");
        txtIdSucursal.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtIdSucursalFocusLost(evt);
            }
        });

        txtNombreSucursal.setBackground(new java.awt.Color(102, 102, 102));
        txtNombreSucursal.setEditable(false);
        txtNombreSucursal.setForeground(new java.awt.Color(255, 255, 255));
        txtNombreSucursal.setToolTipText("Mustra el nombre del cliente del NIT ingresado");

        lblDireccion.setText("Direccion");

        txtDireccion.setBackground(new java.awt.Color(102, 102, 102));
        txtDireccion.setEditable(false);
        txtDireccion.setForeground(new java.awt.Color(255, 255, 255));
        txtDireccion.setToolTipText("Muestra la direccion ingresada en el catalogo de clientes");

        lblDireccionTraslado.setText("Enviar a");

        lblFecha.setText("Fecha");

        txtFecha.setToolTipText("Fecha de venta formato YYYY-MM-DD");

        txtDireccionTraslado.setToolTipText("Ingrese la direccion del envio de estos productos");

        lblTotal.setText("Total");

        txtTotal.setBackground(new java.awt.Color(102, 102, 102));
        txtTotal.setEditable(false);
        txtTotal.setForeground(new java.awt.Color(255, 255, 255));
        txtTotal.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtTotal.setToolTipText("");

        javax.swing.GroupLayout pnlEncabezadoLayout = new javax.swing.GroupLayout(pnlEncabezado);
        pnlEncabezado.setLayout(pnlEncabezadoLayout);
        pnlEncabezadoLayout.setHorizontalGroup(
            pnlEncabezadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlEncabezadoLayout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(pnlEncabezadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlEncabezadoLayout.createSequentialGroup()
                        .addComponent(lblFecha, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(30, 30, 30)
                        .addComponent(txtFecha, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(lblDireccionTraslado)
                        .addGap(32, 32, 32)
                        .addComponent(txtDireccionTraslado)
                        .addGap(18, 18, 18)
                        .addComponent(lblTotal)
                        .addGap(18, 18, 18)
                        .addComponent(txtTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(pnlEncabezadoLayout.createSequentialGroup()
                        .addGroup(pnlEncabezadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblIdTraslado)
                            .addComponent(lblDireccion, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(15, 15, 15)
                        .addGroup(pnlEncabezadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtDireccion, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(pnlEncabezadoLayout.createSequentialGroup()
                                .addComponent(txtIdTraslado, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(lblIdSucursal, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(19, 19, 19)
                                .addComponent(txtIdSucursal, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtNombreSucursal, javax.swing.GroupLayout.DEFAULT_SIZE, 410, Short.MAX_VALUE)))))
                .addGap(10, 10, 10))
        );
        pnlEncabezadoLayout.setVerticalGroup(
            pnlEncabezadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlEncabezadoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlEncabezadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblIdTraslado)
                    .addComponent(txtIdTraslado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblIdSucursal)
                    .addComponent(txtIdSucursal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtNombreSucursal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlEncabezadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtDireccion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblDireccion))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlEncabezadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblFecha)
                    .addComponent(txtFecha, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtTotal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblTotal)
                    .addComponent(lblDireccionTraslado)
                    .addComponent(txtDireccionTraslado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pnlBotones.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        btnSalir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/inventory/imagenes/salir.png"))); // NOI18N
        btnSalir.setText("Salir");
        btnSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalirActionPerformed(evt);
            }
        });

        btnNuevo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/inventory/imagenes/nuevo.png"))); // NOI18N
        btnNuevo.setText("Nuevo");
        btnNuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNuevoActionPerformed(evt);
            }
        });

        btnGuardar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/inventory/imagenes/guardar.png"))); // NOI18N
        btnGuardar.setText("Guardar");
        btnGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarActionPerformed(evt);
            }
        });

        btnBuscar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/inventory/imagenes/buscar.png"))); // NOI18N
        btnBuscar.setActionCommand("buscarProducto");
        btnBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarActionPerformed(evt);
            }
        });

        btnImprimir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/inventory/imagenes/shipping.png"))); // NOI18N
        btnImprimir.setToolTipText("Imprimir Envio");
        btnImprimir.setActionCommand("imprimirEnvio");
        btnImprimir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnImprimirActionPerformed(evt);
            }
        });

        btnEliminar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/inventory/imagenes/eliminar.png"))); // NOI18N
        btnEliminar.setText("Eliminar");
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlBotonesLayout = new javax.swing.GroupLayout(pnlBotones);
        pnlBotones.setLayout(pnlBotonesLayout);
        pnlBotonesLayout.setHorizontalGroup(
            pnlBotonesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlBotonesLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnImprimir, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnGuardar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnNuevo)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnEliminar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnSalir)
                .addContainerGap())
        );
        pnlBotonesLayout.setVerticalGroup(
            pnlBotonesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlBotonesLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlBotonesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSalir)
                    .addComponent(btnNuevo)
                    .addComponent(btnGuardar)
                    .addComponent(btnBuscar)
                    .addComponent(btnImprimir)
                    .addComponent(btnEliminar))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pnlDetalle.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        tblDetalleTraslado.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "No.", "Codigo", "Descripcion del Producto", "Cantidad", "P. Compra", "P. Minimo", "P. Normal", "Total"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.Float.class, java.lang.Float.class, java.lang.Float.class, java.lang.Float.class, java.lang.Float.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, false, true, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblDetalleTraslado.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        tblDetalleTraslado.getTableHeader().setReorderingAllowed(false);
        tblDetalleTraslado.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblDetalleTrasladoMouseClicked(evt);
            }
        });
        tblDetalleTraslado.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tblDetalleTrasladoKeyPressed(evt);
            }
        });
        jScrollPane1.setViewportView(tblDetalleTraslado);
        tblDetalleTraslado.getColumnModel().getColumn(0).setResizable(false);
        tblDetalleTraslado.getColumnModel().getColumn(0).setPreferredWidth(10);
        tblDetalleTraslado.getColumnModel().getColumn(1).setResizable(false);
        tblDetalleTraslado.getColumnModel().getColumn(1).setPreferredWidth(20);
        tblDetalleTraslado.getColumnModel().getColumn(2).setPreferredWidth(250);
        tblDetalleTraslado.getColumnModel().getColumn(3).setResizable(false);
        tblDetalleTraslado.getColumnModel().getColumn(3).setPreferredWidth(20);
        tblDetalleTraslado.getColumnModel().getColumn(4).setResizable(false);
        tblDetalleTraslado.getColumnModel().getColumn(4).setPreferredWidth(20);
        tblDetalleTraslado.getColumnModel().getColumn(5).setResizable(false);
        tblDetalleTraslado.getColumnModel().getColumn(5).setPreferredWidth(30);
        tblDetalleTraslado.getColumnModel().getColumn(6).setResizable(false);
        tblDetalleTraslado.getColumnModel().getColumn(6).setPreferredWidth(20);
        tblDetalleTraslado.getColumnModel().getColumn(7).setResizable(false);
        tblDetalleTraslado.getColumnModel().getColumn(7).setPreferredWidth(20);

        javax.swing.GroupLayout pnlDetalleLayout = new javax.swing.GroupLayout(pnlDetalle);
        pnlDetalle.setLayout(pnlDetalleLayout);
        pnlDetalleLayout.setHorizontalGroup(
            pnlDetalleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlDetalleLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
        );
        pnlDetalleLayout.setVerticalGroup(
            pnlDetalleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlDetalleLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 352, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pnlBotones, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pnlDetalle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pnlEncabezado, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pnlEncabezado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(pnlDetalle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlBotones, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    ObjetosSucursal sucursal = new ObjetosSucursal();
    ObjetosProducto Producto = new ObjetosProducto();
    ObjetosTraslado traslado = new ObjetosTraslado();
    ObjetosDetalleTraslado detalle = new ObjetosDetalleTraslado();
    
    AccesoExcepciones Mensaje = new AccesoExcepciones();
    AccesoProducto acceso_producto = new AccesoProducto();
    AccesoSucursal acceso_sucursal = new AccesoSucursal();
    AccesoTraslado acceso_traslado = new AccesoTraslado();
    AccesoDetalleTraslado acceso_detalle = new AccesoDetalleTraslado();
    
    Date fecha = new Date();
    float total_factura = 0;
    float cantidad = 0;
    float precio = 0;
    float total_iva = 0;
    
    //SE COLOCARON PUBLICAS PARA PODER UTILIZARLAS EN EL CATALOGO DE PRODUCTOS
    //YA QUE DESDE ALLI SE PUEDE IMPORTAR UN CODIGO SELECCIONADO PRESIONANDO
    //SOBRE EL CODIGO QUE QUIERE ENVIAR Y LUEGO EL BOTON EVIAR AL DETALLE DE VENTA
    public int fila_seleccionada = 0;
    public int columna_seleccionada = 0;
    
    private void limpiarEncabezadoFactura(){
        txtIdTraslado.setText("");
        txtIdSucursal.setText("");
        txtNombreSucursal.setText("");
        txtDireccion.setText("");
        txtFecha.setText("");
        txtTotal.setText("");
        txtDireccionTraslado.setText("");
    }
    
    private void limpiarDetalleFactura(){
        String[] columnas = {"No","Codigo","Descripcion del Producto","Cantidad","P. Venta","P. Minimo","P. Normal", "Total"};
        DefaultTableModel modelo_tabla = new DefaultTableModel(columnas, 14);
        tblDetalleTraslado.setModel(modelo_tabla);
        cantidad = 0;
    }
    
    private void descontarProducto(String pId_producto, float pCantidad){
        
        ArrayList<ObjetosProducto> BuscarProducto = new ArrayList();
        
        try{
            BuscarProducto = acceso_producto.buscarProducto(pId_producto);
            if(BuscarProducto.isEmpty()){
                Mensaje.manipulacionExcepciones("critico", "No existe el Producto "+pId_producto+" en la base de datos.");
            } else {
                if(BuscarProducto.size()>1){
                    Mensaje.manipulacionExcepciones("critico", "Existe mas de un Producto con este ID "+pId_producto);
                } else {
                    //PROCEDE A REALIZAR LA ACTUALIZACION DESCONTANDO LA CANTIDAD
                    acceso_producto.actualizarExistencia(pId_producto, BuscarProducto.get(0).getExi_producto()-pCantidad);
                }
            }
        }catch(Exception error){
            Mensaje.manipulacionExcepciones("critico", "Ocurrio un error al buscar el Producto: "+pId_producto+" -> "+error);
        }
    }
    
    private ObjetosProducto obtenerDatosProducto(String pId_producto){
        
        ArrayList<ObjetosProducto> BuscarProducto = new ArrayList();
        ObjetosProducto Producto = new ObjetosProducto();

        try{
            BuscarProducto = acceso_producto.buscarProducto(pId_producto);
        }catch(Exception error){
            Mensaje.manipulacionExcepciones("critico", "Ocurrio un error al consultar el codigo del producto");
        }
        
        //EVALUAR EL RESULTADO DE LA BUSQUEDA
        if(BuscarProducto.isEmpty()){
            Mensaje.manipulacionExcepciones("informacion", "Este Codigo de Producto no existe en su Base de Datos");
        } else {
            if(BuscarProducto.size()>1){
                Mensaje.manipulacionExcepciones("critico", "Existe mas de un producto con este codigo");
            } else {
                Producto.setId_producto(BuscarProducto.get(0).getId_producto());
                Producto.setId_provedor(BuscarProducto.get(0).getId_proveedor());
                Producto.setMarca_producto(BuscarProducto.get(0).getMarca_producto());
                Producto.setDesc_producto(BuscarProducto.get(0).getDesc_producto());
                Producto.setPrecio_compra_producto(BuscarProducto.get(0).getPrecio_compra_producto());
                Producto.setPrecio_est_producto(BuscarProducto.get(0).getPrecio_est_producto());
                Producto.setExi_producto(BuscarProducto.get(0).getExi_producto());
                System.out.println("EXISTENCIA OBTENIDO POR CONSULTA: "+Producto.getExi_producto());
                Producto.setUnidad_medida_producto(BuscarProducto.get(0).getUnidad_medida_producto());
                Producto.setMaximo_producto(BuscarProducto.get(0).getMaximo_producto());
                Producto.setMinimo_producto(BuscarProducto.get(0).getMinimo_producto());
                Producto.setPrj_est_producto(BuscarProducto.get(0).getPrj_est_producto());
                Producto.setPrj_min_producto(BuscarProducto.get(0).getPrj_min_producto());
                Producto.setPrecio_min_producto(BuscarProducto.get(0).getPrecio_min_producto());
                System.out.println("PRECIO MINIMO OBTENIDO POR CONSULTA: "+Producto.getPrecio_min_producto());
            }
        }
        
        return Producto;
    }
    
    private void obtenerDatosSucursal(String id){
        if(txtIdSucursal.getText().equals("") || txtIdSucursal.getText().isEmpty()) {
            Mensaje.manipulacionExcepciones("critico", "Ingrese el codigo de sucursal");
        } else {
            sucursal = acceso_sucursal.obtenerSucursal(id);
            if (sucursal == null) {
                txtNombreSucursal.setText("");
                txtDireccion.setText("");
                txtDireccionTraslado.setText("");
            } else {
                txtNombreSucursal.setText(sucursal.getNombre_sucursal());
                txtDireccion.setText(sucursal.getDireccion_sucursal());
                txtDireccionTraslado.setText(sucursal.getDescripcion_sucursal());
            }
        }
    }
    
    private void btnGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarActionPerformed
        
        //VERIFICAR LA SUMATORIA Y CALCULOS DE LOS PRECIOS Y CANTIDADES
        int error_detalle = 0;
        boolean error_guardar_encabezado = false;
        boolean error_guardar_detalle = false;
        
        System.out.println("Verificando el total de cada uno de los detalles");
        
        for (int c = 0; c < tblDetalleTraslado.getRowCount(); c++) {
            if (tblDetalleTraslado.getValueAt(c++, 0) != null) {
                try {
                    Double precio_venta = Double.parseDouble(tblDetalleTraslado.getValueAt(c, 4).toString());
                    Double cantidad_venta = Double.parseDouble(tblDetalleTraslado.getValueAt(c, 3).toString());
                    Double sub_total = matematica.aproxima(precio_venta * cantidad_venta, 2);
                    Double sub_total_actual = matematica.aproxima(Double.parseDouble(tblDetalleTraslado.getValueAt(c, 7).toString()), 2);
                    System.out.println("Sub Total: " + sub_total + " Sub Total Actual: " + sub_total_actual);
                    if ((sub_total - sub_total_actual) != 0) {
                        Mensaje.manipulacionExcepciones("critico", "Se encontro un error en la fila " + c);
                        error_detalle++;
                    }
                    System.out.println("Fila " + c++ + " = " + sub_total);
                } catch (Exception error) {
                }
            }
        }

        if (error_detalle > 0) {
            Mensaje.manipulacionExcepciones("informacion", "Revise el detalle, una o mas filas no fueron actualizadas");
        }

        if (txtIdTraslado.getText().equals("") && error_detalle == 0) {

            //GUARDAR EL ENCABEZADO DEL TRASLADO, LUEGO EL DETALE
            try {
                traslado.setId_traslado(0);
                traslado.setId_sucursal(Integer.parseInt(txtIdSucursal.getText()));
                traslado.setFecha_trasaldo(txtFecha.getText());
                traslado.setTotal_traslado(Float.parseFloat(txtTotal.getText()));
                traslado.setUsuario_traslado(Inventory.lblUsuario.getText());
                acceso_traslado.insertarTraslado(traslado);
                error_guardar_encabezado = false;
            } catch (Exception error) {
                error_guardar_encabezado = true;
                Mensaje.manipulacionExcepciones("critico", "Ocurrio un error al guardar el encabezado -> " + error);
            }
            
            //OBTENER EL ID DEL ENCABEZADO GUARDADO PARA ESTE TRASLADO
            try {
                int id_traslado = acceso_traslado.obtenerIdTraslado(traslado);
                traslado.setId_traslado(id_traslado);
                txtIdTraslado.setText(String.valueOf(id_traslado));
            } catch (Exception e) {
                error_guardar_encabezado = true;
            }
            
            
            if (traslado.getId_traslado() == 0) {
                Mensaje.manipulacionExcepciones("critico", "No se pudo obtener el ID de este traslado.");
            } else {

                //INTENTAR GUARDAR DETALLE SIEMPRE Y CUANDO EL ENCABEZADO FUE GUARDADO CON EXITO
                if (error_guardar_encabezado == false) {

                    for (int cFilas = 0; cFilas < tblDetalleTraslado.getRowCount(); cFilas++) {

                        if (tblDetalleTraslado.getValueAt(cFilas, 0) != null) {

                            try {
                                detalle.setId_d_traslado((Integer) tblDetalleTraslado.getValueAt(cFilas, 0));
                                detalle.setId_traslado(Integer.parseInt(txtIdTraslado.getText()));
                                detalle.setId_producto(tblDetalleTraslado.getValueAt(cFilas, 1).toString());
                                detalle.setCantidad_d_traslado(Float.parseFloat(tblDetalleTraslado.getValueAt(cFilas, 3).toString()));
                                detalle.setTotal_d_traslado(Float.parseFloat(tblDetalleTraslado.getValueAt(cFilas, 7).toString()));
                                acceso_detalle.insertarDetalleTraslado(detalle);
                                btnGuardar.setEnabled(false);
                            } catch (Exception error) {
                                error_guardar_detalle = true;
                                Mensaje.manipulacionExcepciones("critico", "Ocurrio un error en la Fila " + cFilas + " -> " + error);
                            }

                        }
                    }
                }

                //DESCONTAR DE INVENTARIO CADA PRODUCTO DEL DETALLE
                if (error_guardar_encabezado == false && error_guardar_detalle == false) {

                    for (int cFilas = 0; cFilas < tblDetalleTraslado.getRowCount(); cFilas++) {
                        if (tblDetalleTraslado.getValueAt(cFilas, 0) != null) {
                            String id = tblDetalleTraslado.getValueAt(cFilas, 1).toString();
                            float cantidad = Float.parseFloat(tblDetalleTraslado.getValueAt(cFilas, 3).toString());
                            acceso_producto.disminuirExistencia(id, cantidad);
                        }
                    }

                    Mensaje.manipulacionExcepciones("informacion", "Traslado guardado con exito");
                }

            }
            
        } else {
            Mensaje.manipulacionExcepciones("critico","Este traslado ya fue guardada con anterioridad.");
        } 
        
    }//GEN-LAST:event_btnGuardarActionPerformed

    private void txtIdSucursalFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtIdSucursalFocusLost
        obtenerDatosSucursal(txtIdSucursal.getText());
    }//GEN-LAST:event_txtIdSucursalFocusLost

    private void totalTraslado() {
        total_factura = 0;
        for(int cFilas = 0; cFilas <= 14; cFilas++) {
            try{
                total_factura = total_factura + (float) tblDetalleTraslado.getValueAt(cFilas, 3) * (float) tblDetalleTraslado.getValueAt(cFilas, 4);
            } catch(Exception error) {
                total_factura = total_factura + 0;
            }
        }
        txtTotal.setText(String.valueOf(Math.rint(total_factura * 100)/100));
    }
    
    private void tblDetalleTrasladoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tblDetalleTrasladoKeyPressed

        //VERIFICAR SI SURGE ALGUN EVENTO SOBRE CUALQUIE CELDA DE LA TABLA
        if (evt.getKeyCode() == 9) {

            fila_seleccionada = tblDetalleTraslado.getSelectedRow();
            columna_seleccionada = tblDetalleTraslado.getSelectedColumn();

            //VERIFICAR LA OPERACION A REALIZAR SEGUN SU POSICION
            System.out.println("POSICIONADO EN LA FILA: " + fila_seleccionada + " COLUMNA: " + columna_seleccionada);

            //BUSCAR LA INFORMACION DEL PRODUCTO SELECCIONADO
            if (columna_seleccionada == 2) {
                Producto = obtenerDatosProducto(tblDetalleTraslado.getValueAt(fila_seleccionada, columna_seleccionada - 1).toString());
                tblDetalleTraslado.setValueAt((String) Producto.getDesc_producto() + " - " + (String) Producto.getMarca_producto(), fila_seleccionada, columna_seleccionada);
                tblDetalleTraslado.setValueAt((float) Producto.getPrecio_compra_producto(), fila_seleccionada, columna_seleccionada + 2);
                tblDetalleTraslado.setValueAt((float) Producto.getPrecio_est_producto(), fila_seleccionada, columna_seleccionada + 3);
                tblDetalleTraslado.setValueAt((float) Producto.getPrecio_min_producto(), fila_seleccionada, columna_seleccionada + 4);
            }
            
            //VERIFICA LA CANTIDAD ACTUAL Y SU EXISTENCIA EN PODUCTOS
            if (columna_seleccionada == 4) {

                //EVALUAR QUE LA CANTIDAD NO SEA NULA
                if (tblDetalleTraslado.getValueAt(fila_seleccionada, columna_seleccionada - 1) == null) {
                    Mensaje.manipulacionExcepciones("critico", "No ingreso la cantidad se produjo un error critico");
                } else {
                    cantidad = (float) tblDetalleTraslado.getValueAt(fila_seleccionada, columna_seleccionada - 1);
                }

                //EVALUAR QUE SEA MAYOR QUE CERO
                if ((float) tblDetalleTraslado.getValueAt(fila_seleccionada, columna_seleccionada - 1) < 0.01) {
                    Mensaje.manipulacionExcepciones("critico", "La cantidad ingresada no es valida");
                }

                System.out.println("EXISTENCIA: " + Producto.getExi_producto());
                System.out.println("MINIMO: " + Producto.getMinimo_producto());

                //EVALUAR QUE NO SEA MAYOR QUE LA EXISTENCIA
                if ((float) tblDetalleTraslado.getValueAt(fila_seleccionada, columna_seleccionada - 1) > Producto.getExi_producto()) {
                    Mensaje.manipulacionExcepciones("critico", "Esta cantidad excede el total de existencia");
                }

                //EVALUAR EL MINIMO DE PRODUCTO EXISTENTE
                if (Producto.getExi_producto() <= Producto.getMinimo_producto()) {
                    Mensaje.manipulacionExcepciones("informacion", "Este producto a llegado al minimo");
                }

                //EVALUAR SI EL PRODUCTO ESTA EN CERO
                if (Producto.getExi_producto() < 0.01) {
                    Mensaje.manipulacionExcepciones("informacion", "Este producto esta en cero");
                }

            }

            if (columna_seleccionada == 5) {
                precio = (float) tblDetalleTraslado.getValueAt(fila_seleccionada, columna_seleccionada - 1);
            }

            if (columna_seleccionada == 6) {
               
                //CALCULAR EL SUB TOTAL Y TOTAL DE LA FACTURA Y REDONDEARLO
                tblDetalleTraslado.setValueAt(matematica.aproxima(cantidad * precio, 2), fila_seleccionada, columna_seleccionada + 1);
                tblDetalleTraslado.setValueAt(fila_seleccionada + 1, fila_seleccionada, 0);
                totalTraslado();
           
            }
            
            //[20150404][INVG][INICIO]
            if(columna_seleccionada==8){
                tblDetalleTraslado.setValueAt("S/C", fila_seleccionada, columna_seleccionada);
            }
            
            if(columna_seleccionada==9){
                tblDetalleTraslado.setValueAt(0.00, fila_seleccionada, columna_seleccionada);
            }
            
        }
    }//GEN-LAST:event_tblDetalleTrasladoKeyPressed

    private void btnSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalirActionPerformed
        
        Mensaje.manipulacionExcepciones("interrogante", "Deseas salir de la pantalla de ventas");
        if(Mensaje.valor==0){
            this.dispose();
        }
    }//GEN-LAST:event_btnSalirActionPerformed

    private void btnNuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNuevoActionPerformed
        
       this.dispose();
       wdwMovimientoTrasladoDeProductos Ventas = new wdwMovimientoTrasladoDeProductos();
       Ventas.setVisible(true);
       Inventory.pnlPrincipal.add(Ventas);
       Ventas.toFront();
    }//GEN-LAST:event_btnNuevoActionPerformed

    private void btnBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarActionPerformed
        wdwConsultaProductosTraslado BuscarProducto = new wdwConsultaProductosTraslado();
        Inventory.pnlPrincipal.add(BuscarProducto);
        BuscarProducto.setVisible(true);
        BuscarProducto.toFront();
        BuscarProducto.btnAgregar.setEnabled(true);
    }//GEN-LAST:event_btnBuscarActionPerformed

    private void btnImprimirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnImprimirActionPerformed

        try{
            AccesoInventario Acceso = new AccesoInventario(); 
            URL url_reporte = this.getClass().getResource("/inventory/reportes/rptTraslado.jasper");
            JasperReport reporte = (JasperReport) JRLoader.loadObject(url_reporte);
            //ENVIAR EL PARAMETRO AL REPORTES
            HashMap parametro = new HashMap();
            parametro.put("P_ID_FACTURA", Integer.parseInt(txtIdTraslado.getText()));
            JasperPrint pantalla= JasperFillManager.fillReport(reporte, parametro, Acceso.conectar());
            JasperViewer visualizador = new JasperViewer(pantalla,false);
            visualizador.show();
        }catch(JRException error){
            Mensaje.manipulacionExcepciones("critico", "Ocurrio un error al ejecutar el reporte -> "+error);
        }
    }//GEN-LAST:event_btnImprimirActionPerformed

    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActionPerformed
        
        try{
            DefaultTableModel tabla = new DefaultTableModel();
            tabla.addColumn("No.");
            tabla.addColumn("Codigo");
            tabla.addColumn("Descripcion del Producto");
            tabla.addColumn("Cantidad");
            tabla.addColumn("P. Venta");
            tabla.addColumn("P. Minimo");
            tabla.addColumn("P. Normal");
            tabla.addColumn("Total");
            
            int cVenta = 0;
            
            //ELIMINAR LA FILA SELECCIONADA Y VOLVER A REALIZAR LA SUMA           
            DefaultTableModel modelo = (DefaultTableModel) tblDetalleTraslado.getModel();
            Object nueva_fila[] = {null,null,null,null,null,null,null,null};
            modelo.addRow(nueva_fila);
            modelo.removeRow(fila_seleccionada);

            //REORDENAR LA NUMERACION DE LA FILAS
            for(int cFilas = 0; cFilas <= 14; cFilas++){
                if (tblDetalleTraslado.getValueAt(cFilas, 0) != null){
                    tblDetalleTraslado.setValueAt(cFilas + 1, cFilas, 0);
                }
            }

        }catch(Exception error){
            Mensaje.manipulacionExcepciones("critico", "Se ha eliminado una fila");
        }
        
        totalTraslado();
    }//GEN-LAST:event_btnEliminarActionPerformed

    private void tblDetalleTrasladoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblDetalleTrasladoMouseClicked

        //CAPTURAR LA FILA SELECCIONADA PAR LA ELIMINACION
        fila_seleccionada = tblDetalleTraslado.getSelectedRow();
        columna_seleccionada = tblDetalleTraslado.getSelectedColumn();

    }//GEN-LAST:event_tblDetalleTrasladoMouseClicked

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBuscar;
    private javax.swing.JButton btnEliminar;
    private javax.swing.JButton btnGuardar;
    private javax.swing.JButton btnImprimir;
    private javax.swing.JButton btnNuevo;
    private javax.swing.JButton btnSalir;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblDireccion;
    private javax.swing.JLabel lblDireccionTraslado;
    private javax.swing.JLabel lblFecha;
    private javax.swing.JLabel lblIdSucursal;
    private javax.swing.JLabel lblIdTraslado;
    private javax.swing.JLabel lblTotal;
    private javax.swing.JPanel pnlBotones;
    private javax.swing.JPanel pnlDetalle;
    private javax.swing.JPanel pnlEncabezado;
    public static javax.swing.JTable tblDetalleTraslado;
    private javax.swing.JTextField txtDireccion;
    private javax.swing.JTextField txtDireccionTraslado;
    private javax.swing.JTextField txtFecha;
    private javax.swing.JTextField txtIdSucursal;
    private javax.swing.JTextField txtIdTraslado;
    private javax.swing.JTextField txtNombreSucursal;
    public static javax.swing.JTextField txtTotal;
    // End of variables declaration//GEN-END:variables
}

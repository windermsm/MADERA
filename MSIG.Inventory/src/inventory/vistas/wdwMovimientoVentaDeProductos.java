/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package inventory.vistas;

import inventory.acceso.*;
import inventory.guatefacturas.GenerarDocumentoFEL;
import inventory.guatefacturas.Resultado;
import inventory.objetos.*;
import inventory.servicios.Matematicas;
import java.awt.Dimension;
import java.io.IOException;
import java.net.URL;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JInternalFrame;
import javax.swing.table.DefaultTableModel;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.util.JRLoader;
import net.sf.jasperreports.view.JRViewer;
import net.sf.jasperreports.view.JasperViewer;

/**
 *
 * @author Megabyte Soluciones Integrales Guatemala
 */

public class wdwMovimientoVentaDeProductos extends javax.swing.JInternalFrame {
    String UsuarioLogeado = null;
    String rolUsuario = null;
    AccesoArchivo archivo = new AccesoArchivo();
    Matematicas matematica = new Matematicas();
    private String maximo_permitido_cf = null;
    /**
     * Creates new form wdwMovimientoVentaDeProductos
     */
    public wdwMovimientoVentaDeProductos() {
        initComponents();
        cargaEmpleados();
        cargaTipoVenta();
        
        // Obtengo el usuario logeado
        UsuarioLogeado = Inventory.lblUsuario.getText();
        System.out.println("Usuario logeado " +UsuarioLogeado);
        
        // Obtengo el rol del usuario logeado
        rolUsuario = NuevaFactura.retornatRolUsuario(UsuarioLogeado);
        
        // Deshabilitar boton de FEL al abrir pantalla
        btnGeneraFEL.setEnabled(false);
        
        System.out.println("Verificando el maximo permitido para C/F.");
        try {
            maximo_permitido_cf = archivo.leer("[MaximoPermitidoCF]");
            System.out.println(maximo_permitido_cf);
        } catch (IOException error) {
            maximo_permitido_cf = "0.00";
            System.out.println("Error al obtener el maximo permitido para C/F: " + error.toString());
        }
                        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlEncabezado = new javax.swing.JPanel();
        lblIdFactura = new javax.swing.JLabel();
        txtIdFactura = new javax.swing.JTextField();
        lblNumFactura = new javax.swing.JLabel();
        txtNumFactura = new javax.swing.JTextField();
        lblSerieFactura = new javax.swing.JLabel();
        txtSerieFactura = new javax.swing.JTextField();
        lblFolioFactura = new javax.swing.JLabel();
        txtFolioFactura = new javax.swing.JTextField();
        lblNitPersona = new javax.swing.JLabel();
        txtNitPersona = new javax.swing.JTextField();
        lblNombrePersona = new javax.swing.JLabel();
        txtNombrePersona = new javax.swing.JTextField();
        lblTelCliente = new javax.swing.JLabel();
        txtTelCliente = new javax.swing.JTextField();
        lblDirCliente = new javax.swing.JLabel();
        txtDirCliente = new javax.swing.JTextField();
        lblDirEnvioFactura = new javax.swing.JLabel();
        lblFecha = new javax.swing.JLabel();
        txtFechaEmisionFactura = new javax.swing.JTextField();
        txtDirEnvioFactura = new javax.swing.JTextField();
        lblTotalFactura = new javax.swing.JLabel();
        txtTotalFactura = new javax.swing.JTextField();
        lblEmpleado = new javax.swing.JLabel();
        cbxEmpleado = new javax.swing.JComboBox();
        txtIdEmpleado = new javax.swing.JTextField();
        lblEstado = new javax.swing.JLabel();
        cbxEstadoVenta = new javax.swing.JComboBox();
        lblTipoVenta = new javax.swing.JLabel();
        cbxTipoVenta = new javax.swing.JComboBox();
        lblDiasCredito = new javax.swing.JLabel();
        cbxDiasCredito = new javax.swing.JComboBox();
        lblCredito = new javax.swing.JLabel();
        txtCredito = new javax.swing.JTextField();
        lblContado = new javax.swing.JLabel();
        txtContado = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        txtIva = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        txtComision = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txtRecibidoPor = new javax.swing.JTextField();
        pnlBotones = new javax.swing.JPanel();
        btnSalir = new javax.swing.JButton();
        btnNuevo = new javax.swing.JButton();
        btnGuardar = new javax.swing.JButton();
        btnBuscar = new javax.swing.JButton();
        btnImprimir = new javax.swing.JButton();
        btnEliminar = new javax.swing.JButton();
        btnFactura = new javax.swing.JButton();
        btnTicket = new javax.swing.JButton();
        cbxTamanoImpresion = new javax.swing.JComboBox<>();
        cbxTipoImpresion = new javax.swing.JComboBox<>();
        pnlDetalle = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblDetalleFactura = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        txtSerieFacturaFEL = new javax.swing.JTextField();
        txtNumFacturaFEL = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        txtAutorizacionFEL = new javax.swing.JTextField();
        btnGeneraFEL = new javax.swing.JButton();
        cbxTipoDocumento = new javax.swing.JComboBox<>();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Venta de Productos");
        setFrameIcon(new javax.swing.ImageIcon(getClass().getResource("/inventory/imagenes/ventas.png"))); // NOI18N
        setPreferredSize(new java.awt.Dimension(900, 600));

        pnlEncabezado.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        lblIdFactura.setText("Envio");

        txtIdFactura.setEditable(false);
        txtIdFactura.setBackground(new java.awt.Color(102, 102, 102));
        txtIdFactura.setForeground(new java.awt.Color(255, 255, 255));
        txtIdFactura.setToolTipText("ID Venta, se genera al momento de guardar");

        lblNumFactura.setText("Factura No.");

        txtNumFactura.setEditable(false);
        txtNumFactura.setBackground(new java.awt.Color(102, 102, 102));
        txtNumFactura.setForeground(new java.awt.Color(255, 255, 255));
        txtNumFactura.setText("0");
        txtNumFactura.setToolTipText("No es obligatorio solamente si se el cliente pide factura");

        lblSerieFactura.setText("Serie");

        txtSerieFactura.setEditable(false);
        txtSerieFactura.setBackground(new java.awt.Color(102, 102, 102));
        txtSerieFactura.setForeground(new java.awt.Color(255, 255, 255));
        txtSerieFactura.setText("A");
        txtSerieFactura.setToolTipText("Numero de serie de la factura a imprimir");

        lblFolioFactura.setText("Folio");

        txtFolioFactura.setEditable(false);
        txtFolioFactura.setBackground(new java.awt.Color(102, 102, 102));
        txtFolioFactura.setForeground(new java.awt.Color(255, 255, 255));
        txtFolioFactura.setText("0");
        txtFolioFactura.setToolTipText("Correlativo del folio correspondiente al talonario de facturas");

        lblNitPersona.setText("NIT");

        txtNitPersona.setToolTipText("Ingresar el NIT del cliente si no existe debera crearlo");
        txtNitPersona.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtNitPersonaFocusLost(evt);
            }
        });

        lblNombrePersona.setText("Nombre");

        txtNombrePersona.setEditable(false);
        txtNombrePersona.setBackground(new java.awt.Color(102, 102, 102));
        txtNombrePersona.setForeground(new java.awt.Color(255, 255, 255));
        txtNombrePersona.setToolTipText("Mustra el nombre del cliente del NIT ingresado");

        lblTelCliente.setText("Tel.");

        txtTelCliente.setEditable(false);
        txtTelCliente.setBackground(new java.awt.Color(102, 102, 102));
        txtTelCliente.setForeground(new java.awt.Color(255, 255, 255));
        txtTelCliente.setToolTipText("Muestra el telefono del cliente");

        lblDirCliente.setText("Direccion");

        txtDirCliente.setEditable(false);
        txtDirCliente.setBackground(new java.awt.Color(102, 102, 102));
        txtDirCliente.setForeground(new java.awt.Color(255, 255, 255));
        txtDirCliente.setToolTipText("Muestra la direccion ingresada en el catalogo de clientes");

        lblDirEnvioFactura.setText("Enviar a");

        lblFecha.setText("Fecha");

        txtFechaEmisionFactura.setToolTipText("Fecha de venta formato YYYY-MM-DD");

        txtDirEnvioFactura.setToolTipText("Ingrese la direccion del envio de estos productos");

        lblTotalFactura.setText("Total");

        txtTotalFactura.setEditable(false);
        txtTotalFactura.setBackground(new java.awt.Color(102, 102, 102));
        txtTotalFactura.setForeground(new java.awt.Color(255, 255, 255));
        txtTotalFactura.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtTotalFactura.setToolTipText("");

        lblEmpleado.setText("Empleado");

        cbxEmpleado.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Seleccione" }));
        cbxEmpleado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbxEmpleadoActionPerformed(evt);
            }
        });

        txtIdEmpleado.setEditable(false);
        txtIdEmpleado.setBackground(new java.awt.Color(102, 102, 102));
        txtIdEmpleado.setForeground(new java.awt.Color(255, 255, 255));
        txtIdEmpleado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtIdEmpleadoActionPerformed(evt);
            }
        });

        lblEstado.setText("Estado");

        cbxEstadoVenta.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Pendiente" }));

        lblTipoVenta.setText("Tipo venta");

        cbxTipoVenta.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Contado", "Credito", "Contado/Credito" }));
        cbxTipoVenta.setToolTipText("Seleccione el tipo de pago de la venta");
        cbxTipoVenta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbxTipoVentaActionPerformed(evt);
            }
        });
        cbxTipoVenta.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                cbxTipoVentaFocusLost(evt);
            }
        });

        lblDiasCredito.setText("Dias credito");

        cbxDiasCredito.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "0 dias", "8 dias", "10 dias", "15 dias", "30 dias", "60 dias", "90 dias", "120 dias", "150 dias", "180 dias" }));

        lblCredito.setText("Credito Q.");

        lblContado.setText("Contado Q.");

        txtContado.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtContadoFocusLost(evt);
            }
        });

        jLabel1.setText("IVA");

        txtIva.setEditable(false);
        txtIva.setBackground(new java.awt.Color(102, 102, 102));
        txtIva.setForeground(new java.awt.Color(255, 255, 255));
        txtIva.setHorizontalAlignment(javax.swing.JTextField.RIGHT);

        jLabel2.setText("Comision");

        txtComision.setEditable(false);
        txtComision.setBackground(new java.awt.Color(102, 102, 102));
        txtComision.setForeground(new java.awt.Color(255, 255, 255));
        txtComision.setText("0.00");

        jLabel3.setText("Vale Recibido Por");

        javax.swing.GroupLayout pnlEncabezadoLayout = new javax.swing.GroupLayout(pnlEncabezado);
        pnlEncabezado.setLayout(pnlEncabezadoLayout);
        pnlEncabezadoLayout.setHorizontalGroup(
            pnlEncabezadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlEncabezadoLayout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(pnlEncabezadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlEncabezadoLayout.createSequentialGroup()
                        .addGroup(pnlEncabezadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblFecha, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblDirEnvioFactura))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(pnlEncabezadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnlEncabezadoLayout.createSequentialGroup()
                                .addGap(235, 235, 235)
                                .addComponent(txtNumFactura, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(lblSerieFactura)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(txtSerieFactura, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(lblFolioFactura)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(txtFolioFactura, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlEncabezadoLayout.createSequentialGroup()
                                .addGroup(pnlEncabezadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(pnlEncabezadoLayout.createSequentialGroup()
                                        .addComponent(cbxEstadoVenta, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(lblTipoVenta)
                                        .addGap(18, 18, 18)
                                        .addGroup(pnlEncabezadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(cbxTipoVenta, 0, 113, Short.MAX_VALUE)
                                            .addComponent(txtContado))
                                        .addGap(18, 18, 18)
                                        .addGroup(pnlEncabezadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(lblDiasCredito)
                                            .addComponent(jLabel2))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addGroup(pnlEncabezadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(cbxDiasCredito, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(txtComision)))
                                    .addComponent(txtDirEnvioFactura, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(pnlEncabezadoLayout.createSequentialGroup()
                                        .addComponent(txtFechaEmisionFactura, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(lblEmpleado, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(txtIdEmpleado, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(cbxEmpleado, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                .addGap(18, 18, 18)
                                .addGroup(pnlEncabezadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel3)
                                    .addComponent(txtRecibidoPor, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(pnlEncabezadoLayout.createSequentialGroup()
                                        .addGroup(pnlEncabezadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(lblTotalFactura)
                                            .addComponent(jLabel1))
                                        .addGap(18, 18, 18)
                                        .addGroup(pnlEncabezadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(txtTotalFactura, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(txtIva, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)))))))
                    .addGroup(pnlEncabezadoLayout.createSequentialGroup()
                        .addGroup(pnlEncabezadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(lblNitPersona, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblTelCliente, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblIdFactura, javax.swing.GroupLayout.DEFAULT_SIZE, 52, Short.MAX_VALUE))
                        .addGap(10, 10, 10)
                        .addGroup(pnlEncabezadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(pnlEncabezadoLayout.createSequentialGroup()
                                .addGroup(pnlEncabezadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(txtIdFactura, javax.swing.GroupLayout.DEFAULT_SIZE, 133, Short.MAX_VALUE)
                                    .addComponent(txtNitPersona))
                                .addGap(18, 18, 18)
                                .addGroup(pnlEncabezadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(lblNumFactura, javax.swing.GroupLayout.DEFAULT_SIZE, 66, Short.MAX_VALUE)
                                    .addComponent(lblNombrePersona, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addGroup(pnlEncabezadoLayout.createSequentialGroup()
                                .addComponent(txtTelCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(lblDirCliente, javax.swing.GroupLayout.DEFAULT_SIZE, 66, Short.MAX_VALUE)))
                        .addGap(18, 18, 18)
                        .addGroup(pnlEncabezadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtNombrePersona)
                            .addComponent(txtDirCliente))))
                .addGap(10, 10, 10))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlEncabezadoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlEncabezadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlEncabezadoLayout.createSequentialGroup()
                        .addComponent(lblEstado, javax.swing.GroupLayout.DEFAULT_SIZE, 184, Short.MAX_VALUE)
                        .addGap(666, 666, 666))
                    .addGroup(pnlEncabezadoLayout.createSequentialGroup()
                        .addComponent(lblCredito)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtCredito, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(lblContado)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        pnlEncabezadoLayout.setVerticalGroup(
            pnlEncabezadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlEncabezadoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlEncabezadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblIdFactura)
                    .addComponent(txtIdFactura, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblNumFactura)
                    .addComponent(txtNumFactura, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblSerieFactura)
                    .addComponent(txtSerieFactura, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblFolioFactura)
                    .addComponent(txtFolioFactura, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlEncabezadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtNitPersona, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblNitPersona)
                    .addComponent(lblNombrePersona)
                    .addComponent(txtNombrePersona, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlEncabezadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtTelCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblTelCliente)
                    .addComponent(lblDirCliente)
                    .addComponent(txtDirCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlEncabezadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblFecha)
                    .addComponent(txtFechaEmisionFactura, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblTotalFactura)
                    .addComponent(txtTotalFactura, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblEmpleado)
                    .addComponent(cbxEmpleado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtIdEmpleado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(13, 13, 13)
                .addGroup(pnlEncabezadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtDirEnvioFactura, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblDirEnvioFactura)
                    .addComponent(jLabel1)
                    .addComponent(txtIva, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlEncabezadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblEstado)
                    .addComponent(cbxEstadoVenta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblTipoVenta)
                    .addComponent(cbxTipoVenta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblDiasCredito)
                    .addComponent(cbxDiasCredito, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addGap(10, 10, 10)
                .addGroup(pnlEncabezadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCredito)
                    .addComponent(txtCredito, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblContado)
                    .addComponent(txtContado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(txtComision, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtRecibidoPor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pnlBotones.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        btnSalir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/inventory/imagenes/salir.png"))); // NOI18N
        btnSalir.setText("Salir");
        btnSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalirActionPerformed(evt);
            }
        });

        btnNuevo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/inventory/imagenes/nuevo.png"))); // NOI18N
        btnNuevo.setText("Nuevo");
        btnNuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNuevoActionPerformed(evt);
            }
        });

        btnGuardar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/inventory/imagenes/guardar.png"))); // NOI18N
        btnGuardar.setText("Guardar");
        btnGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarActionPerformed(evt);
            }
        });

        btnBuscar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/inventory/imagenes/buscar.png"))); // NOI18N
        btnBuscar.setActionCommand("buscarProducto");
        btnBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarActionPerformed(evt);
            }
        });

        btnImprimir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/inventory/imagenes/shipping.png"))); // NOI18N
        btnImprimir.setToolTipText("Imprimir Envio");
        btnImprimir.setActionCommand("imprimirEnvio");
        btnImprimir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnImprimirActionPerformed(evt);
            }
        });

        btnEliminar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/inventory/imagenes/eliminar.png"))); // NOI18N
        btnEliminar.setText("Eliminar");
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });

        btnFactura.setIcon(new javax.swing.ImageIcon(getClass().getResource("/inventory/imagenes/impresora.png"))); // NOI18N
        btnFactura.setToolTipText("Imprimir Factura");
        btnFactura.setActionCommand("imprimirEnvio");
        btnFactura.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFacturaActionPerformed(evt);
            }
        });

        btnTicket.setIcon(new javax.swing.ImageIcon(getClass().getResource("/inventory/imagenes/invoice.png"))); // NOI18N
        btnTicket.setToolTipText("Imprimir Comprobante de pago");
        btnTicket.setActionCommand("imprimirEnvio");
        btnTicket.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTicketActionPerformed(evt);
            }
        });

        cbxTamanoImpresion.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Carta", "1/2 Carta", "TMU 2.5" }));

        cbxTipoImpresion.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Comprobante", "Factura Electronica", "Envio" }));

        javax.swing.GroupLayout pnlBotonesLayout = new javax.swing.GroupLayout(pnlBotones);
        pnlBotones.setLayout(pnlBotonesLayout);
        pnlBotonesLayout.setHorizontalGroup(
            pnlBotonesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlBotonesLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnImprimir, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnTicket, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(cbxTipoImpresion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cbxTamanoImpresion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnFactura, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(77, 77, 77)
                .addComponent(btnGuardar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnNuevo)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnEliminar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnSalir)
                .addContainerGap())
        );
        pnlBotonesLayout.setVerticalGroup(
            pnlBotonesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlBotonesLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlBotonesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btnTicket)
                    .addComponent(btnFactura)
                    .addGroup(pnlBotonesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnSalir)
                        .addComponent(btnNuevo)
                        .addComponent(btnGuardar)
                        .addComponent(btnBuscar)
                        .addComponent(btnImprimir)
                        .addComponent(btnEliminar))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, pnlBotonesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(cbxTamanoImpresion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(cbxTipoImpresion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pnlDetalle.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        tblDetalleFactura.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "No.", "Codigo", "Descripcion del Producto", "Cantidad", "P. Venta", "P. Minimo", "P. Normal", "Total", "Comentario", "Arancel"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.Float.class, java.lang.Float.class, java.lang.Float.class, java.lang.Float.class, java.lang.Float.class, java.lang.String.class, java.lang.Float.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, false, true, true, false, false, false, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblDetalleFactura.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        tblDetalleFactura.getTableHeader().setReorderingAllowed(false);
        tblDetalleFactura.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblDetalleFacturaMouseClicked(evt);
            }
        });
        tblDetalleFactura.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tblDetalleFacturaKeyPressed(evt);
            }
        });
        jScrollPane1.setViewportView(tblDetalleFactura);
        if (tblDetalleFactura.getColumnModel().getColumnCount() > 0) {
            tblDetalleFactura.getColumnModel().getColumn(0).setResizable(false);
            tblDetalleFactura.getColumnModel().getColumn(0).setPreferredWidth(10);
            tblDetalleFactura.getColumnModel().getColumn(1).setResizable(false);
            tblDetalleFactura.getColumnModel().getColumn(1).setPreferredWidth(20);
            tblDetalleFactura.getColumnModel().getColumn(2).setPreferredWidth(250);
            tblDetalleFactura.getColumnModel().getColumn(3).setResizable(false);
            tblDetalleFactura.getColumnModel().getColumn(3).setPreferredWidth(20);
            tblDetalleFactura.getColumnModel().getColumn(4).setResizable(false);
            tblDetalleFactura.getColumnModel().getColumn(4).setPreferredWidth(20);
            tblDetalleFactura.getColumnModel().getColumn(5).setResizable(false);
            tblDetalleFactura.getColumnModel().getColumn(5).setPreferredWidth(30);
            tblDetalleFactura.getColumnModel().getColumn(6).setResizable(false);
            tblDetalleFactura.getColumnModel().getColumn(6).setPreferredWidth(20);
            tblDetalleFactura.getColumnModel().getColumn(7).setResizable(false);
            tblDetalleFactura.getColumnModel().getColumn(7).setPreferredWidth(20);
        }

        javax.swing.GroupLayout pnlDetalleLayout = new javax.swing.GroupLayout(pnlDetalle);
        pnlDetalle.setLayout(pnlDetalleLayout);
        pnlDetalleLayout.setHorizontalGroup(
            pnlDetalleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlDetalleLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
        );
        pnlDetalleLayout.setVerticalGroup(
            pnlDetalleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlDetalleLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 177, Short.MAX_VALUE)
                .addContainerGap())
        );

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        txtSerieFacturaFEL.setEditable(false);
        txtSerieFacturaFEL.setBackground(new java.awt.Color(102, 102, 102));
        txtSerieFacturaFEL.setForeground(new java.awt.Color(255, 255, 255));
        txtSerieFacturaFEL.setText("0");

        txtNumFacturaFEL.setEditable(false);
        txtNumFacturaFEL.setBackground(new java.awt.Color(102, 102, 102));
        txtNumFacturaFEL.setForeground(new java.awt.Color(255, 255, 255));
        txtNumFacturaFEL.setText("0");

        jLabel4.setText("Serie");

        jLabel5.setText("Numero");

        jLabel6.setText("Autorizacion");

        txtAutorizacionFEL.setEditable(false);
        txtAutorizacionFEL.setBackground(new java.awt.Color(102, 102, 102));
        txtAutorizacionFEL.setForeground(new java.awt.Color(255, 255, 255));
        txtAutorizacionFEL.setText("0");

        btnGeneraFEL.setText("FEL");
        btnGeneraFEL.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGeneraFELActionPerformed(evt);
            }
        });

        cbxTipoDocumento.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "NIT", "DPI", "PAS" }));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(txtSerieFacturaFEL, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(txtNumFacturaFEL, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel6)
                .addGap(18, 18, 18)
                .addComponent(txtAutorizacionFEL)
                .addGap(18, 18, 18)
                .addComponent(cbxTipoDocumento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnGeneraFEL)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtNumFacturaFEL, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(txtSerieFacturaFEL, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addComponent(jLabel6)
                    .addComponent(txtAutorizacionFEL, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnGeneraFEL)
                    .addComponent(cbxTipoDocumento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pnlBotones, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pnlDetalle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pnlEncabezado, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pnlEncabezado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(pnlDetalle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlBotones, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    //VARIABLES GLOBALES
    ObjetosFactura Factura = new ObjetosFactura();
    ObjetosProducto Producto = new ObjetosProducto();
    ObjetosDetalleFactura Detalle = new ObjetosDetalleFactura();
    AccesoCliente NuevoCliente = new AccesoCliente();
    AccesoFactura NuevaFactura = new AccesoFactura();
    AccesoPersona NuevaPersona = new AccesoPersona();
    AccesoProducto NuevoProducto = new AccesoProducto();
    AccesoDetalleFactura NuevoDetalleFactura = new AccesoDetalleFactura();
    AccesoExcepciones Mensaje = new AccesoExcepciones();
    
    Date fecha = new Date();
    float total_factura = 0;
    float cantidad = 0;
    float precio = 0;
    float total_iva = 0;
    
    //SE COLOCARON PUBLICAS PARA PODER UTILIZARLAS EN EL CATALOGO DE PRODUCTOS
    //YA QUE DESDE ALLI SE PUEDE IMPORTAR UN CODIGO SELECCIONADO PRESIONANDO
    //SOBRE EL CODIGO QUE QUIERE ENVIAR Y LUEGO EL BOTON EVIAR AL DETALLE DE VENTA
    public int fila_seleccionada = 0;
    public int columna_seleccionada = 0;
    
    private void limpiarEncabezadoFactura(){
        txtIdFactura.setText("");
        txtNumFactura.setText("");
        txtSerieFactura.setText("");
        txtFolioFactura.setText("");
        txtNitPersona.setText("");
        txtNombrePersona.setText("");
        txtTelCliente.setText("");
        txtDirCliente.setText("");
        txtFechaEmisionFactura.setText("");
        txtTotalFactura.setText("");
        txtDirEnvioFactura.setText("");
    }
    
    private void limpiarDetalleFactura(){
        String[] columnas = {"No","Codigo","Descripcion del Producto","Cantidad","P. Venta","P. Minimo","P. Normal", "Total"};
        DefaultTableModel modelo_tabla = new DefaultTableModel(columnas, 50);
        tblDetalleFactura.setModel(modelo_tabla);
        cantidad = 0;
    }
    
    private void descontarProducto(String pId_producto, float pCantidad){
        ArrayList<ObjetosProducto> BuscarProducto = new ArrayList();
        
        try{
            BuscarProducto = NuevoProducto.buscarProducto(pId_producto);
            if(BuscarProducto.isEmpty()){
                Mensaje.manipulacionExcepciones("critico", "No existe el Producto "+pId_producto+" En la Base de Datos");
            } else {
                if(BuscarProducto.size()>1){
                    Mensaje.manipulacionExcepciones("critico", "Existe mas de un Producto con este ID "+pId_producto);
                } else {
                    //PROCEDE A REALIZAR LA ACTUALIZACION DESCONTANDO LA CANTIDAD
                    NuevoProducto.actualizarExistencia(pId_producto, BuscarProducto.get(0).getExi_producto()-pCantidad);
                }
            }
        }catch(Exception error){
            Mensaje.manipulacionExcepciones("critico", "Ocurrio un error al buscar el Producto: "+pId_producto+" -> "+error);
        }
    }
    
    private ObjetosProducto obtenerDatosProducto(String pId_producto){
        
        ArrayList<ObjetosProducto> BuscarProducto = new ArrayList();
        ObjetosProducto Producto = new ObjetosProducto();
        
        //CONSULTAR EL ID DE PRODUCTO PARA OBTENER LOS DATOS
        try{
            BuscarProducto = NuevoProducto.buscarProducto(pId_producto);
        }catch(Exception error){
            Mensaje.manipulacionExcepciones("critico", "Ocurrio un error al consultar el codigo del producto");
        }
        
        //EVALUAR EL RESULTADO DE LA BUSQUEDA
        if(BuscarProducto.isEmpty()){
            System.out.println("NO EXISTE NINGUN PRODUCTO CON ESTE CODIGO");
            Mensaje.manipulacionExcepciones("informacion", "Este Codigo de Producto no existe en su Base de Datos");
        } else {
            if(BuscarProducto.size()>1){
                System.out.println("EXISTEN "+BuscarProducto.size()+"PRODUCTOS CON ESTE CODIGO");
                Mensaje.manipulacionExcepciones("critico", "Existe mas de un producto con este codigo");
            } else {
                Producto.setId_producto(BuscarProducto.get(0).getId_producto());
                Producto.setId_provedor(BuscarProducto.get(0).getId_proveedor());
                Producto.setMarca_producto(BuscarProducto.get(0).getMarca_producto());
                Producto.setDesc_producto(BuscarProducto.get(0).getDesc_producto());
                Producto.setPrecio_compra_producto(BuscarProducto.get(0).getPrecio_compra_producto());
                Producto.setPrecio_est_producto(BuscarProducto.get(0).getPrecio_est_producto());
                Producto.setExi_producto(BuscarProducto.get(0).getExi_producto());
                System.out.println("EXISTENCIA OBTENIDO POR CONSULTA: "+Producto.getExi_producto());
                Producto.setUnidad_medida_producto(BuscarProducto.get(0).getUnidad_medida_producto());
                Producto.setMaximo_producto(BuscarProducto.get(0).getMaximo_producto());
                Producto.setMinimo_producto(BuscarProducto.get(0).getMinimo_producto());
                Producto.setPrj_est_producto(BuscarProducto.get(0).getPrj_est_producto());
                Producto.setPrj_min_producto(BuscarProducto.get(0).getPrj_min_producto());
                Producto.setPrecio_min_producto(BuscarProducto.get(0).getPrecio_min_producto());
                System.out.println("PRECIO MINIMO OBTENIDO POR CONSULTA: "+Producto.getPrecio_min_producto());
            }
        }
        
        return Producto;
    }
    
    private void obtenerDatosCliente(String pNit_persona){
        
        ArrayList<ObjetosPersona> BuscarPersona = new ArrayList();
        ArrayList<ObjetosCliente> BuscarCliente = new ArrayList();
        
        //CONSULTAR EL NUMERO DE NIT DE LA PERSONA
        try{
            BuscarPersona = NuevaPersona.buscarPersona(pNit_persona);
        }catch(Exception error){
            Mensaje.manipulacionExcepciones("critico", "Ocurrio un error al buscar el nombre -> "+error);
        }
        
        //EVALUAR EL RESULTADO DE LA BUSQUEDA
        if(BuscarPersona.isEmpty()){
            System.out.println("NO SE ENCONTRO NINGUNA PERSONA CON ESTE NIT");
            Mensaje.manipulacionExcepciones("critico", "No existen datos de esta Persona en la Base de Datos");
        } else {
            if(BuscarPersona.size()>1){
                System.out.println("EXISTE "+BuscarPersona.size()+" PERSONAS CON ESTE NUMERO DE NIT");
                Mensaje.manipulacionExcepciones("critico", "Existe mas de una persona con este numero de NIT");
            } else {
                txtNombrePersona.setText(BuscarPersona.get(0).getNom_persona());
            }
        }
        
        //CONSULTAR EL NIT DEL CLIENTE
        try{
            BuscarCliente = NuevoCliente.buscarCliente(BuscarPersona.get(0).getId_persona());
        }catch(Exception error){
            Mensaje.manipulacionExcepciones("critico", "Ocurrio un error al buscar los datos del cliente -> "+error);
        }
        
        if (BuscarCliente.isEmpty()) {
            
            System.out.println("NO EXISTE NINGUN CLIENTE CON ESTE NUMERO DE NIT");
            Mensaje.manipulacionExcepciones("interrogante", "Desea crear este cliente en la Base de Datos");
            System.out.println("VALOR DEL MENSAJE = " + Mensaje.valor);
            
            if (Mensaje.valor == 0) {
                wdwCatalogoClientes CatalogoClientes = new wdwCatalogoClientes();
                Inventory.pnlPrincipal.add(CatalogoClientes);
                CatalogoClientes.toFront();
                CatalogoClientes.setVisible(true);
                Mensaje.valor = 2;
            } else {
                txtNitPersona.setText("C/F");
                txtNitPersona.requestFocus();
            }
            
        } else {
            if (BuscarCliente.size() > 1) {
                System.out.println("SE ENCONTRARON " + BuscarCliente.size() + " CLIENTES CON ESTE NUMERO DE NIT");
                Mensaje.manipulacionExcepciones("critico", "Se encontro mas de un Cliente con este numero de NIT");
            } else {
                txtTelCliente.setText(String.valueOf(BuscarCliente.get(0).getTel_cliente()));
                txtDirCliente.setText(BuscarCliente.get(0).getDir_cliente());
                txtFechaEmisionFactura.setText((1900 + fecha.getYear()) + "-" + (fecha.getMonth() + 1) + "-" + fecha.getDate());
                txtTotalFactura.setText("0.00");
                txtDirEnvioFactura.requestFocus();
            }
        }
        
        BuscarPersona.removeAll(BuscarCliente);
        BuscarCliente.removeAll(BuscarCliente);
    }
    
    private void cargaTipoVenta(){
        // Deshabilito el combobox dias de credito y el textbox de monto credito
        cbxDiasCredito.setSelectedIndex(7);
        cbxDiasCredito.setEnabled(false);
        txtCredito.setEnabled(false);

        // Habilito el textbox monto contado
        txtContado.setEnabled(true);

        // Coloco en 0 los textbox deshabilitados
        txtCredito.setText("0");

        // Limpio el valor de los textbox habilitados
        txtContado.setText("");
    }
    
    private void cargaEmpleados(){
        ArrayList<ObjetosFactura> lUsuarios = new ArrayList();
            
        try{
            lUsuarios = NuevaFactura.retornaNombreEmpleados();
            
        }catch(Exception error){
            Mensaje.manipulacionExcepciones("critico", "Error en busqueda de usuarios " + error);
        }
        
        // Lleno el combobox con los registros de empleados que existen
        for(ObjetosFactura xUsuario : lUsuarios){
            cbxEmpleado.addItem(xUsuario.getNombre_empleado());
        }
    }
    
    private int obtenerIdCliente(String pNit_cliente){
        
        ArrayList<ObjetosPersona> BuscarPersona = new ArrayList();
        ArrayList<ObjetosCliente> BuscarCliente = new ArrayList();
        int vId_cliente = 0;
        
        //CONSULTAR EL NUMERO DE NIT DE LA PERSONA
        try{
            BuscarPersona = NuevaPersona.buscarPersona(pNit_cliente);
        }catch(Exception error){
            System.out.println("NO SE ENCONTRO NINGUNA PERSONA CON ESTE NIT");
            Mensaje.manipulacionExcepciones("critico", "Ocurrio un error al consulta el NIT del Cliente -> "+error);
        }
        
        //EVALUANDO LOS DATOS OPTENDIOS DE PERSONA
        if(BuscarPersona.isEmpty()){
            Mensaje.manipulacionExcepciones("critico", "No existe este Cliente en la Base de Datos");
        } else {
            if(BuscarPersona.size()>1){
                Mensaje.manipulacionExcepciones("critico", "Existen mas personas con este Numero de NIT");
            }
        }
                
        //CONSULTAR EL ID DE LA PERSONA EN CLIENTE
        try{
            BuscarCliente = NuevoCliente.buscarCliente(BuscarPersona.get(0).getId_persona());
        }catch(Exception error){
            Mensaje.manipulacionExcepciones("informacion", "Ocurrio un error al consulta este numero de NIT -> "+error);
        }
        
        //EVALUAR EL RESULTADO DE LA BUSQUEDA
        if(BuscarCliente.isEmpty()){
            System.out.println("NO SE ENCONTRO EL CLIENTE SE MOSTRA PANTALLA DE INGRESO DE CLIENTES");
            Mensaje.manipulacionExcepciones("critico", "Debe crear este cliente en la base de datos");
        }else{
            if(BuscarCliente.size()>1){
                System.out.println("EXISTEN "+BuscarCliente.size()+" CLIENTES CON ESTE NUMERO DE NIT");
                Mensaje.manipulacionExcepciones("critical", "Este numero de Nit esta repetido");
            } else {
                vId_cliente = BuscarCliente.get(0).getId_cliente();
            }
        }
        
        return vId_cliente;
    }
    
    private boolean verificarDatosFactura(ObjetosFactura pFactura){
        boolean vDatos_correctos = false;
        
        if("".equals(txtNitPersona.getText())){
            Mensaje.manipulacionExcepciones("critical", "Por favor ingrese el numero de NIT");
        } else {
            if("".equals(pFactura.getFecha_emision_factura())){
                Mensaje.manipulacionExcepciones("critical", "Ingrese la fecha de ese envio");
            } else {
                if("".equals(txtNumFactura.getText())){
                    Mensaje.manipulacionExcepciones("critical", "Por favor ingrese el numero de FACTURA");
                } else {
                    if("".equals(txtSerieFactura.getText())){
                        Mensaje.manipulacionExcepciones("critical", "Por favor ingrese el numero de SERIE");
                    } else {
                        if("".equals(txtFolioFactura.getText())){
                            Mensaje.manipulacionExcepciones("critical", "Por favor ingrese el numero de FOLIO");
                        } else {
                            vDatos_correctos = true;
                        }
                    }
                }                
            }
        }
        
        return vDatos_correctos;
    }
    
    private void btnGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarActionPerformed
        
        totalFactura();
        totalIva();
        
        //Obtener el total segun el calculo efecturado de los productos
        double total_a_facturar = Double.parseDouble(txtTotalFactura.getText());
        
        //Obtener el total impuesto por la ley para emision de facturas con C/F
        double maximo_permitido = Double.parseDouble(maximo_permitido_cf);
        String numero_documento = txtNitPersona.getText().trim().toUpperCase();
        
        if(total_a_facturar >= maximo_permitido && (numero_documento.equals("C/F") || numero_documento.equals("CF"))) {
            Mensaje.manipulacionExcepciones("critico", "No puede emitir una Factura con este monto para Consumidor Final");
        } else {
            GuardarVenta();
        }
        
        //ALmacenar los famosos datos de FEL siempre y cuando exista el ID Factura
        if (!txtIdFactura.getText().isEmpty()) {
            AccesoFacturaFEL FEL = new AccesoFacturaFEL();
            ObjetosFacturaFel FAC = new ObjetosFacturaFel();
            FAC.setId_factura(Integer.parseInt(txtIdFactura.getText()));
            FAC.setSerie_factura_fel(txtSerieFacturaFEL.getText().trim());
            FAC.setNumero_factura_fel(txtNumFacturaFEL.getText().trim());
            FAC.setAutorizacion_factura_fel(txtAutorizacionFEL.getText().trim());
            FAC.setTipo_documento_factura_fel(cbxTipoDocumento.getSelectedItem().toString());
            FEL.insertarFacturaFEL(FAC, Inventory.lblUsuario.getText(), "");
        }
        
        // Validar si la venta se pudo realizar para activar boton de FEL
        int valor_id_factura = Integer.parseInt(txtIdFactura.getText());
        if( valor_id_factura > 0) {
            btnGeneraFEL.setEnabled(true);
        } else {
            Mensaje.manipulacionExcepciones("informacion","No se pudo guardar la venta por lo tanto no se puede generar FEL.");
        }
        
    }//GEN-LAST:event_btnGuardarActionPerformed

    
    public void GuardarVenta () {
        
        if(cbxEmpleado.getSelectedItem().toString().equals("Seleccione")){
            Mensaje.manipulacionExcepciones("informacion","Debe seleccionar el empleado que esta realizando la venta");
        }else{
            
            /* Antes de guardar la factura y su detalle reviso que la suma del monto
            credito y monto contado sea igual al total de la factura */
            float vContado = 0;
            float vCredito = 0;
            float vTotal = 0;
            float vParcial = 0;

            if(!txtContado.getText().equals("")){
                vContado = Float.parseFloat(txtContado.getText());
            }

            if(!txtCredito.getText().equals("")){
                vCredito = Float.parseFloat(txtCredito.getText());
            }

            if(!txtTotalFactura.getText().equals("")){
                vTotal = Float.parseFloat(txtTotalFactura.getText());
            }
            
            vParcial = vContado + vCredito;
            
            
            // verificar que los sub-totales sean los correctos
            int error_detalle = 0;
            for(int c=0; c<=tblDetalleFactura.getRowCount(); c++){
                System.out.println("Revisando fila " +  c);
                try{
                    Double precio_venta = Double.parseDouble(tblDetalleFactura.getValueAt(c, 4).toString());
                    Double cantidad_venta = Double.parseDouble(tblDetalleFactura.getValueAt(c, 3).toString());
                    Double sub_total = matematica.aproxima(precio_venta * cantidad_venta, 2);
                    Double sub_total_actual = matematica.aproxima(Double.parseDouble(tblDetalleFactura.getValueAt(c, 7).toString()), 2);
                    System.out.println("Sub Total: " + sub_total + " Sub Total Actual: " + sub_total_actual);
                    if((sub_total - sub_total_actual) != 0){
                        System.out.println("Se encontro un error");
                        tblDetalleFactura.setValueAt("REVISAR SUB TOTAL", c, 8);
                        error_detalle++;
                    }
                }catch(Exception error) {}
            }
            
            if(error_detalle > 0){
                Mensaje.manipulacionExcepciones("informacion", "Revise el detalle, una o mas filas no fueron actualizadas");
            }

            // El total y los montos deben ser igual a cero, sino no podra pagar

            if((vTotal - vParcial) == 0 && error_detalle == 0){
                
                boolean bandera = true;
                float credito_disponible = 0;
                float vPermite_venta = 0;
                //String rolUsuario = null;
                
                if(cbxTipoVenta.getSelectedItem().toString().equals("Credito") || cbxTipoVenta.getSelectedItem().toString().equals("Contado/Credito")){
                    
                    credito_disponible = NuevaFactura.retornaCreditoDisponible(txtNitPersona.getText());                
                    vPermite_venta = credito_disponible - vTotal;

                    System.out.println("CREDITO DISPONIBLE " + credito_disponible);

                    // Si vPermite_venta es mayor a 0 significa que el credito del cliente es mayor al total que se desea facturar
                    if(vPermite_venta >= 0){
                        bandera = true;
                    }else{
                        bandera = false;
                        
                        // Obtengo el rol del usuario logeado
                        //rolUsuario = NuevaFactura.retornatRolUsuario(UsuarioLogeado);
                        
                        // Si el usuario logeado tiene rol administrador, solo le muestro una alerta pero SI le permito realizar la venta
                        if(rolUsuario.equals("Administrador")){
                            bandera = true;
                            System.out.println("Usuario Logeado rol " + rolUsuario);
                            Mensaje.manipulacionExcepciones("informacion","La venta excede el limite de credito del cliente. Credito disponible Q. " +credito_disponible);
                        }
                       
                    }
                }
                
                //float credito_disponible = NuevaFactura.retornaCreditoDisponible(txtNitPersona.getText());                
                //float vPermite_venta = credito_disponible - vTotal;
                
                //System.out.println("CREDITO DISPONIBLE " + credito_disponible);
                
                if(bandera){
                    
                    boolean error_grabar = false;

                    /*********************************************************************
                    * VERIFICAR QUE ESTA FACTURA NO HAYA SIDO GUARDADA ANTERIORMENTE
                    * MEDIANTE EL ID DE VENTA, DE SER ASI SE DEBE PEDIR QUE INGRESE 
                    * DE NUEVA OTRA FACTURA PARA PODER CONTINUAR O SALIR DE LA PANTALLA
                    * EN CASO NO SE DESE REALIZAR OTRA VENTA. ESTO CON EL MOTIVO DE NO
                    * PERMITIR QUE SE GUARDE DOS VECES LA MISMA FACTURA EN LA BD
                    */
                    
                    System.out.println("El ID de la facuta antes de gaurdar es: " + txtIdFactura.getText());
                    
                    if (txtIdFactura.getText().equals("")){
                        
                        try{
                            
                            float credito = 0;
                            float contado = 0;
                            float comision = 0;


                            if(!txtCredito.getText().equals("")){
                                credito = Float.parseFloat(txtCredito.getText());
                            }

                            if(!txtContado.getText().equals("")){
                                contado = Float.parseFloat(txtContado.getText());
                            }

                            if(!txtComision.getText().equals("")){
                                comision = Float.parseFloat(txtComision.getText());
                            }
                            
                            
                            Factura.setNumero_factura(Integer.parseInt(txtNumFactura.getText()));
                            Factura.setSerie_factura(txtSerieFactura.getText());
                            Factura.setFolio_factura(txtFolioFactura.getText());
                            //OBTENER EL ID PERSONA ATRAVEZ DEL NUMERO DE NIT
                            Factura.setId_cliente(obtenerIdCliente(txtNitPersona.getText()));
                            Factura.setFecha_emision_factura(txtFechaEmisionFactura.getText());
                            Factura.setDir_envio_factura(txtDirEnvioFactura.getText());
                            Factura.setId_empleado(Integer.parseInt(txtIdEmpleado.getText()));
                            Factura.setEstado_factura(cbxEstadoVenta.getSelectedItem().toString());
                            //EN ESTE MOMENTO TOTAL ES IGUAL A CERO
                            Factura.setTotal_factura(Float.parseFloat(txtTotalFactura.getText()));
                            Factura.setTipo_venta(cbxTipoVenta.getSelectedItem().toString());
                            Factura.setDias_de_credito(cbxDiasCredito.getSelectedItem().toString());
                            Factura.setMonto_credito(credito);
                            Factura.setMonto_contado(contado);
                            Factura.setIva_factura(Float.parseFloat(txtIva.getText()));
                            Factura.setComision_factura(comision);

                        }catch(Error error){
                            Mensaje.manipulacionExcepciones("critico", "Ocurrio un error al leer los datos de Factura -> "+error);
                        }

                        if(verificarDatosFactura(Factura)){
                            NuevaFactura.insertarFactura(Factura);
                        }else{
                            Mensaje.manipulacionExcepciones("critico", "Por favor verifique los datos del envio");
                        }

                        //OBTENER EL ID DE LA FACTURA INGRESADA
                        try{
                            ArrayList<ObjetosFactura> BuscarFactura = new ArrayList();
                            BuscarFactura = NuevaFactura.seleccionarIdFactura(Factura);
                            if(BuscarFactura.isEmpty()){
                                Mensaje.manipulacionExcepciones("critico", "No existe este Envio en la Base de Datos");
                            } else {
                                txtIdFactura.setText(String.valueOf(BuscarFactura.get(0).getId_factura()));
                            }
                        }catch(Exception error){
                            Mensaje.manipulacionExcepciones("critico", "Ocurrio un error al consultar el ID Envio -> "+error);
                        }

                        //ALMACENAR EL DETALLE DE LA FACTURA Y ACTUALIZAR EL CATALOGO DE PRODUCTOS
                        try {
                            
                            for (int cFilas = 0; cFilas < tblDetalleFactura.getRowCount(); cFilas++) {

                                //INSERTAR EN D_FACTURA LOS PRODUCTOS VENDIDOS

                                if (tblDetalleFactura.getValueAt(cFilas, 0) != null) {

                                    try {

                                        System.out.println("TRATANDO DE GUARDAR EL REGISTRO NO: "+tblDetalleFactura.getValueAt(cFilas, 0));

                                        Detalle.setId_d_factura((Integer) tblDetalleFactura.getValueAt(cFilas, 0));
                                        Detalle.setId_factura(Integer.parseInt(txtIdFactura.getText()));
                                        Detalle.setId_producto(tblDetalleFactura.getValueAt(cFilas, 1).toString());
                                        Detalle.setCant_d_factura(Float.parseFloat(tblDetalleFactura.getValueAt(cFilas, 3).toString()));
                                        Detalle.setPrecio_venta_d_factura(Float.parseFloat(tblDetalleFactura.getValueAt(cFilas, 4).toString()));
                                        Detalle.setSub_total_d_factura(Float.parseFloat(tblDetalleFactura.getValueAt(cFilas, 7).toString()));
                                        Detalle.setComentario_d_factura(tblDetalleFactura.getValueAt(cFilas, 8).toString());
                                        Detalle.setArancel_factura(Float.parseFloat(tblDetalleFactura.getValueAt(cFilas, 9).toString()));
                                        Detalle.setPrecio_estandar(Float.parseFloat(tblDetalleFactura.getValueAt(cFilas, 6).toString()));

                                        if(Float.parseFloat(txtTotalFactura.getText()) > 0.00) {
                                            NuevoDetalleFactura.insertarDetalleFactura(Detalle);
                                            descontarProducto(Detalle.getId_producto(), Detalle.getCant_d_factura());
                                        }

                                    } catch (Exception error) {
                                        Mensaje.manipulacionExcepciones("critico", "Ocurrio un error en la Fila " + cFilas + " -> " + error);
                                        error_grabar = true;
                                    }
                                }
                            }

                            if(error_grabar==false){
                                btnGuardar.setEnabled(false);
                                Mensaje.manipulacionExcepciones("informacion","Venta guardados exitosamente.");
                            }

                        } catch (Exception error) {
                            Mensaje.manipulacionExcepciones("critico", "Ocurrio un error al almacenar le detalle." + error);
                        }
                        
                    } else {
                        Mensaje.manipulacionExcepciones("critico", "Esta venta ya fue realizada");
                    }
                
                }else{
                    Mensaje.manipulacionExcepciones("informacion","Ha excedido el limite, tiene disponible Q. " + credito_disponible);
                }
            }else{
                Mensaje.manipulacionExcepciones("informacion","La suma del pago al credito y al contado no es igual al monto total de la factura.");
            }
        }
        
        // Validar si la venta se pudo realizar para activar boton de FEL
        int valor_id_factura = Integer.parseInt(txtIdFactura.getText());
        if( valor_id_factura > 0) {
            btnGeneraFEL.setEnabled(true);
        } else {
            Mensaje.manipulacionExcepciones("informacion","No se pudo guardar la venta por lo tanto no se puede generar FEL.");
        }
        
    }
    
    private void txtNitPersonaFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtNitPersonaFocusLost
        
        if (txtNitPersona.getText().equals("c/f") || txtNitPersona.getText().equals("C/F") || txtNitPersona.getText().equals("")) {
            txtNitPersona.setText("C/F");
            txtNombrePersona.setText("Consumidor Final");
            txtTelCliente.setText("0");
            txtDirCliente.setText("Ciudad");
            txtFechaEmisionFactura.setText((1900 + fecha.getYear()) + "-" + (fecha.getMonth()+1) + "-" + fecha.getDate());
            txtTotalFactura.setText("0.00");
            txtDirEnvioFactura.requestFocus();
        } else {
            obtenerDatosCliente(txtNitPersona.getText());
        }
        
    }//GEN-LAST:event_txtNitPersonaFocusLost

    private void totalFactura() {
        total_factura = 0;
        for(int cFilas = 0; cFilas <= 50; cFilas++) {
            try{
                total_factura = total_factura + (float) tblDetalleFactura.getValueAt(cFilas, 3) * (float) tblDetalleFactura.getValueAt(cFilas, 4);
            } catch(Exception error) {
                total_factura = total_factura + 0;
            }
        }
        txtTotalFactura.setText(String.valueOf(Math.rint(total_factura * 100)/100));
    }
    
    private void totalIva(){
        Double total_iva = Math.rint(total_factura * 12)/100;
        txtIva.setText(String.valueOf(matematica.redondear(total_iva)));
    }
    
    private void tblDetalleFacturaKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tblDetalleFacturaKeyPressed

        //VERIFICAR SI SURGE ALGUN EVENTO SOBRE CUALQUIE CELDA DE LA TABLA
        if (evt.getKeyCode() == 9) {

            fila_seleccionada = tblDetalleFactura.getSelectedRow();
            columna_seleccionada = tblDetalleFactura.getSelectedColumn();

            //VERIFICAR LA OPERACION A REALIZAR SEGUN SU POSICION
            System.out.println("POSICIONADO EN LA FILA: " + fila_seleccionada + " COLUMNA: " + columna_seleccionada);

            //BUSCAR LA INFORMACION DEL PRODUCTO SELECCIONADO
            if (columna_seleccionada == 2) {
                Producto = obtenerDatosProducto(tblDetalleFactura.getValueAt(fila_seleccionada, columna_seleccionada - 1).toString());
                tblDetalleFactura.setValueAt((String) Producto.getDesc_producto() + " - " + (String) Producto.getMarca_producto(), fila_seleccionada, columna_seleccionada);
                tblDetalleFactura.setValueAt((float) Producto.getPrecio_est_producto(), fila_seleccionada, columna_seleccionada + 2);
                tblDetalleFactura.setValueAt((float) Producto.getPrecio_min_producto(), fila_seleccionada, columna_seleccionada + 3);
                tblDetalleFactura.setValueAt((float) Producto.getPrecio_est_producto(), fila_seleccionada, columna_seleccionada + 4);
            }
            
            //VERIFICA LA CANTIDAD ACTUAL Y SU EXISTENCIA EN PODUCTOS
            if (columna_seleccionada == 4) {

                //EVALUAR QUE LA CANTIDAD NO SEA NULA
                if (tblDetalleFactura.getValueAt(fila_seleccionada, columna_seleccionada - 1) == null) {
                    Mensaje.manipulacionExcepciones("critico", "No ingreso la cantidad se produjo un error critico");
                } else {
                    cantidad = (float) tblDetalleFactura.getValueAt(fila_seleccionada, columna_seleccionada - 1);
                }

                //EVALUAR QUE SEA MAYOR QUE CERO
                if ((float) tblDetalleFactura.getValueAt(fila_seleccionada, columna_seleccionada - 1) < 0.01) {
                    Mensaje.manipulacionExcepciones("critico", "La cantidad ingresada no es valida");
                }

                System.out.println("EXISTENCIA: " + Producto.getExi_producto());
                System.out.println("MINIMO: " + Producto.getMinimo_producto());

                //EVALUAR QUE NO SEA MAYOR QUE LA EXISTENCIA
                if ((float) tblDetalleFactura.getValueAt(fila_seleccionada, columna_seleccionada - 1) > Producto.getExi_producto()) {
                    Mensaje.manipulacionExcepciones("critico", "Esta cantidad excede el total de existencia");
                }

                //EVALUAR EL MINIMO DE PRODUCTO EXISTENTE
                if (Producto.getExi_producto() <= Producto.getMinimo_producto()) {
                    Mensaje.manipulacionExcepciones("informacion", "Este producto a llegado al minimo");
                }

                //EVALUAR SI EL PRODUCTO ESTA EN CERO
                if (Producto.getExi_producto() < 0.01) {
                    Mensaje.manipulacionExcepciones("informacion", "Este producto a llegado al minimo");
                }

            }

            if (columna_seleccionada == 5) {
                precio = (float) tblDetalleFactura.getValueAt(fila_seleccionada, columna_seleccionada - 1);
            }

            if (columna_seleccionada == 6) {
                
                System.out.println("CANTIDAD: " + cantidad);
                System.out.println("PRECIO: " + precio);

                //EVALUAR QUE NO SEA MENOR AL PRECIO MINIMO A MENOS QUE SEA ADMINISTRADOR                
                if ((Float.parseFloat(tblDetalleFactura.getValueAt(tblDetalleFactura.getSelectedRow(),4).toString()) > Float.parseFloat(tblDetalleFactura.getValueAt(tblDetalleFactura.getSelectedRow(),5).toString())) || (Inventory.lblRol.getText().equals("Administrador"))) {
                    //CALCULAR EL SUB TOTAL Y TOTAL DE LA FACTURA Y REDONDEARLO
                    tblDetalleFactura.setValueAt(matematica.aproxima(cantidad * precio, 2), fila_seleccionada, columna_seleccionada + 1);
                    tblDetalleFactura.setValueAt(fila_seleccionada + 1, fila_seleccionada, 0);
                    totalFactura();
                    // Por cada elemento en el detalle de la factura calculare el IVA
                    totalIva();
                } else {
                    Mensaje.manipulacionExcepciones("critico", "No puede vender el producto a este precio");
                }
            }
            
            //[20150404][INVG][INICIO]
            if(columna_seleccionada==8){
                tblDetalleFactura.setValueAt("S/C", fila_seleccionada, columna_seleccionada);
            }
            
            if(columna_seleccionada==9){
                tblDetalleFactura.setValueAt(0.00, fila_seleccionada, columna_seleccionada);
            }
            
        }
    }//GEN-LAST:event_tblDetalleFacturaKeyPressed

    private void btnSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalirActionPerformed
        
        Mensaje.manipulacionExcepciones("interrogante", "Deseas salir de la pantalla de ventas");
        if(Mensaje.valor==0){
            this.dispose();
        }
    }//GEN-LAST:event_btnSalirActionPerformed

    private void btnNuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNuevoActionPerformed
        
       this.dispose();
       wdwMovimientoVentaDeProductos Ventas = new wdwMovimientoVentaDeProductos();
       Ventas.setVisible(true);
       Inventory.pnlPrincipal.add(Ventas);
       Ventas.toFront();
    }//GEN-LAST:event_btnNuevoActionPerformed

    private void btnBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarActionPerformed
        
        wdwConsultaProductos BuscarProducto = new wdwConsultaProductos();
        Inventory.pnlPrincipal.add(BuscarProducto);
        BuscarProducto.setVisible(true);
        BuscarProducto.toFront();
        
        //HABILITAR BOTON Y ENVIAR VARIABLES PARA LA UBICACION DE LA COLUMNA
        //LA COLUMNA SIEMPRE ES FIJA PORQUE ALLI SE INGRESA EL CODIGO
        BuscarProducto.btnAgregar.setEnabled(true);
        BuscarProducto.fila_seleccionada = fila_seleccionada;
        BuscarProducto.columan_seleccionada = 1;
    }//GEN-LAST:event_btnBuscarActionPerformed

    private void btnImprimirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnImprimirActionPerformed

        try{
            AccesoInventario Acceso = new AccesoInventario(); 
            URL url_reporte = this.getClass().getResource("/inventory/reportes/rptEnvio.jasper");
            JasperReport reporte = (JasperReport) JRLoader.loadObject(url_reporte);
            //ENVIAR EL PARAMETRO AL REPORTES
            HashMap parametro = new HashMap();
            parametro.put("P_ID_FACTURA", Integer.parseInt(txtIdFactura.getText()));
            JasperPrint pantalla= JasperFillManager.fillReport(reporte, parametro, Acceso.conectar());
            JasperViewer visualizador = new JasperViewer(pantalla,false);
            visualizador.show();
        }catch(JRException error){
            Mensaje.manipulacionExcepciones("critico", "Ocurrio un error al ejecutar el reporte -> "+error);
        }
    }//GEN-LAST:event_btnImprimirActionPerformed

    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActionPerformed
        
        try{
            DefaultTableModel tabla = new DefaultTableModel();
            tabla.addColumn("No.");
            tabla.addColumn("Codigo");
            tabla.addColumn("Descripcion del Producto");
            tabla.addColumn("Cantidad");
            tabla.addColumn("P. Venta");
            tabla.addColumn("P. Minimo");
            tabla.addColumn("P. Normal");
            tabla.addColumn("Total");
            
            int cVenta = 0;
            
            //ELIMINAR LA FILA SELECCIONADA Y VOLVER A REALIZAR LA SUMA           
            DefaultTableModel modelo = (DefaultTableModel) tblDetalleFactura.getModel();
            Object nueva_fila[] = {null,null,null,null,null,null,null,null};
            modelo.addRow(nueva_fila);
            modelo.removeRow(fila_seleccionada);

            //REORDENAR LA NUMERACION DE LA FILAS
            for(int cFilas = 0; cFilas <= 50; cFilas++){
                if (tblDetalleFactura.getValueAt(cFilas, 0) != null){
                    tblDetalleFactura.setValueAt(cFilas + 1, cFilas, 0);
                }
            }

        }catch(Exception error){
            Mensaje.manipulacionExcepciones("critico", "Se ha eliminado una fila");
        }
        
        totalFactura();
    }//GEN-LAST:event_btnEliminarActionPerformed

    private void tblDetalleFacturaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblDetalleFacturaMouseClicked

        //CAPTURAR LA FILA SELECCIONADA PAR LA ELIMINACION
        fila_seleccionada = tblDetalleFactura.getSelectedRow();
        columna_seleccionada = tblDetalleFactura.getSelectedColumn();

    }//GEN-LAST:event_tblDetalleFacturaMouseClicked

    private void cbxEmpleadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxEmpleadoActionPerformed
        String seleccion = "";
        seleccion = cbxEmpleado.getSelectedItem().toString();
        
        int idEmpleado = 0;
            
        try{
            idEmpleado = NuevaFactura.retornaIDEmpleado(seleccion);
            txtIdEmpleado.setText(String.valueOf(idEmpleado));
            
        }catch(Exception error){
            Mensaje.manipulacionExcepciones("critico", "Error al obtener codigo del usuario seleccionado " + error);
        }
    }//GEN-LAST:event_cbxEmpleadoActionPerformed

    private void txtIdEmpleadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtIdEmpleadoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtIdEmpleadoActionPerformed

    private void cbxTipoVentaFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cbxTipoVentaFocusLost
        // Si el tipo de venta es credito o credito/contado muestro el combobox de dias de credito, sino no
        if(cbxTipoVenta.getSelectedItem().toString().equals("Contado")){
            // Deshabilito el combobox dias de credito
            cbxDiasCredito.setSelectedIndex(7);
            cbxDiasCredito.setEnabled(false);
            
            // Deshabilito el textbox de monto credito
            txtCredito.setEnabled(false);
        }else{
            cbxDiasCredito.setSelectedIndex(0);
            cbxDiasCredito.setEnabled(true);
            txtCredito.setEnabled(true);
        }
    }//GEN-LAST:event_cbxTipoVentaFocusLost

    private void txtContadoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtContadoFocusLost
        // Calculo la comision en base a lo pagado al contado
        if(txtContado.getText().equals("0") || txtContado.getText().equals("")){
            txtComision.setText("0");
            txtContado.setText("0");
        }else{
            System.out.println("Textbox contado " + txtContado.getText().toString());
            float venta_contado = Float.parseFloat(txtContado.getText());
            
            // Voy a consultar el porcentaje de comision del empleado por medio del ID este
            float comision = NuevaFactura.retornaComisionEmpleado(Integer.parseInt(txtIdEmpleado.getText()));
            
            // Al monto contado le descuento el iva
            venta_contado = venta_contado - Float.parseFloat(txtIva.getText());
            
            System.out.println("Venta contado - iva = " + venta_contado);
            
            // Calculo la comision sobre la venta al contado en base al porcentaje obtenido antes
            txtComision.setText(String.valueOf(Math.rint(venta_contado * comision)/100));
        }
    }//GEN-LAST:event_txtContadoFocusLost

    private void cbxTipoVentaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxTipoVentaActionPerformed
        // Si el tipo de venta es al contado
        if(cbxTipoVenta.getSelectedItem().toString().equals("Contado")){
            
            // Deshabilito el combobox dias de credito y el textbox de monto credito
            cbxDiasCredito.setSelectedIndex(7);
            cbxDiasCredito.setEnabled(false);
            txtCredito.setEnabled(false);
            txtRecibidoPor.setEnabled(false);
            
            // Habilito el textbox monto contado
            txtContado.setEnabled(true);
            
            // Coloco en 0 los textbox deshabilitados
            txtCredito.setText("0");
            
            // Limpio el valor de los textbox habilitados
            txtContado.setText("");
        }
        
        // Valido la categoria del cliente y el limite de credito del cliente
        String tipo_cliente = NuevaFactura.retornaCategoriaCliente(txtNitPersona.getText());
        
        // Si el tipo de venta es al credito
        if(cbxTipoVenta.getSelectedItem().toString().equals("Credito")){
            
            // Cuando la venta es al credito valido la categoria (tipo) del cliente
            if(tipo_cliente.equals("A") || tipo_cliente.equals("B")){
                // Deshabilito el textbox monto contado
                txtContado.setEnabled(false);

                // Habilito el combobox dias de credito, el textbox credito y textbox recibido por
                cbxDiasCredito.setSelectedIndex(0);
                cbxDiasCredito.setEnabled(true);
                txtCredito.setEnabled(true);
                txtRecibidoPor.setEnabled(true);

                // Coloco en 0 los textbox deshabilitados
                txtContado.setText("0");  

                // Limpio el valor de los textbox habilitados
                txtCredito.setText("");
            }else{
                Mensaje.manipulacionExcepciones("informacion", "Este cliente es categoria '" + tipo_cliente + "' No es permitido venderle. Contacte al administrador");
                
                System.out.println("Rol " +rolUsuario);
                if(!rolUsuario.equals("Administrador")){
                    btnGuardar.setEnabled(false);
                }
            }
            
        }
        
        // Si el tipo de venta es contado/credito
        if(cbxTipoVenta.getSelectedItem().toString().equals("Contado/Credito")){
            
            // Cuando la venta es al contado/credito valido la categoria (tipo) del cliente
             if(tipo_cliente.equals("A") || tipo_cliente.equals("B")){
                cbxDiasCredito.setSelectedIndex(0);
                cbxDiasCredito.setEnabled(true);
                txtCredito.setEnabled(true);
                txtContado.setEnabled(true);

                // Limpio el valor de los textbox habilitados
                txtCredito.setText("");
                txtContado.setText("");
            }else{
                Mensaje.manipulacionExcepciones("informacion", "Este cliente es categoria '" + tipo_cliente + "' No es permitido venderle. Contacte al administrador");
                
                System.out.println("Rol " +rolUsuario);
                if(!rolUsuario.equals("Administrador")){
                    btnGuardar.setEnabled(false);
                }
            }
        }  
    }//GEN-LAST:event_cbxTipoVentaActionPerformed

    private void btnFacturaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFacturaActionPerformed
        
        String archivo_jasper = "";
        String regimen_empresa = "";
      
        //El mensaje del regimen de la factura se toma del archivo de texto
        try {
            regimen_empresa = archivo.leer("[Regimen]");
        } catch (IOException ex) {
            regimen_empresa = "";
        }
        
        if (cbxTipoImpresion.getSelectedItem().equals("Comprobante")) {
            if (cbxTamanoImpresion.getSelectedItem().equals("Carta"))
                archivo_jasper = "rptComprobanteCarta";
            if(cbxTamanoImpresion.getSelectedItem().equals("1/2 Carta"))
                archivo_jasper = "rptComprobanteMediaCarta";
            if(cbxTamanoImpresion.getSelectedItem().equals("TMU 2.5"))
                archivo_jasper = "rptComprobanteTMU";
        }
        
        if (cbxTipoImpresion.getSelectedItem().equals("Factura Electronica")) {
            if (cbxTamanoImpresion.getSelectedItem().equals("Carta"))
                archivo_jasper = "rptFacturaCarta";
            if (cbxTamanoImpresion.getSelectedItem().equals("1/2 Carta"))
                archivo_jasper = "rptFacturaMediaCarta";
            if (cbxTamanoImpresion.getSelectedItem().equals("TMU 2.5"))
                archivo_jasper = "rptFacturaTMU";
        }
        
        if (cbxTipoImpresion.getSelectedItem().equals("Envio")) {
                archivo_jasper = "rptEnvio";
        }
        
        //ejecución del repote seleccionado
        try{
            
            AccesoInventario acceso_inventario = new AccesoInventario();
            AccesoSucursal acceso_sucursal = new AccesoSucursal();
            ObjetosSucursal objeto_sucursal = new ObjetosSucursal();
            
            URL url_reporte = this.getClass().getResource("/inventory/reportes/" + archivo_jasper + ".jasper");
            JasperReport reporte = (JasperReport) JRLoader.loadObject(url_reporte);
            HashMap parametro = new HashMap();
            
            //parametros generales del encabezado
            objeto_sucursal = acceso_sucursal.buscarSucursales(1, Inventory.lblUsuario.getText(), "");
            
            //parametros del reporte
            parametro.put("P_SERIE_FACTURA", "A");
            parametro.put("P_NUMERO_FACTURA", txtIdFactura.getText());
            parametro.put("P_ID_FACTURA", Integer.parseInt(txtIdFactura.getText()));
            parametro.put("P_DIRECCION_SUCURSAL", objeto_sucursal.getDireccion_sucursal());
            parametro.put("P_NIT", objeto_sucursal.getNit_sucursal().toString().toUpperCase());
            parametro.put("P_NOMBRE_EMPRESA", objeto_sucursal.getNombre_sucursal());
            parametro.put("P_SUCURSAL", objeto_sucursal.getDescripcion_sucursal());
            parametro.put("P_TELEFONO", objeto_sucursal.getTelefonos_sucursal());
            
            //parametros configuracion sistema
            parametro.put("P_REGIMEN_EMPRESA", regimen_empresa);
            
            //parametro para la impresión de vales
            parametro.put("P_RECIBIDO", txtRecibidoPor.getText());
            
            //parametros facturación FEL implementarlos solo si se desea
            //obtener facturacion electronica de la venta realizada
            parametro.put("P_SERIE_FEL", txtSerieFacturaFEL.getText());
            parametro.put("P_NUMERO_FEL", txtNumFacturaFEL.getText());
            parametro.put("P_AUTORIZACION_FEL", txtAutorizacionFEL.getText());
            
            JasperPrint pantalla = JasperFillManager.fillReport(reporte, parametro, acceso_inventario.conectar());
            JInternalFrame ventana = new JInternalFrame("Inventory 3.0");
            ventana.getContentPane().add(new JRViewer(pantalla));
            ventana.setPreferredSize(new Dimension(900, 500));
            ventana.setClosable(true);
            ventana.setMaximizable(true);
            ventana.setResizable(true);
            ventana.setVisible(true);
            ventana.pack();
            
            int ancho = java.awt.Toolkit.getDefaultToolkit().getScreenSize().width;
            int alto = java.awt.Toolkit.getDefaultToolkit().getScreenSize().height;
            int x  = (ancho  - ventana.getWidth() ) / 2;
            int y  = ( alto - ventana.getHeight() - 100 ) / 2;
            
            Inventory.pnlPrincipal.add(ventana);
            
            ventana.setLocation(x, y);
            ventana.setVisible(true);
            ventana.toFront();
            
        } catch (JRException error) {
            Mensaje.manipulacionExcepciones("critico", error.getMessage());
        }
        
    }//GEN-LAST:event_btnFacturaActionPerformed
   
    public void inprimirComprobante() {
        
        // Recibimos como parametro que tipo de factura se imprimira ya que
        // estas pueden ser personalizadas para el negocio por defecto se
        // utilizara la que lleva por nombre Factura.
        String tipo_factura = "Factura";
        
        try {
            tipo_factura = archivo.leer("[TipoFactura]");
        } catch(Exception error) {
            System.out.println("Se imprimio la factura normal");
        }
        
        try {
            AccesoInventario Acceso = new AccesoInventario();
            URL url_reporte = this.getClass().getResource("/inventory/reportes/rpt" + tipo_factura + ".jasper");
            JasperReport reporte = (JasperReport) JRLoader.loadObject(url_reporte);
            HashMap parametro = new HashMap();
            parametro.put("P_ID_FACTURA", Integer.parseInt(txtIdFactura.getText()));
            JasperPrint pantalla = JasperFillManager.fillReport(reporte, parametro, Acceso.conectar());
            JasperViewer visualizador = new JasperViewer(pantalla, false);
            visualizador.show();
        } catch (JRException error) {
            Mensaje.manipulacionExcepciones("critico", "Ocurrio un error al imprimir factura -> " + error);
        }
        
    }
    
    public void imprimirFacturaFEL () {
        Mensaje.manipulacionExcepciones("critico", "Imprimir Factura FEL");
    }
    
    
    private void btnTicketActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTicketActionPerformed
        
        //obtener el encabezado mediante el archivo de configuraciones
        String nombre = "";
        String direccion_uno = "";
        String direccion_dos = "";
        String telefono = "";
        
        try {
            nombre = archivo.leer("[name]");
            direccion_uno = archivo.leer("[adress]");
            direccion_dos = archivo.leer("[city]");
            telefono = archivo.leer("[phone]");
        } catch (IOException ex) {
            Logger.getLogger(wdwMovimientoVentaDeProductos.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        
        //Buscar el corelativo del recibo de pago
        int numero_correlativo = 0;
        AccesoFactura accesoFactura = new AccesoFactura();
        try {
            numero_correlativo = accesoFactura.retornaNumeroCorrelativo(txtIdFactura.getText());
        } catch(Exception exception) {
            System.out.println("Error al buscar el correlativo: " + exception.toString());
        }
        
        
        try {
            AccesoInventario Acceso = new AccesoInventario();
            URL url_reporte = this.getClass().getResource("/inventory/reportes/rptComprobante.jasper");
            JasperReport reporte = (JasperReport) JRLoader.loadObject(url_reporte);
            //ENVIAR EL PARAMETRO AL REPORTES
            HashMap parametro = new HashMap();
            parametro.put("P_ID_FACTURA", Integer.parseInt(txtIdFactura.getText()));
            parametro.put("P_EMPRESA", nombre);
            parametro.put("P_DIRECCION_UNO", direccion_uno);
            parametro.put("P_DIRECCION_DOS", direccion_dos);
            parametro.put("P_TELEFONO", telefono);
            parametro.put("P_CORRELATIVO", String.valueOf(numero_correlativo));
            JasperPrint pantalla = JasperFillManager.fillReport(reporte, parametro, Acceso.conectar());
            JasperViewer visualizador = new JasperViewer(pantalla, false);
            visualizador.show();
        } catch (JRException error) {
            Mensaje.manipulacionExcepciones("critico", "Ocurrio un error al imprimir factura -> " + error);
        }
        
    }//GEN-LAST:event_btnTicketActionPerformed

    private void btnGeneraFELActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGeneraFELActionPerformed
        
        if (!txtAutorizacionFEL.getText().equals("0")) {
            btnGeneraFEL.setEnabled(false);
            Mensaje.manipulacionExcepciones("critico", "Este documento ya tiene Factura Electronica");
        } else {
            ObjetosFacturaFel det = new ObjetosFacturaFel();
            AccesoFacturaFEL fel = new AccesoFacturaFEL();
            try {
                det = fel.buscarFacturaFEL(txtIdFactura.getText().trim(), "Ventas Activas", Inventory.lblUsuario.getText(), "");
                if (det.getNumero_factura_fel().equals("0")) {
                    generaFacturaElectronicaFEL();
                } else {
                    this.txtSerieFacturaFEL.setText(det.getSerie_factura_fel());
                    this.txtNumFacturaFEL.setText(det.getNumero_factura_fel());
                    this.txtAutorizacionFEL.setText(det.getAutorizacion_factura_fel());
                }
            } catch (Exception error) {
                Mensaje.manipulacionExcepciones("critico", "Ocurrio un error al buscar datos de FEL.");
            }
        }
        
    }//GEN-LAST:event_btnGeneraFELActionPerformed
    
    private void generaFacturaElectronicaFEL() {
        
        Resultado resultado = new Resultado();
        
        if (Integer.parseInt(txtIdFactura.getText()) > 0 && txtAutorizacionFEL.getText().equals("0")
                && txtSerieFacturaFEL.getText().equals("0") && txtNumFacturaFEL.getText().endsWith("0")) {
            
            System.out.println("Intentando generar Factura Electronica");
            
            int id = Integer.parseInt(txtIdFactura.getText());
            
            System.out.println("ID Venta: " + id);
            
            GenerarDocumentoFEL felConDecimales = new GenerarDocumentoFEL();
            //GenerarDocumentoSinDecimalesFEL felConDecimales = new GenerarDocumentoSinDecimalesFEL();

            System.out.println("Se utilizará el metodo con decimales");
            resultado = felConDecimales.generarFacturaElectronica("GFN", id, txtNombrePersona.getText(), "", "Venta de Productos", "FEL", Inventory.lblUsuario.getText(), "", cbxTipoDocumento.getSelectedItem().toString());

            String autorizacion_guatefactruas_fel = "";
            
            System.out.println("AUTORIZACION: |" + resultado.getAutorizacion() +"|");
            
            if (resultado.getAutorizacion().equals("0")) {
                
                System.out.println("GeneraDOcumento: " + resultado.getResultado());
                String respuesta_fel = resultado.getResultado().replaceAll("<Resultado>", "").replaceAll("</Resultado>", "").replaceAll("-", " ").replaceAll("&", "");
                Mensaje.manipulacionExcepciones("critico", respuesta_fel);
                
            } else {
                
                String nombre_cliente_sat = resultado.getNombre().replaceAll("'", "´").replaceAll(",", " ");
                
                if(txtNombrePersona.equals(nombre_cliente_sat)) {
                    System.out.println("El nombre del cliente es correcto según SAT.");
                } else {
                    System.out.println("Actualizando nombre del Cliente para esta factura");
                    AccesoCliente acceso_cliente = new AccesoCliente();
                    //acceso_cliente.actualizarDireccionCliente(txtIdCliente.getText(), resultado.getDireccion(), "Venta de Producto", "Generar FEL", Inventory.lblUsuario.getText(), Inventory.lblTerminal.getText());
                    acceso_cliente.actualizarNombreFactura(txtIdFactura.getText(), resultado.getNombre(), "Venta de Producto", "Generar FEL", Inventory.lblUsuario.getText(), "");
                }
                
                System.out.println("ALmacenando informacion en Base de Datos FEL");
                
                autorizacion_guatefactruas_fel = resultado.getAutorizacion();

                //almacenar datos de FEL en la base de datos
                AccesoFacturaFEL FEL = new AccesoFacturaFEL();
                ObjetosFacturaFel FAC = new ObjetosFacturaFel();
                FAC.setId_factura(Integer.parseInt(txtIdFactura.getText()));
                FAC.setSerie_factura_fel(resultado.getSerie());
                FAC.setNumero_factura_fel(resultado.getPreimpreso());
                FAC.setAutorizacion_factura_fel(resultado.getAutorizacion());
                FAC.setTipo_documento_factura_fel(cbxTipoDocumento.getSelectedItem().toString());
                
                String resultado_actualizacion_fel = FEL.actualizarDatosFEL(FAC, "Venta de Productos", "Generar FEL", Inventory.lblUsuario.getText(), "");

                System.out.println("Resultado: " + resultado_actualizacion_fel);
                
                if (resultado_actualizacion_fel.equals(" Registros Actualizados: 1")) {
                    btnGeneraFEL.setEnabled(false);
                    txtAutorizacionFEL.setText(resultado.getAutorizacion());
                    txtSerieFacturaFEL.setText(resultado.getSerie());
                    txtNumFacturaFEL.setText(resultado.getPreimpreso());
                    cbxTipoImpresion.setSelectedItem("Factura Electronica");
                    Mensaje.manipulacionExcepciones("informacion", "Numero de autorización:\n" + autorizacion_guatefactruas_fel);
                } else {
                    Mensaje.manipulacionExcepciones("informacion", "No se pudeo actualizar los valores de FEL en la Base de Datos");
                }
                
            }
        
        } else {
            
            Mensaje.manipulacionExcepciones("informacion", "No se puede generar Facutara a esta Venta");
        
        }
        
    }
        
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBuscar;
    private javax.swing.JButton btnEliminar;
    private javax.swing.JButton btnFactura;
    private javax.swing.JButton btnGeneraFEL;
    private javax.swing.JButton btnGuardar;
    private javax.swing.JButton btnImprimir;
    private javax.swing.JButton btnNuevo;
    private javax.swing.JButton btnSalir;
    private javax.swing.JButton btnTicket;
    private javax.swing.JComboBox cbxDiasCredito;
    private javax.swing.JComboBox cbxEmpleado;
    private javax.swing.JComboBox cbxEstadoVenta;
    private javax.swing.JComboBox<String> cbxTamanoImpresion;
    private javax.swing.JComboBox<String> cbxTipoDocumento;
    private javax.swing.JComboBox<String> cbxTipoImpresion;
    private javax.swing.JComboBox cbxTipoVenta;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblContado;
    private javax.swing.JLabel lblCredito;
    private javax.swing.JLabel lblDiasCredito;
    private javax.swing.JLabel lblDirCliente;
    private javax.swing.JLabel lblDirEnvioFactura;
    private javax.swing.JLabel lblEmpleado;
    private javax.swing.JLabel lblEstado;
    private javax.swing.JLabel lblFecha;
    private javax.swing.JLabel lblFolioFactura;
    private javax.swing.JLabel lblIdFactura;
    private javax.swing.JLabel lblNitPersona;
    private javax.swing.JLabel lblNombrePersona;
    private javax.swing.JLabel lblNumFactura;
    private javax.swing.JLabel lblSerieFactura;
    private javax.swing.JLabel lblTelCliente;
    private javax.swing.JLabel lblTipoVenta;
    private javax.swing.JLabel lblTotalFactura;
    private javax.swing.JPanel pnlBotones;
    private javax.swing.JPanel pnlDetalle;
    private javax.swing.JPanel pnlEncabezado;
    public static javax.swing.JTable tblDetalleFactura;
    private javax.swing.JTextField txtAutorizacionFEL;
    public static javax.swing.JTextField txtComision;
    private javax.swing.JTextField txtContado;
    private javax.swing.JTextField txtCredito;
    private javax.swing.JTextField txtDirCliente;
    private javax.swing.JTextField txtDirEnvioFactura;
    private javax.swing.JTextField txtFechaEmisionFactura;
    private javax.swing.JTextField txtFolioFactura;
    private javax.swing.JTextField txtIdEmpleado;
    private javax.swing.JTextField txtIdFactura;
    public static javax.swing.JTextField txtIva;
    private javax.swing.JTextField txtNitPersona;
    private javax.swing.JTextField txtNombrePersona;
    private javax.swing.JTextField txtNumFactura;
    private javax.swing.JTextField txtNumFacturaFEL;
    public static javax.swing.JTextField txtRecibidoPor;
    private javax.swing.JTextField txtSerieFactura;
    private javax.swing.JTextField txtSerieFacturaFEL;
    private javax.swing.JTextField txtTelCliente;
    public static javax.swing.JTextField txtTotalFactura;
    // End of variables declaration//GEN-END:variables
}

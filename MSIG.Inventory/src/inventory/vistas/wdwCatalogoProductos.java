/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package inventory.vistas;

import com.itextpdf.awt.geom.Dimension;
import inventory.acceso.*;
import inventory.objetos.ObjetosPersona;
import inventory.objetos.ObjetosProducto;
import inventory.objetos.ObjetosProveedor;
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.File;
import java.util.ArrayList;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Megabyte Soluciones Integrales Guatemala
 */
public class wdwCatalogoProductos extends javax.swing.JInternalFrame {

    //VARIABLES GLOBALES
    AccesoExcepciones Mensaje = new AccesoExcepciones();
    ObjetosProducto Producto = new ObjetosProducto();
    AccesoProducto NuevoProducto = new AccesoProducto();
    
    //VARIABLES PUBLICAR PARA ENVIAR EL ID DEL PRODUCTO
    //SELECCIONADO A LA PATALLA DE VENTAS
    public int fila_seleccionada = 0;
    public int columan_seleccionada = 0;
    
    
    /**
     * Creates new form wdwCatalogoProductos
     */
    public wdwCatalogoProductos() {
        initComponents();
        mostrarRegistrosGuardados();
        ocultarCampos();
    }
    
    private void ocultarCampos(){
        
        String rol = Inventory.lblRol.getText();
        
        if( rol.equals("Administrador") || rol.equals("DBA")) {
           
        } else {
            /*txtPrecioCompraProducto.setEditable(false);
            txtPrjEstProducto.setEditable(false);
            txtPrjMinProducto.setEditable(false);
            txtPrecioVentaProducto.setEditable(false);
            txtPrecioMinProducto.setEditable(false);*/
            btnModificar.setEnabled(false);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlEncabezado = new javax.swing.JPanel();
        lblIdProducto = new javax.swing.JLabel();
        txtIdProducto = new javax.swing.JTextField();
        lblMarcaProducto = new javax.swing.JLabel();
        lblDescProducto = new javax.swing.JLabel();
        txtDescProducto = new javax.swing.JTextField();
        lblPrecioCompraProducto = new javax.swing.JLabel();
        txtPrecioCompraProducto = new javax.swing.JTextField();
        lblPrecioEstProducto = new javax.swing.JLabel();
        txtPrecioVentaProducto = new javax.swing.JTextField();
        lblIdProveedor = new javax.swing.JLabel();
        lblExiProducto = new javax.swing.JLabel();
        txtExiProducto = new javax.swing.JTextField();
        lblUnidadMedidaProducto = new javax.swing.JLabel();
        txtUnidadMedidaProducto = new javax.swing.JTextField();
        lblMinimoProducto = new javax.swing.JLabel();
        txtMinimoProducto = new javax.swing.JTextField();
        lblMaximoProducto = new javax.swing.JLabel();
        txtMaximoProducto = new javax.swing.JTextField();
        txtNomProvedor = new javax.swing.JTextField();
        txtIdProveedor = new javax.swing.JTextField();
        txtPrjEstProducto = new javax.swing.JTextField();
        txtPrjMinProducto = new javax.swing.JTextField();
        txtPrecioMinProducto = new javax.swing.JTextField();
        lblPrecio_min_producto = new javax.swing.JLabel();
        txtMarcaProducto = new javax.swing.JTextField();
        lblLinea = new javax.swing.JLabel();
        txtLinea = new javax.swing.JTextField();
        btnMostarImagen = new javax.swing.JButton();
        btnCargar = new javax.swing.JButton();
        lblImagen = new javax.swing.JLabel();
        btnBuscarImagen = new javax.swing.JButton();
        txtUrlImagen = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        pnlBotones = new javax.swing.JPanel();
        lblBuscar = new javax.swing.JLabel();
        btnSalir = new javax.swing.JButton();
        btnLimpiar = new javax.swing.JButton();
        btnModificar = new javax.swing.JButton();
        btnGuardar = new javax.swing.JButton();
        btnBuscar = new javax.swing.JButton();
        txtBuscar = new javax.swing.JTextField();
        btnAgregar = new javax.swing.JButton();
        pnlDetalle = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblProducto = new javax.swing.JTable();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Productos");
        setFrameIcon(new javax.swing.ImageIcon(getClass().getResource("/inventory/imagenes/productos.png"))); // NOI18N
        setMaximumSize(new java.awt.Dimension(700, 600));
        setMinimumSize(new java.awt.Dimension(700, 600));
        setPreferredSize(new java.awt.Dimension(700, 600));

        pnlEncabezado.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        lblIdProducto.setText("ID Producto");

        txtIdProducto.setToolTipText("Ingrese el codigo del producto");
        txtIdProducto.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtIdProductoFocusLost(evt);
            }
        });

        lblMarcaProducto.setText("Marca / Distribuicion");

        lblDescProducto.setText("Descripcion");
        lblDescProducto.setToolTipText("");

        txtDescProducto.setToolTipText("Ingrese la descripcion del producto");

        lblPrecioCompraProducto.setText("Precio Compra");

        txtPrecioCompraProducto.setToolTipText("Ingrese el precio de compra, no puede ingresar letras");

        lblPrecioEstProducto.setText("Precio Estandar");

        lblIdProveedor.setText("ID del Proveedor");
        lblIdProveedor.setToolTipText("");

        lblExiProducto.setText("Existencias");

        txtExiProducto.setToolTipText("Existencias actuales de este producto");

        lblUnidadMedidaProducto.setText("Medida");

        txtUnidadMedidaProducto.setToolTipText("Ingrese la unidad de medida del producto un maximo de 50 caracteres");

        lblMinimoProducto.setText("Minimo");

        txtMinimoProducto.setToolTipText("Ingrese la cantidad minima dle producto que puede tener en exixtencia");

        lblMaximoProducto.setText("Maximo");

        txtMaximoProducto.setToolTipText("Ingrese el maximo de producto que puede tener en existencia");

        txtIdProveedor.setMaximumSize(new java.awt.Dimension(6, 20));
        txtIdProveedor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtIdProveedorActionPerformed(evt);
            }
        });
        txtIdProveedor.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtIdProveedorFocusLost(evt);
            }
        });

        txtPrjEstProducto.setToolTipText("Ingrese el porcentaje de ganancia Estandar o Normal");
        txtPrjEstProducto.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtPrjEstProductoFocusLost(evt);
            }
        });

        txtPrjMinProducto.setToolTipText("Ingrese el porcentaje de ganancia minimo");
        txtPrjMinProducto.setMaximumSize(new java.awt.Dimension(6, 20));
        txtPrjMinProducto.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtPrjMinProductoFocusLost(evt);
            }
        });

        txtPrecioMinProducto.setToolTipText("Ingrese el precio minimo de este producto");

        lblPrecio_min_producto.setText("Precio Minimo");

        txtMarcaProducto.setToolTipText("Ingrese la marca del Producto");

        lblLinea.setText("Linea/Familia");

        btnMostarImagen.setIcon(new javax.swing.ImageIcon(getClass().getResource("/inventory/imagenes/show_image.png"))); // NOI18N
        btnMostarImagen.setText("Mostrar");
        btnMostarImagen.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        btnMostarImagen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMostarImagenActionPerformed(evt);
            }
        });

        btnCargar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/inventory/imagenes/imagen_up.png"))); // NOI18N
        btnCargar.setText("Cargar");
        btnCargar.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        btnCargar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCargarActionPerformed(evt);
            }
        });

        lblImagen.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblImagen.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        btnBuscarImagen.setIcon(new javax.swing.ImageIcon(getClass().getResource("/inventory/imagenes/image_find.png"))); // NOI18N
        btnBuscarImagen.setText("Buscar");
        btnBuscarImagen.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        btnBuscarImagen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarImagenActionPerformed(evt);
            }
        });

        txtUrlImagen.setBackground(new java.awt.Color(102, 102, 102));
        txtUrlImagen.setEditable(false);
        txtUrlImagen.setForeground(new java.awt.Color(255, 255, 255));

        jLabel1.setText("Formato: JPEG");

        jLabel2.setText("Tamaño: 1 MB Maximo");

        javax.swing.GroupLayout pnlEncabezadoLayout = new javax.swing.GroupLayout(pnlEncabezado);
        pnlEncabezado.setLayout(pnlEncabezadoLayout);
        pnlEncabezadoLayout.setHorizontalGroup(
            pnlEncabezadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlEncabezadoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlEncabezadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblPrecioCompraProducto)
                    .addComponent(lblIdProducto)
                    .addComponent(lblPrecioEstProducto)
                    .addComponent(lblExiProducto)
                    .addComponent(lblMinimoProducto)
                    .addComponent(lblMaximoProducto)
                    .addComponent(lblLinea))
                .addGap(14, 14, 14)
                .addGroup(pnlEncabezadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlEncabezadoLayout.createSequentialGroup()
                        .addGroup(pnlEncabezadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtLinea, javax.swing.GroupLayout.DEFAULT_SIZE, 132, Short.MAX_VALUE)
                            .addComponent(txtIdProducto))
                        .addGap(21, 21, 21)
                        .addGroup(pnlEncabezadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(lblDescProducto, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblMarcaProducto, javax.swing.GroupLayout.DEFAULT_SIZE, 114, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(pnlEncabezadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtDescProducto)
                            .addComponent(txtMarcaProducto)))
                    .addGroup(pnlEncabezadoLayout.createSequentialGroup()
                        .addGroup(pnlEncabezadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnlEncabezadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(txtPrecioCompraProducto, javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlEncabezadoLayout.createSequentialGroup()
                                    .addComponent(txtPrjEstProducto, javax.swing.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(txtPrecioVentaProducto, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(txtMinimoProducto, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtExiProducto, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(pnlEncabezadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnlEncabezadoLayout.createSequentialGroup()
                                .addGroup(pnlEncabezadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(pnlEncabezadoLayout.createSequentialGroup()
                                        .addComponent(lblPrecio_min_producto, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGap(18, 18, 18))
                                    .addGroup(pnlEncabezadoLayout.createSequentialGroup()
                                        .addComponent(lblIdProveedor, javax.swing.GroupLayout.DEFAULT_SIZE, 114, Short.MAX_VALUE)
                                        .addGap(18, 18, 18)))
                                .addGroup(pnlEncabezadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(txtPrjMinProducto, javax.swing.GroupLayout.DEFAULT_SIZE, 31, Short.MAX_VALUE)
                                    .addComponent(txtIdProveedor, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(pnlEncabezadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(pnlEncabezadoLayout.createSequentialGroup()
                                        .addComponent(txtPrecioMinProducto, javax.swing.GroupLayout.DEFAULT_SIZE, 103, Short.MAX_VALUE)
                                        .addGap(18, 18, 18)
                                        .addComponent(lblUnidadMedidaProducto)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(txtUnidadMedidaProducto, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(txtNomProvedor)))
                            .addGroup(pnlEncabezadoLayout.createSequentialGroup()
                                .addComponent(lblImagen, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addGroup(pnlEncabezadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(pnlEncabezadoLayout.createSequentialGroup()
                                        .addComponent(btnBuscarImagen, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(txtUrlImagen))
                                    .addGroup(pnlEncabezadoLayout.createSequentialGroup()
                                        .addComponent(btnMostarImagen, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addGroup(pnlEncabezadoLayout.createSequentialGroup()
                                        .addComponent(btnCargar, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))))
                    .addGroup(pnlEncabezadoLayout.createSequentialGroup()
                        .addComponent(txtMaximoProducto, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        pnlEncabezadoLayout.setVerticalGroup(
            pnlEncabezadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlEncabezadoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlEncabezadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblIdProducto)
                    .addComponent(txtIdProducto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblMarcaProducto)
                    .addComponent(txtMarcaProducto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlEncabezadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtDescProducto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblDescProducto)
                    .addComponent(lblLinea)
                    .addComponent(txtLinea, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlEncabezadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtPrecioCompraProducto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtPrjMinProducto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtPrecioMinProducto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblPrecio_min_producto)
                    .addComponent(lblPrecioCompraProducto)
                    .addComponent(lblUnidadMedidaProducto)
                    .addComponent(txtUnidadMedidaProducto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlEncabezadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtPrecioVentaProducto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblPrecioEstProducto)
                    .addComponent(txtNomProvedor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtIdProveedor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtPrjEstProducto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblIdProveedor))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlEncabezadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlEncabezadoLayout.createSequentialGroup()
                        .addGroup(pnlEncabezadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblExiProducto)
                            .addGroup(pnlEncabezadoLayout.createSequentialGroup()
                                .addGroup(pnlEncabezadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtExiProducto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(pnlEncabezadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(btnBuscarImagen)
                                        .addComponent(txtUrlImagen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(pnlEncabezadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(txtMinimoProducto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(btnCargar)
                                    .addComponent(jLabel1)
                                    .addComponent(lblMinimoProducto))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlEncabezadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnlEncabezadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(lblMaximoProducto)
                                .addComponent(txtMaximoProducto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(pnlEncabezadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(btnMostarImagen)
                                .addComponent(jLabel2)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(lblImagen, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        pnlBotones.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        lblBuscar.setText("Buscar");

        btnSalir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/inventory/imagenes/salir.png"))); // NOI18N
        btnSalir.setText("Salir");
        btnSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalirActionPerformed(evt);
            }
        });

        btnLimpiar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/inventory/imagenes/limpiar.png"))); // NOI18N
        btnLimpiar.setText("Limpiar");
        btnLimpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimpiarActionPerformed(evt);
            }
        });

        btnModificar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/inventory/imagenes/editar.png"))); // NOI18N
        btnModificar.setText("Modificar");
        btnModificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnModificarActionPerformed(evt);
            }
        });

        btnGuardar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/inventory/imagenes/guardar.png"))); // NOI18N
        btnGuardar.setText("Guardar");
        btnGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarActionPerformed(evt);
            }
        });

        btnBuscar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/inventory/imagenes/buscar.png"))); // NOI18N
        btnBuscar.setActionCommand("buscar");
        btnBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarActionPerformed(evt);
            }
        });

        txtBuscar.setToolTipText("Ingrese el nombre del producto que desea buscar");

        btnAgregar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/inventory/imagenes/agregar.png"))); // NOI18N
        btnAgregar.setActionCommand("btnAgregar");
        btnAgregar.setEnabled(false);
        btnAgregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgregarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlBotonesLayout = new javax.swing.GroupLayout(pnlBotones);
        pnlBotones.setLayout(pnlBotonesLayout);
        pnlBotonesLayout.setHorizontalGroup(
            pnlBotonesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlBotonesLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblBuscar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtBuscar, javax.swing.GroupLayout.DEFAULT_SIZE, 114, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnBuscar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnAgregar)
                .addGap(18, 18, 18)
                .addComponent(btnGuardar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnModificar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnLimpiar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnSalir)
                .addContainerGap())
        );
        pnlBotonesLayout.setVerticalGroup(
            pnlBotonesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlBotonesLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlBotonesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnBuscar)
                    .addComponent(btnAgregar, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(pnlBotonesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lblBuscar)
                        .addComponent(btnSalir)
                        .addComponent(btnLimpiar)
                        .addComponent(btnModificar)
                        .addComponent(btnGuardar)
                        .addComponent(txtBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pnlDetalle.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        tblProducto.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        tblProducto.getTableHeader().setReorderingAllowed(false);
        tblProducto.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblProductoMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblProducto);

        javax.swing.GroupLayout pnlDetalleLayout = new javax.swing.GroupLayout(pnlDetalle);
        pnlDetalle.setLayout(pnlDetalleLayout);
        pnlDetalleLayout.setHorizontalGroup(
            pnlDetalleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlDetalleLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
        );
        pnlDetalleLayout.setVerticalGroup(
            pnlDetalleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlDetalleLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 238, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(pnlDetalle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pnlEncabezado, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pnlBotones, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pnlEncabezado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(pnlBotones, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(pnlDetalle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarActionPerformed

        ArrayList<ObjetosProducto> buscarProducto = NuevoProducto.buscarProducto(txtIdProducto.getText());
                
        System.out.println("Cantidad de datos " + buscarProducto.size());
                
        if(buscarProducto.size()>=1){
            Mensaje.manipulacionExcepciones("critico", "Existen dos productos con el ID "+buscarProducto.get(0).getId_producto());
        } else {
            try{
                Producto.setId_producto(txtIdProducto.getText());
                Producto.setMarca_producto(txtMarcaProducto.getText());
                Producto.setDesc_producto(txtDescProducto.getText());
                Producto.setLinea_producto(txtLinea.getText());
                Producto.setPrecio_compra_producto(Float.parseFloat(txtPrecioCompraProducto.getText()));
                Producto.setPrecio_est_producto(Float.parseFloat(txtPrecioVentaProducto.getText()));
                Producto.setId_provedor(Integer.parseInt(txtIdProveedor.getText()));
                Producto.setExi_producto(Float.parseFloat(txtExiProducto.getText()));
                Producto.setUnidad_medida_producto(txtUnidadMedidaProducto.getText());  
                Producto.setMinimo_producto(Float.parseFloat(txtMinimoProducto.getText()));
                Producto.setMaximo_producto(Float.parseFloat(txtMaximoProducto.getText()));
                Producto.setPrj_est_producto(Float.parseFloat(txtPrjEstProducto.getText()));
                Producto.setPrj_min_producto(Float.parseFloat(txtPrjMinProducto.getText()));
                Producto.setPrecio_min_producto(Float.parseFloat(txtPrecioMinProducto.getText()));
                
                try{
                    Mensaje.manipulacionExcepciones("informacion", NuevoProducto.insertarProducto(Producto));
                    limpiarCampos();
                } catch(Exception error){
                    Mensaje.manipulacionExcepciones("critico", "Ocurrio un error al insertar el Producto -> "+error);
                }
                
            }catch(Exception error){
                Mensaje.manipulacionExcepciones("critico", "Ocurrio un error al enviar la informacion -> "+error);
            }
        }
        
        mostrarRegistrosGuardados();
        limpiarCampos();
    }//GEN-LAST:event_btnGuardarActionPerformed

    private void btnBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarActionPerformed

        buscarEnRegistrosGuardados();
    }//GEN-LAST:event_btnBuscarActionPerformed

    private void btnModificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnModificarActionPerformed
        // ACTUALIZO LOS DATOS DEL PRODUCTO
        Producto.setId_producto(txtIdProducto.getText());
        Producto.setMarca_producto(txtMarcaProducto.getText());
        Producto.setDesc_producto(txtDescProducto.getText());
        Producto.setLinea_producto(txtLinea.getText());
        Producto.setId_provedor(Integer.parseInt(txtIdProveedor.getText()));
        Producto.setPrecio_compra_producto(Float.parseFloat(txtPrecioCompraProducto.getText()));
        Producto.setPrecio_est_producto(Float.parseFloat(txtPrecioVentaProducto.getText()));
        Producto.setExi_producto(Float.parseFloat(txtExiProducto.getText()));
        Producto.setUnidad_medida_producto(txtUnidadMedidaProducto.getText());
        Producto.setMinimo_producto(Float.parseFloat(txtMinimoProducto.getText()));
        Producto.setMaximo_producto(Float.parseFloat(txtMaximoProducto.getText()));
        Producto.setPrj_est_producto(Float.parseFloat(txtPrjEstProducto.getText()));
        Producto.setPrj_min_producto(Float.parseFloat(txtPrjMinProducto.getText()));
        System.out.println("EN EL PRECIO MINIMO VIENE: "+txtPrecioMinProducto.getText());
        Producto.setPrecio_min_producto(Float.parseFloat(txtPrecioMinProducto.getText()));
        
        try{
            Mensaje.manipulacionExcepciones("informacion", NuevoProducto.actualizarProducto(Producto));
            mostrarRegistrosGuardados();
            limpiarCampos();
        }catch(Exception error){
            Mensaje.manipulacionExcepciones("critico", "Ocurrio un error al actualizar Producto -> "+error);
        }
       
    }//GEN-LAST:event_btnModificarActionPerformed

    private void btnSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalirActionPerformed

        Mensaje.manipulacionExcepciones("interrogante", "¿Esta seguro que desea salir?");
        if(Mensaje.valor == 0){
            dispose();
        }
    }//GEN-LAST:event_btnSalirActionPerformed

    private void btnLimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimpiarActionPerformed
        
        limpiarCampos();
    }//GEN-LAST:event_btnLimpiarActionPerformed

    private void tblProductoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblProductoMouseClicked

        btnGuardar.setEnabled(false);
        
        if (String.valueOf(tblProducto.getSelectedColumn()).equals("0")) {
            
            int fila_seleccionada = tblProducto.getSelectedRow();
            int columna_seleccionada = tblProducto.getSelectedColumn();

            txtIdProducto.setText(String.valueOf(tblProducto.getValueAt(fila_seleccionada, columna_seleccionada)));
            txtMarcaProducto.setText(String.valueOf(tblProducto.getValueAt(fila_seleccionada, columna_seleccionada + 1)));
            txtLinea.setText(String.valueOf(tblProducto.getValueAt(fila_seleccionada, columna_seleccionada +3)));
            txtDescProducto.setText(String.valueOf(tblProducto.getValueAt(fila_seleccionada, columna_seleccionada + 2)));
            txtPrecioCompraProducto.setText(String.valueOf(tblProducto.getValueAt(fila_seleccionada, columna_seleccionada + 4)));
            txtPrjEstProducto.setText(String.valueOf(tblProducto.getValueAt(fila_seleccionada, columna_seleccionada + 5)));
            txtPrecioVentaProducto.setText(String.valueOf(tblProducto.getValueAt(fila_seleccionada, columna_seleccionada + 6)));
            txtPrjMinProducto.setText(String.valueOf(tblProducto.getValueAt(fila_seleccionada, columna_seleccionada + 7)));
            txtPrecioMinProducto.setText(String.valueOf(tblProducto.getValueAt(fila_seleccionada, columna_seleccionada + 8)));
            txtNomProvedor.setText(String.valueOf(tblProducto.getValueAt(fila_seleccionada, columna_seleccionada + 9)));
            txtExiProducto.setText(String.valueOf(tblProducto.getValueAt(fila_seleccionada, columna_seleccionada + 10)));
            txtUnidadMedidaProducto.setText(String.valueOf(tblProducto.getValueAt(fila_seleccionada, columna_seleccionada + 11)));
            txtMinimoProducto.setText(String.valueOf(tblProducto.getValueAt(fila_seleccionada, columna_seleccionada + 12).toString()));
            txtMaximoProducto.setText(String.valueOf(tblProducto.getValueAt(fila_seleccionada, columna_seleccionada + 13)));
            
            AccesoProducto Proveedor = new AccesoProducto();
            String cIdProveedor = Proveedor.buscarIdProveedor(txtNomProvedor.getText()).toString();
            txtIdProveedor.setText(cIdProveedor);
        }
        
        //mostrar la primera imagen guardada
        try {
            AccesoImagen acceso_imagen = new AccesoImagen();
            String producto = txtIdProducto.getText();
            int id = acceso_imagen.listarPrimeraImagen(producto);
            Image imagen = acceso_imagen.buscar(id, producto);
            java.awt.Dimension tamanio = lblImagen.getSize();
            Icon icono = new ImageIcon(imagen.getScaledInstance(tamanio.width - 4, tamanio.height - 4, BufferedImage.TYPE_INT_ARGB));
            lblImagen.setIcon(icono);
        } catch (Exception error) {
            System.out.println(error.toString());
        }
            
    }//GEN-LAST:event_tblProductoMouseClicked

    private void btnBuscarImagenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarImagenActionPerformed
        JFileChooser seleccion = new JFileChooser(".");
        int estado = seleccion.showOpenDialog(null);
        if (estado == JFileChooser.APPROVE_OPTION) {
            File archivo = seleccion.getSelectedFile();
            String direccion = archivo.getParent() + "\\" + archivo.getName();
            txtUrlImagen.setText(direccion);
            ImageIcon image = new ImageIcon(direccion);
            java.awt.Dimension tamanio = lblImagen.getSize();
            ImageIcon imagenEcalada = new ImageIcon(image.getImage().getScaledInstance(tamanio.width - 4, tamanio.height - 4, BufferedImage.TYPE_INT_ARGB));
            lblImagen.setIcon(imagenEcalada);
        }
    }//GEN-LAST:event_btnBuscarImagenActionPerformed

    private void btnCargarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCargarActionPerformed
        AccesoImagen acceso_imagen = new AccesoImagen();
        Mensaje.manipulacionExcepciones("critico", acceso_imagen.guardar(txtIdProducto.getText(), txtUrlImagen.getText()));
    }//GEN-LAST:event_btnCargarActionPerformed

    private void btnMostarImagenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMostarImagenActionPerformed
        wdwMostrarImagenes pantalla = new wdwMostrarImagenes();
        int ancho = java.awt.Toolkit.getDefaultToolkit().getScreenSize().width;
        int alto = java.awt.Toolkit.getDefaultToolkit().getScreenSize().height;
        int x  = (ancho / 2) - (pantalla.getWidth() / 2);
        int y  = (alto / 2) -  (pantalla.getHeight() / 2);
        pantalla.setLocation(x, y);
        pantalla .setVisible(true);
        Inventory.pnlPrincipal.add(pantalla);
        pantalla .toFront();
        
        //cargar los id's de las imagenes asociadas al producto seleccionado
        ArrayList<String> lista = new ArrayList();
        AccesoImagen acceso = new AccesoImagen();
        String id = txtIdProducto.getText();
        String pro = txtDescProducto.getText();
        wdwMostrarImagenes.txtIdProducto.setText(id);
        wdwMostrarImagenes.txtDescripcionProducto.setText(pro);
        lista = acceso.listarImagenes(id);
        for(String c : lista){
            wdwMostrarImagenes.cbxIdProducto.addItem(c);
        }
        
    }//GEN-LAST:event_btnMostarImagenActionPerformed

    private void txtPrjMinProductoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtPrjMinProductoFocusLost

        float vPrecio_min_producto = 0;
        vPrecio_min_producto = ((Float.parseFloat(txtPrjMinProducto.getText()) / 100 ) + 1 ) * Float.parseFloat(txtPrecioCompraProducto.getText());
        vPrecio_min_producto = (float) Math.rint(vPrecio_min_producto * 100) / 100;
        txtPrecioMinProducto.setText(String.valueOf(vPrecio_min_producto));
    }//GEN-LAST:event_txtPrjMinProductoFocusLost

    private void txtPrjEstProductoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtPrjEstProductoFocusLost
        float vPrecio_est_producto = 0;
        vPrecio_est_producto = ((Float.parseFloat(txtPrjEstProducto.getText()) / 100 ) + 1 ) * Float.parseFloat(txtPrecioCompraProducto.getText());
        vPrecio_est_producto = (float) Math.rint(vPrecio_est_producto * 100) / 100;
        txtPrecioVentaProducto.setText(String.valueOf(vPrecio_est_producto));
    }//GEN-LAST:event_txtPrjEstProductoFocusLost

    private void txtIdProveedorFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtIdProveedorFocusLost

        if(txtIdProveedor.getText().isEmpty()){
            txtIdProveedor.requestFocus();
            Mensaje.manipulacionExcepciones("critico", "Ingrese el numero de ID del proveedor para el producto");
        }else{
            AccesoProducto Proveedor = new AccesoProducto();
            String cNomProveedor = Proveedor.buscarProveedor(Integer.parseInt(txtIdProveedor.getText()));
            txtNomProvedor.setText(cNomProveedor);
        }
    }//GEN-LAST:event_txtIdProveedorFocusLost

    private void txtIdProveedorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtIdProveedorActionPerformed
        if(txtIdProveedor.getText().isEmpty()){
            txtIdProveedor.requestFocus();
            Mensaje.manipulacionExcepciones("critico", "Ingrese el numero de ID del proveedor para el producto");
        }else{
            AccesoProducto Proveedor = new AccesoProducto();
            String cNomProveedor = Proveedor.buscarProveedor(Integer.parseInt(txtIdProveedor.getText()));
            txtNomProvedor.setText(cNomProveedor);
        }
    }//GEN-LAST:event_txtIdProveedorActionPerformed

    private void txtIdProductoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtIdProductoFocusLost

        if(!"".equals(txtIdProducto.getText())){
            System.out.println("ID PRODUCTO " + txtIdProducto.getText());
            ArrayList<ObjetosProducto> buscarProducto = NuevoProducto.buscarProducto(txtIdProducto.getText());

            if(buscarProducto.size()>0){
                Mensaje.manipulacionExcepciones("advertencia", "Ya existe un producto con este ID");
                txtIdProducto.requestFocus();
            }
        }
    }//GEN-LAST:event_txtIdProductoFocusLost

    private void btnAgregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgregarActionPerformed
        wdwMovimientoCompraDeProductos.tblDetalleCompra.setValueAt(txtIdProducto.getText(), wdwMovimientoCompraDeProductos.tblDetalleCompra.getSelectedRow() , 1);
        this.dispose();
    }//GEN-LAST:event_btnAgregarActionPerformed

    private void mostrarRegistrosGuardados(){
        

        DefaultTableModel tabla = new DefaultTableModel();
        AccesoProducto Producto = new AccesoProducto();
        AccesoProveedor Proveedor = new AccesoProveedor();
        AccesoPersona Persona = new AccesoPersona();
        
        ArrayList<ObjetosProducto> listaProductos = new ArrayList();
        ArrayList<ObjetosProveedor> listaProveedores = new ArrayList();
        ArrayList<ObjetosPersona> listaPersonas = new ArrayList();
        
        try{
            listaProductos = Producto.seleccionarProducto();
            listaProveedores = Proveedor.seleccionarProveedor();
            listaPersonas = Persona.seleccionarPersona();
            
            System.out.println("SE CONSULTARON LOS DATOS DE PRODUCTO O DE PROVEEDOR");
        }catch(Error error){
            Mensaje.manipulacionExcepciones("critico", "Ocurrio un error al consultar la informacion -> "+error);
        }
        
        //MOSTRAR LA INFORMACION DE LOS PRODUCTOS EN LA TABLA DE LA VISTA
        if(listaProductos.isEmpty()){
            Mensaje.manipulacionExcepciones("critico", "No existen datos almacenados de productos");
        } else {
            
            tabla.addColumn("ID Producto");
            tabla.addColumn("Marca");
            tabla.addColumn("Descripcion");
            tabla.addColumn("Linea/Familia");
            tabla.addColumn("Precio Compra");
            tabla.addColumn("% Estandar");
            tabla.addColumn("Precio Estandar");
            tabla.addColumn("% Minimo");
            tabla.addColumn("Precio Minimo");
            tabla.addColumn("Proveedor");
            tabla.addColumn("Existencias");
            tabla.addColumn("Unidad de Medida");
            tabla.addColumn("Minimo");
            tabla.addColumn("Maximo");
            
            tabla.setRowCount(listaProductos.size());
            int cProducto = 0;
            
            // RECORRO LA LISTA DE PRODUCTOS
            for(ObjetosProducto xProducto:listaProductos ){
                
                // POR CADA PRODUCTO RECORRO LA LISTA DE PROVEEDORES
                for(ObjetosProveedor xProveedor:listaProveedores){
                    
                    // VERIFICO SI EL ID DEL PROVEEDOR EN PRODUCTO ES EL MISMO QUE EN PROVEEDORES
                    if(xProducto.getId_proveedor() == xProveedor.getId_proveedor()){
                        
                        // SOLO SI COINCIDE EL ID PROVEEDOR ARRIBA RECORRO  LA LISTA DE PERSONAS
                        for(ObjetosPersona xPersona:listaPersonas){
                            
                            // SI EL ID PERSONA ES EL MISMO EN PERSONA QUE EN PROVEEDOR PINTO LOS DATOS
                            if(xProveedor.getId_persona() == xPersona.getId_persona()){
                                tabla.setValueAt(xProducto.getId_producto(), cProducto, 0);
                                tabla.setValueAt(xProducto.getMarca_producto(), cProducto, 1);
                                tabla.setValueAt(xProducto.getDesc_producto(), cProducto, 2);
                                tabla.setValueAt(xProducto.getLinea_producto(), cProducto, 3);
                                tabla.setValueAt(xProducto.getPrecio_compra_producto(), cProducto, 4);
                                tabla.setValueAt(xProducto.getPrj_est_producto(), cProducto, 5);
                                tabla.setValueAt(xProducto.getPrecio_est_producto(), cProducto, 6);
                                tabla.setValueAt(xProducto.getPrj_min_producto(), cProducto,7);
                                tabla.setValueAt(xProducto.getPrecio_min_producto(), cProducto, 8);
                                tabla.setValueAt(xPersona.getNom_persona(), cProducto, 9);
                                tabla.setValueAt(xProducto.getExi_producto(), cProducto, 10);   
                                tabla.setValueAt(xProducto.getUnidad_medida_producto(), cProducto, 11);
                                tabla.setValueAt(xProducto.getMinimo_producto(), cProducto, 12);
                                tabla.setValueAt(xProducto.getMaximo_producto(), cProducto, 13);
                                cProducto++;
                                
                                //System.out.println("SE CONSULTO CON EXITO EL PRODUCTO: "+xProducto.getId_producto());
                            }
                        }
                    }
                }
            }
            
            tblProducto.setModel(tabla);
            //CAMBIAR DE TAMAÑO LA TERCERA COLUMNA 'DESCRIPCION'
            tblProducto.getColumnModel().getColumn(2).setPreferredWidth(500);
        }
    }
    
    
    private boolean verificarDatosProducto(){
       
        boolean vDatosCorrectos = true;   
       
        if(txtMarcaProducto.getText().isEmpty()){
            Mensaje.manipulacionExcepciones("critico", "Ingrese la marca del producto");
            vDatosCorrectos = false;
        }
        if(txtDescProducto.getText().isEmpty()){
                Mensaje.manipulacionExcepciones("critico", "Ingrese la descripcio del producto");
                vDatosCorrectos = false;
        }
        if(txtIdProveedor.getText().isEmpty()){
                Mensaje.manipulacionExcepciones("critico", "Ingrese el codigo del proveedor asociado a este producto");
                vDatosCorrectos = false;
        }
        
        return vDatosCorrectos;
    }       
    
    private void txtMarcaProductoFocusGained(java.awt.event.FocusEvent evt) {                                          

        if(txtMarcaProducto.getText().isEmpty()){
            txtMarcaProducto.requestFocus();
            Mensaje.manipulacionExcepciones("CRITICO", "Ingrese la Marca para este producto");
        } 
    }                                        
    
     private void limpiarCampos(){
        btnGuardar.setEnabled(true);
        txtIdProducto.setText("");
        txtMarcaProducto.setText("");
        txtDescProducto.setText("");
        txtLinea.setText("");
        txtExiProducto.setText("");
        txtMaximoProducto.setText("");
        txtMinimoProducto.setText("");
        txtPrecioCompraProducto.setText("");
        txtPrecioVentaProducto.setText("");
        txtUnidadMedidaProducto.setText("");
        txtIdProveedor.setText("");
        txtNomProvedor.setText("");
        txtPrjEstProducto.setText("");
        txtPrjMinProducto.setText("");
        txtPrecioMinProducto.setText("");
       // txtComision.setText("");
    }     
    
    private void buscarEnRegistrosGuardados(){
        
        // CAPTURO EL DATO A BUSCAR
        String busqueda = txtBuscar.getText().toUpperCase();
        System.out.println("Se esta buscando la cadena " + busqueda);
        
        if(busqueda != null){
            DefaultTableModel tabla = new DefaultTableModel();
            
            AccesoProducto Producto = new AccesoProducto();
            AccesoProveedor Proveedor = new AccesoProveedor();
            AccesoPersona Persona = new AccesoPersona();

            ArrayList<ObjetosProducto> listaProductos = new ArrayList();
            ArrayList<ObjetosProveedor> listaProveedores = new ArrayList();
            ArrayList<ObjetosPersona> listaPersonas = new ArrayList();

            //VERIFICAR ALGUN ERROR AL CARGAR LA INFORMACION DE LOS PRODUCTOS
            try{
                listaProductos = Producto.seleccionarProducto();
                listaProveedores = Proveedor.seleccionarProveedor();
                listaPersonas = Persona.seleccionarPersona();
                
                System.out.println("SE CONSULTARON LOS DATOS DE PRODUCTOS");
            }catch(Error error){
                Mensaje.manipulacionExcepciones("critico", "Ocurrio un error al consultar la informacion -> "+error);
            }

            //MOSTRAR LA INFORMACION DE LOS PRODUCTOS EN LA TABLA DE LA VISTA
            if(listaProductos.isEmpty()){
                Mensaje.manipulacionExcepciones("critico", "No existen datos almacenados de productos");
            } else {
                
                tabla.addColumn("ID Producto");
                tabla.addColumn("Marca");
                tabla.addColumn("Descripcion");
                tabla.addColumn("Linea/Familia");
                tabla.addColumn("Precio Compra");
                tabla.addColumn("% Estandar");
                tabla.addColumn("Precio Estandar");
                tabla.addColumn("% Minimo");
                tabla.addColumn("Precio Minimo");
                tabla.addColumn("Proveedor");
                tabla.addColumn("Existencias");
                tabla.addColumn("Unidad de Medida");
                tabla.addColumn("Minimo");
                tabla.addColumn("Maximo");

                int cProducto = 0;
                int contadorFilas = 1;

                // RECORRO LA LISTA DE PRODUCTOS
                for (ObjetosProducto xProducto : listaProductos) {

                    // POR CADA PRODUCTO RECORRO LA LISTA DE PROVEEDORES
                    for (ObjetosProveedor xProveedor : listaProveedores) {

                        // VERIFICO SI EL ID DEL PROVEEDOR EN PRODUCTO ES EL MISMO QUE EN PROVEEDORES
                        if (xProducto.getId_proveedor() == xProveedor.getId_proveedor()) {

                            // SOLO SI COINCIDE LE ID PROVEEDOR ARRIBA RECORRO  LA LISTA DE PERSONAS
                            for (ObjetosPersona xPersona : listaPersonas) {

                                // SI EL ID PERSONA ES EL MISMO EN PERSONA QUE EN PROVEEDOR COMPARO CON EL STRING BUSCADO
                                if (xProveedor.getId_persona() == xPersona.getId_persona()) {
                                   
                                    // SI EXISTE ALGUNA COINCIDENCIA CON EL STRING BUSCADO PINTO LA TUPLA EN EL DETALLE
                                    if (xProducto.getId_producto().toUpperCase().indexOf(busqueda) >= 0
                                            || xProducto.getMarca_producto().toUpperCase().indexOf(busqueda) >= 0
                                            || xProducto.getDesc_producto().toUpperCase().indexOf(busqueda) >= 0
                                            || xPersona.getNom_persona().toUpperCase().indexOf(busqueda) >= 0
                                            || xProducto.getLinea_producto().toUpperCase().indexOf(busqueda) >= 0) {

                                        System.out.println("SE ENCONTRO COINCIDENCIA");

                                        // ESTABLECE EL TAMAÑO DE LA TABLA
                                        tabla.setRowCount(contadorFilas);

                                        tabla.setValueAt(xProducto.getId_producto(), cProducto, 0);
                                        tabla.setValueAt(xProducto.getMarca_producto(), cProducto, 1);
                                        tabla.setValueAt(xProducto.getDesc_producto(), cProducto, 2);
                                        tabla.setValueAt(xProducto.getLinea_producto(), cProducto, 3);
                                        tabla.setValueAt(xProducto.getPrecio_compra_producto(), cProducto, 4);
                                        tabla.setValueAt(xProducto.getPrj_est_producto(), cProducto, 5);
                                        tabla.setValueAt(xProducto.getPrecio_est_producto(), cProducto, 6);
                                        tabla.setValueAt(xProducto.getPrj_min_producto(), cProducto, 7);
                                        tabla.setValueAt(xProducto.getPrecio_min_producto(), cProducto, 8);
                                        tabla.setValueAt(xPersona.getNom_persona(), cProducto, 9);
                                        tabla.setValueAt(xProducto.getExi_producto(), cProducto, 10);
                                        tabla.setValueAt(xProducto.getUnidad_medida_producto(), cProducto, 11);
                                        tabla.setValueAt(xProducto.getMinimo_producto(), cProducto, 12);
                                        tabla.setValueAt(xProducto.getMaximo_producto(), cProducto, 13);
                                        cProducto++;
                                        contadorFilas++;

                                        //System.out.println("SE CONSULTO CON EXITO EL PRODUCTO: " + xProducto.getId_producto());

                                    }
                                }
                            }
                        }
                    }
                }

                tblProducto.setModel(tabla);
                //CAMBIAR DE TAMAÑO LA TERCERA COLUMNA 'DESCRIPCION'
                tblProducto.getColumnModel().getColumn(2).setPreferredWidth(500);
            }
        }else{
            // SI NO HAY CARACTER DE BUSQUEDA SE DESPLIEGAN TODOS LOS DATOS
            mostrarRegistrosGuardados();
        } 
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    public static javax.swing.JButton btnAgregar;
    private javax.swing.JButton btnBuscar;
    private javax.swing.JButton btnBuscarImagen;
    private javax.swing.JButton btnCargar;
    private javax.swing.JButton btnGuardar;
    private javax.swing.JButton btnLimpiar;
    private javax.swing.JButton btnModificar;
    private javax.swing.JButton btnMostarImagen;
    private javax.swing.JButton btnSalir;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblBuscar;
    private javax.swing.JLabel lblDescProducto;
    private javax.swing.JLabel lblExiProducto;
    private javax.swing.JLabel lblIdProducto;
    private javax.swing.JLabel lblIdProveedor;
    private javax.swing.JLabel lblImagen;
    private javax.swing.JLabel lblLinea;
    private javax.swing.JLabel lblMarcaProducto;
    private javax.swing.JLabel lblMaximoProducto;
    private javax.swing.JLabel lblMinimoProducto;
    private javax.swing.JLabel lblPrecioCompraProducto;
    private javax.swing.JLabel lblPrecioEstProducto;
    private javax.swing.JLabel lblPrecio_min_producto;
    private javax.swing.JLabel lblUnidadMedidaProducto;
    private javax.swing.JPanel pnlBotones;
    private javax.swing.JPanel pnlDetalle;
    private javax.swing.JPanel pnlEncabezado;
    private javax.swing.JTable tblProducto;
    private javax.swing.JTextField txtBuscar;
    private javax.swing.JTextField txtDescProducto;
    private javax.swing.JTextField txtExiProducto;
    private javax.swing.JTextField txtIdProducto;
    private javax.swing.JTextField txtIdProveedor;
    private javax.swing.JTextField txtLinea;
    private javax.swing.JTextField txtMarcaProducto;
    private javax.swing.JTextField txtMaximoProducto;
    private javax.swing.JTextField txtMinimoProducto;
    private javax.swing.JTextField txtNomProvedor;
    private javax.swing.JTextField txtPrecioCompraProducto;
    private javax.swing.JTextField txtPrecioMinProducto;
    private javax.swing.JTextField txtPrecioVentaProducto;
    private javax.swing.JTextField txtPrjEstProducto;
    private javax.swing.JTextField txtPrjMinProducto;
    private javax.swing.JTextField txtUnidadMedidaProducto;
    private javax.swing.JTextField txtUrlImagen;
    // End of variables declaration//GEN-END:variables
}

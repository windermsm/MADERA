/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package inventory.vistas;

import inventory.acceso.AccesoExcepciones;
import inventory.acceso.AccesoLoggin;
import inventory.acceso.AccesoPersona;
import inventory.acceso.AccesoProveedor;
import inventory.objetos.ObjetosLoggin;
import inventory.objetos.ObjetosPersona;
import inventory.objetos.ObjetosProveedor;
import java.util.ArrayList;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Megabytes Soluciones Integrales Guatemala
 */
public class wdwCatalogoProveedores extends javax.swing.JInternalFrame {

    /**
     * Creates new form wdwIngresosProveedores
     */
    public wdwCatalogoProveedores() {
        initComponents();
        mostrarRegistrosGuardados();
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    //VARIABLES GLOBALES
    AccesoExcepciones Mensaje = new AccesoExcepciones();
    AccesoPersona NuevaPersona = new AccesoPersona();
    AccesoProveedor NuevoProveedor = new AccesoProveedor();
    ObjetosPersona Persona = new ObjetosPersona();
    ObjetosProveedor Proveedor = new ObjetosProveedor();
    boolean proveedor_encontrado = false;
    boolean persona_encontrada = false;
    
    int idPersona = 0;

    private void limpiarCampos() {
        btnGuardar.setEnabled(true);
        txtIdProveedor.setText("");
        txtNitPersona.setText("");
        txtNomPersona.setText("");
        txtTelProveedor.setText("");
        txtDirProveedor.setText("");
        
        idPersona = 0;

        proveedor_encontrado = false;
        persona_encontrada = false;
    }

    private void mostrarRegistrosGuardados() {

        DefaultTableModel tabla = new DefaultTableModel();
        ArrayList<ObjetosProveedor> listaProveedores = new ArrayList();
        ArrayList<ObjetosPersona> listaPersonas = new ArrayList();

        //CONSULTAR LA TABLA PERSONA Y PROVEEDOR
        try {
            listaProveedores = NuevoProveedor.seleccionarProveedor();
            listaPersonas = NuevaPersona.seleccionarPersona();
            System.out.println("SE CONSULTARON LOS DATOS DE PERSONA Y DE PROVEEDOR");
        } catch (Error error) {
            Mensaje.manipulacionExcepciones("critico", "Ocurrio un error al consultar la informacion -> " + error);
        }

        //MOSTRAR LA INFORMACION DE LOS CLIENTES EN LA TABLA DE LA VISTA
        if (listaProveedores.isEmpty()) {
            Mensaje.manipulacionExcepciones("critico", "No existen datos almacenados de proveedores");
        } else {
            tabla.addColumn("ID Proveedor");
            tabla.addColumn("NIT");
            tabla.addColumn("Nombre");
            tabla.addColumn("Direccion");
            tabla.addColumn("Telefono");
            tabla.setRowCount(listaProveedores.size());
            int cProveedor = 0;

            for (ObjetosProveedor xProveedor : listaProveedores) {
                
                for (ObjetosPersona xPersona : listaPersonas) {
                    if (xProveedor.getId_persona() == xPersona.getId_persona()) {
                        tabla.setValueAt(xProveedor.getId_proveedor(), cProveedor, 0);
                        tabla.setValueAt(xPersona.getNit_persona(), cProveedor, 1);
                        tabla.setValueAt(xPersona.getNom_persona(), cProveedor, 2);
                        tabla.setValueAt(xProveedor.getDir_proveedor(), cProveedor, 3);
                        tabla.setValueAt(xProveedor.getTel_proveedor(), cProveedor, 4);
                        System.out.println("SE CONSULTO CON EXITO EL NIT: " + xPersona.getNit_persona());
                    }
                }
                cProveedor++;
            }

            tblProveedor.setModel(tabla);
        }
    }

    private int obtenerIdPersona(String pNit_persona) {

        int id_persona = 0;
        ArrayList<ObjetosPersona> BuscarPersona = new ArrayList();

        try {
            BuscarPersona = NuevaPersona.buscarPersona(pNit_persona);
        } catch (Exception error) {
            Mensaje.manipulacionExcepciones("critico", "Ocurrio un error al consulta el NIT del Cliente -> " + error);
        }

        if (BuscarPersona.isEmpty()) {
            Mensaje.manipulacionExcepciones("critico", "No existe esta Persona en la Base de Datos");
        } else {
            id_persona = BuscarPersona.get(0).getId_persona();
        }

        return id_persona;
    }

    private int obtenerIdProveedor(String pNit_cliente) {

        ArrayList<ObjetosProveedor> BuscarProveedor = new ArrayList();
        int vId_persona = 0;
        int vId_Proveedor = 0;

        //BUSCAR EL ID DE LA PERSONA
        vId_persona = obtenerIdPersona(pNit_cliente);

        //CONSULTAR EL ID DE LA PERSONA EN PROVEEDOR
        try {
            BuscarProveedor = NuevoProveedor.buscarProveedor(vId_persona);
        } catch (Exception error) {
            Mensaje.manipulacionExcepciones("informacion", "Ocurrio un error al consulta este numero de NIT -> " + error);
        }

        //EVALUAR EL RESULTADO DE LA BUSQUEDA
        if (BuscarProveedor.isEmpty()) {
            Mensaje.manipulacionExcepciones("critico", "Debe crear este proveedor en la base de datos");
        } else {
            if (BuscarProveedor.size() > 1) {
                System.out.println("EXISTEN " + BuscarProveedor.size() + " PROVEEDORES CON ESTE NUMERO DE NIT");
                Mensaje.manipulacionExcepciones("critico", "Este numero de Nit esta repetido");
            } else {
                vId_Proveedor = BuscarProveedor.get(0).getId_proveedor();
            }
        }

        return vId_Proveedor;
    }

    private void buscarEnRegistrosGuardados() {

        // CAPTURO EL DATO A BUSCAR
        String busqueda = txtBuscar.getText();

        if (busqueda != null) {

            DefaultTableModel tabla = new DefaultTableModel();

            ArrayList<ObjetosProveedor> listaProveedores = new ArrayList();
            ArrayList<ObjetosPersona> listaPersonas = new ArrayList();

            //VERIFICAR ALGUN ERROR AL CARGAR LA INFORMACION DE LOS CLIENTES
            try {
                listaProveedores = NuevoProveedor.seleccionarProveedor();
                listaPersonas = NuevaPersona.seleccionarPersona();
                System.out.println("SE CONSULTARON LOS DATOS DE PERSONA Y DE PROVEEDORES");
            } catch (Error error) {
                Mensaje.manipulacionExcepciones("critico", "Ocurrio un error al consultar la informacion -> " + error);
            }

            //MOSTRAR LA INFORMACION DE LOS CLIENTES EN LA TABLA DE LA VISTA
            if (listaProveedores.isEmpty()) {
                Mensaje.manipulacionExcepciones("critico", "No existen datos almacenados de clientes");
            } else {
                tabla.addColumn("ID Proveedor");
                tabla.addColumn("NIT");
                tabla.addColumn("Nombre");
                tabla.addColumn("Direccion");
                tabla.addColumn("Telefono");

                int cProveedor = 0;
                int contadorFilas = 1;

                // RECORRO TODA LA LISTA DE PERSONAS
                for (ObjetosPersona xPersona : listaPersonas) {

                    // COMPARA CADA ELEMENTO NIT Y NOMBRE DE LA LISTA PARA VER SI ALGUNO ES EL BUSCADO
                    if (xPersona.getNit_persona().indexOf(busqueda) >= 0
                            || xPersona.getNom_persona().toUpperCase().indexOf(busqueda.toUpperCase()) >= 0) {


                        // SI LA BUSQUEDA COINCIDE RECORRO LA LISTA DE CLIENTES 
                        // PARA OBTENER LA DIRECCION Y EL TELEFONO DE LA PERSONA
                        for (ObjetosProveedor xProveedor : listaProveedores) {
                            
                            if (xPersona.getId_persona() == xProveedor.getId_persona()) {
                                // ESTABLECE EL TAMAÃ‘O DE LA TABLA
                                tabla.setRowCount(contadorFilas);
                            
                                tabla.setValueAt(xProveedor.getId_proveedor(), cProveedor, 0);
                                tabla.setValueAt(xPersona.getNit_persona(), cProveedor, 1);
                                tabla.setValueAt(xPersona.getNom_persona(), cProveedor, 2);
                                tabla.setValueAt(xProveedor.getDir_proveedor(), cProveedor, 3);
                                tabla.setValueAt(xProveedor.getTel_proveedor(), cProveedor, 4);

                                System.out.println("SE ENCONTRO EL REGISTRO BUSCADO: " + xPersona.getNit_persona());

                                cProveedor++;
                                contadorFilas++;
                            }
                        }

                    }
                }
                tblProveedor.setModel(tabla);
            }
        } else {
            // SI NO HAY CARACTER DE BUSQUEDA SE DESPLIEGAN TODOS LOS DATOS
            mostrarRegistrosGuardados();
        }

    }

    private void buscarProveedor() {

        proveedor_encontrado = false;
        persona_encontrada = false;

        ArrayList<ObjetosPersona> BuscarPersona = new ArrayList();
        ArrayList<ObjetosProveedor> BuscarProveedor = new ArrayList();

        try {
            BuscarPersona = NuevaPersona.buscarPersona(txtNitPersona.getText());
        } catch (Exception error) {
            Mensaje.manipulacionExcepciones("critico", "Ocurrio un erro al buscar informacion sobre esta persona -> " + error);
        }

        if (BuscarPersona.isEmpty()) {
            persona_encontrada = false;
            proveedor_encontrado = false;
        } else {
            persona_encontrada = true;
            txtNomPersona.setText(BuscarPersona.get(0).getNom_persona());

            try {
                BuscarProveedor = NuevoProveedor.buscarProveedor(BuscarPersona.get(0).getId_persona());
            } catch (Exception error) {
                Mensaje.manipulacionExcepciones("critico", "Ocurrio un error al buscar a este Proveedor -> " + error);
            }

        }

        if (BuscarProveedor.isEmpty()) {
            proveedor_encontrado = false;
        } else {
            proveedor_encontrado = true;
            txtIdProveedor.setText(String.valueOf(BuscarProveedor.get(0).getId_proveedor()));
            txtDirProveedor.setText(BuscarProveedor.get(0).getDir_proveedor());
            txtTelProveedor.setText(String.valueOf(BuscarProveedor.get(0).getTel_proveedor()));

        }
    }

    private boolean verificarDatosProveedor() {

        boolean vDatosCorrectos = true;

        if (txtNitPersona.getText().isEmpty()) {
            Mensaje.manipulacionExcepciones("critico", "Ingrese el numero de NIT");
            vDatosCorrectos = false;
        }
        if (txtNomPersona.getText().isEmpty()) {
            Mensaje.manipulacionExcepciones("critico", "Ingrese el Nombre del proveedor");
            vDatosCorrectos = false;
        }
        if (txtTelProveedor.getText().isEmpty()) {
            Mensaje.manipulacionExcepciones("critico", "Ingrese el numero de Telefono");
            vDatosCorrectos = false;
        }
        if (txtDirProveedor.getText().isEmpty()) {
            Mensaje.manipulacionExcepciones("critico", "Ingrese la Direccion del proveedor");
            vDatosCorrectos = false;
        }

        return vDatosCorrectos;
    }

    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlBotones = new javax.swing.JPanel();
        btnGuardar = new javax.swing.JButton();
        lblBuscar = new javax.swing.JLabel();
        txtBuscar = new javax.swing.JTextField();
        btnBuscar = new javax.swing.JButton();
        btnSalir = new javax.swing.JButton();
        btnLimpiar = new javax.swing.JButton();
        btnModificar = new javax.swing.JButton();
        pnlEncabezado = new javax.swing.JPanel();
        lblIdProveedor = new javax.swing.JLabel();
        txtIdProveedor = new javax.swing.JTextField();
        lblNombre = new javax.swing.JLabel();
        txtNomPersona = new javax.swing.JTextField();
        lblNitPersona = new javax.swing.JLabel();
        txtNitPersona = new javax.swing.JTextField();
        lblTelProveedor = new javax.swing.JLabel();
        txtTelProveedor = new javax.swing.JTextField();
        lblDirProveedor = new javax.swing.JLabel();
        txtDirProveedor = new javax.swing.JTextField();
        pnlDetalle = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblProveedor = new javax.swing.JTable();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Proveedores");
        setFrameIcon(new javax.swing.ImageIcon(getClass().getResource("/inventory/imagenes/proveedores.png"))); // NOI18N
        setMaximumSize(new java.awt.Dimension(700, 500));
        setMinimumSize(new java.awt.Dimension(700, 500));
        setPreferredSize(new java.awt.Dimension(700, 500));

        pnlBotones.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        btnGuardar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/inventory/imagenes/guardar.png"))); // NOI18N
        btnGuardar.setText("Guardar");
        btnGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarActionPerformed(evt);
            }
        });

        lblBuscar.setText("Buscar");

        txtBuscar.setToolTipText("Ingrese el nombre del proveedor a buscar");

        btnBuscar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/inventory/imagenes/buscar.png"))); // NOI18N
        btnBuscar.setActionCommand("buscar");
        btnBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarActionPerformed(evt);
            }
        });

        btnSalir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/inventory/imagenes/salir.png"))); // NOI18N
        btnSalir.setText("Salir");
        btnSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalirActionPerformed(evt);
            }
        });

        btnLimpiar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/inventory/imagenes/limpiar.png"))); // NOI18N
        btnLimpiar.setText("Limpiar");
        btnLimpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimpiarActionPerformed(evt);
            }
        });

        btnModificar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/inventory/imagenes/editar.png"))); // NOI18N
        btnModificar.setText("Modificar");
        btnModificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnModificarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlBotonesLayout = new javax.swing.GroupLayout(pnlBotones);
        pnlBotones.setLayout(pnlBotonesLayout);
        pnlBotonesLayout.setHorizontalGroup(
            pnlBotonesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlBotonesLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblBuscar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(txtBuscar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnBuscar)
                .addGap(18, 18, 18)
                .addComponent(btnGuardar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnModificar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnLimpiar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnSalir)
                .addContainerGap())
        );
        pnlBotonesLayout.setVerticalGroup(
            pnlBotonesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlBotonesLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlBotonesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnBuscar)
                    .addGroup(pnlBotonesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lblBuscar)
                        .addComponent(txtBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(pnlBotonesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnGuardar)
                        .addComponent(btnSalir)
                        .addComponent(btnLimpiar)
                        .addComponent(btnModificar)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pnlEncabezado.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        lblIdProveedor.setText("ID Proveedor");

        txtIdProveedor.setBackground(new java.awt.Color(102, 102, 102));
        txtIdProveedor.setEditable(false);
        txtIdProveedor.setForeground(new java.awt.Color(255, 255, 255));
        txtIdProveedor.setToolTipText("El ID del Proveedor sera asignado Automaticamente");

        lblNombre.setText("Nombre");

        txtNomPersona.setToolTipText("Ingese el nombre del proveedor este no puede contener simbolos ni numeros");
        txtNomPersona.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtNombreFocusGained(evt);
            }
        });

        lblNitPersona.setText("NIT");

        txtNitPersona.setToolTipText("Ingrese el NIT del Proveedor");
        txtNitPersona.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtNitPersonaFocusLost(evt);
            }
        });

        lblTelProveedor.setText("No. Telefono");

        txtTelProveedor.setToolTipText("Ingrese el numero de telefono del proveedor sin guiones. Maximo 10 digitos");

        lblDirProveedor.setText("Direccion");

        txtDirProveedor.setToolTipText("Ingrese la direccion del Proveedor tiene un maximo de 200 caracteres");

        javax.swing.GroupLayout pnlEncabezadoLayout = new javax.swing.GroupLayout(pnlEncabezado);
        pnlEncabezado.setLayout(pnlEncabezadoLayout);
        pnlEncabezadoLayout.setHorizontalGroup(
            pnlEncabezadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlEncabezadoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlEncabezadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblIdProveedor)
                    .addComponent(lblTelProveedor))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlEncabezadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txtTelProveedor, javax.swing.GroupLayout.DEFAULT_SIZE, 94, Short.MAX_VALUE)
                    .addComponent(txtIdProveedor))
                .addGap(18, 18, 18)
                .addGroup(pnlEncabezadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblDirProveedor)
                    .addComponent(lblNitPersona))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlEncabezadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlEncabezadoLayout.createSequentialGroup()
                        .addComponent(txtNitPersona, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(lblNombre)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtNomPersona))
                    .addComponent(txtDirProveedor))
                .addContainerGap())
        );
        pnlEncabezadoLayout.setVerticalGroup(
            pnlEncabezadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlEncabezadoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlEncabezadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblIdProveedor)
                    .addComponent(txtIdProveedor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblNombre)
                    .addComponent(txtNomPersona, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtNitPersona, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblNitPersona))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlEncabezadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblTelProveedor)
                    .addComponent(txtTelProveedor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblDirProveedor)
                    .addComponent(txtDirProveedor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pnlDetalle.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        tblProveedor.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        tblProveedor.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblProveedorMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblProveedor);

        javax.swing.GroupLayout pnlDetalleLayout = new javax.swing.GroupLayout(pnlDetalle);
        pnlDetalle.setLayout(pnlDetalleLayout);
        pnlDetalleLayout.setHorizontalGroup(
            pnlDetalleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlDetalleLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 640, Short.MAX_VALUE)
                .addContainerGap())
        );
        pnlDetalleLayout.setVerticalGroup(
            pnlDetalleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlDetalleLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 288, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pnlEncabezado, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pnlBotones, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pnlDetalle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pnlEncabezado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlBotones, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlDetalle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarActionPerformed

        boolean persona_guardada = false;

        if (verificarDatosProveedor()) {
            Persona.setId_persona(0);
            Persona.setNit_persona(txtNitPersona.getText());
            Persona.setNom_persona(txtNomPersona.getText());
            Proveedor.setId_proveedor(0);
            Proveedor.setId_persona(0);
            Proveedor.setDir_proveedor(txtDirProveedor.getText());
            Proveedor.setTel_proveedor(Integer.parseInt(txtTelProveedor.getText()));
        }


        if (persona_guardada == false && proveedor_encontrado == false) {

            try {
                NuevaPersona.insertarPersona(Persona);
                persona_guardada = true;
            } catch (Exception error) {
                persona_guardada = false;
                Mensaje.manipulacionExcepciones("critico", "Ocurrio un erro al guardar la persona -> " + error);
            }

            if (persona_guardada == true) {
                try {
                    Proveedor.setId_persona(obtenerIdPersona(txtNitPersona.getText()));
                    NuevoProveedor.insertarProveedor(Proveedor);
                    limpiarCampos();
                    mostrarRegistrosGuardados();
                    Mensaje.manipulacionExcepciones("informacion", "Datos guardados exitosamente");
                } catch (Exception error) {
                    Mensaje.manipulacionExcepciones("critico", "Ocurrio un erro al guardar los datos de este Proveedor -> " + error);
                }
            }

        }

        //SI LA PERSONA EXISTE PERO EL PROVEEDOR NO, SE INSERTA EL PROVEEDOR
        if (persona_encontrada == true && proveedor_encontrado == false) {
            try {
                Proveedor.setId_persona(obtenerIdPersona(txtNitPersona.getText()));
                NuevoProveedor.insertarProveedor(Proveedor);
                limpiarCampos();
                mostrarRegistrosGuardados();
                Mensaje.manipulacionExcepciones("informacion", "Datsos guardados exitosamente");
            } catch (Exception error) {
                Mensaje.manipulacionExcepciones("critico", "Ocurrio un erro al guardar los datos de este Proveedor -> " + error);
            }
        }
    }//GEN-LAST:event_btnGuardarActionPerformed

    private void btnLimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimpiarActionPerformed
        limpiarCampos();
    }//GEN-LAST:event_btnLimpiarActionPerformed

    private void btnSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalirActionPerformed

        Mensaje.manipulacionExcepciones("interrogante", "Â¿Esta seguro que desea salir?");
        if (Mensaje.valor == 0) {
            dispose();
        }
    }//GEN-LAST:event_btnSalirActionPerformed

    private void btnBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarActionPerformed

        buscarEnRegistrosGuardados();
    }//GEN-LAST:event_btnBuscarActionPerformed

    private void btnModificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnModificarActionPerformed

        //ACTUALIZAR LOS DATOS DE PERSONA
        Persona.setId_persona(idPersona);
        Persona.setNit_persona(txtNitPersona.getText());
        Persona.setNom_persona(txtNomPersona.getText());

        try {
            Mensaje.manipulacionExcepciones("informacion", NuevaPersona.actualizarPersona(Persona));
        } catch (Exception error) {
            Mensaje.manipulacionExcepciones("critico", "Ocurrio un error al actualizar Persona -> " + error);
        }
        //ACTUALIZAR LOS DATOS DE PROVEEDOR
        Proveedor.setId_proveedor(Integer.parseInt(txtIdProveedor.getText()));
        Proveedor.setId_persona(Persona.getId_persona());
        Proveedor.setDir_proveedor(txtDirProveedor.getText());
        Proveedor.setTel_proveedor(Integer.parseInt(txtTelProveedor.getText()));

        try {
            Mensaje.manipulacionExcepciones("informacion", NuevoProveedor.actualizarProveedor(Proveedor));
            mostrarRegistrosGuardados();
            limpiarCampos();
        } catch (Exception error) {
            Mensaje.manipulacionExcepciones("critico", "Ocurrio un error al actualizar el Proveedor -> " + error);
        }
    }//GEN-LAST:event_btnModificarActionPerformed

    private void tblProveedorMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblProveedorMouseClicked
btnGuardar.setEnabled(false);
        if (String.valueOf(tblProveedor.getSelectedColumn()).equals("0")) {
            //ASIGNAR AL ENCABEZADO LOS DATOS
            int fila_seleccionada = tblProveedor.getSelectedRow();
            int columna_seleccionada = tblProveedor.getSelectedColumn();
            txtNitPersona.setText(String.valueOf(tblProveedor.getValueAt(fila_seleccionada, columna_seleccionada+1)));
            txtNomPersona.setText(String.valueOf(tblProveedor.getValueAt(fila_seleccionada, columna_seleccionada + 2)));
            txtDirProveedor.setText(String.valueOf(tblProveedor.getValueAt(fila_seleccionada, columna_seleccionada + 3)));
            txtTelProveedor.setText(String.valueOf(tblProveedor.getValueAt(fila_seleccionada, columna_seleccionada + 4)));

            idPersona = obtenerIdPersona(String.valueOf(tblProveedor.getValueAt(fila_seleccionada, columna_seleccionada+1)));
            
            //YA SELECCIONADO EL NIT BUSCO EL CLIENTE CON EL METODO BUSCAR ID CLIENTE
            txtIdProveedor.setText(String.valueOf(obtenerIdProveedor(String.valueOf(tblProveedor.getValueAt(fila_seleccionada, columna_seleccionada+1)))));
        }
    }//GEN-LAST:event_tblProveedorMouseClicked

    private void txtNitPersonaFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtNitPersonaFocusLost
        Pattern patron = Pattern.compile("[0-9]*[-][0-9A-Z]");
        Matcher expresion = patron.matcher(txtNitPersona.getText());
        if(expresion.matches()) {
            buscarProveedor();
        } else {
            Mensaje.manipulacionExcepciones("critico", "Este no. de NIT no es valido");
            txtNitPersona.requestFocus();
        }
    }//GEN-LAST:event_txtNitPersonaFocusLost

    private void txtNombreFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtNombreFocusGained
        if (txtNitPersona.getText().isEmpty()) {
            txtNitPersona.requestFocus();
            Mensaje.manipulacionExcepciones("critico", "Ingrese el numero de NIT para este Proveedor");
        }
    }//GEN-LAST:event_txtNombreFocusGained

   
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBuscar;
    private javax.swing.JButton btnGuardar;
    private javax.swing.JButton btnLimpiar;
    private javax.swing.JButton btnModificar;
    private javax.swing.JButton btnSalir;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblBuscar;
    private javax.swing.JLabel lblDirProveedor;
    private javax.swing.JLabel lblIdProveedor;
    private javax.swing.JLabel lblNitPersona;
    private javax.swing.JLabel lblNombre;
    private javax.swing.JLabel lblTelProveedor;
    private javax.swing.JPanel pnlBotones;
    private javax.swing.JPanel pnlDetalle;
    private javax.swing.JPanel pnlEncabezado;
    private javax.swing.JTable tblProveedor;
    private javax.swing.JTextField txtBuscar;
    private javax.swing.JTextField txtDirProveedor;
    private javax.swing.JTextField txtIdProveedor;
    private javax.swing.JTextField txtNitPersona;
    private javax.swing.JTextField txtNomPersona;
    private javax.swing.JTextField txtTelProveedor;
    // End of variables declaration//GEN-END:variables
}

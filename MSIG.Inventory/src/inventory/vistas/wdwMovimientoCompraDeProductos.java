/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package inventory.vistas;

import inventory.objetos.ObjetosPersona;
import inventory.objetos.ObjetosDetalleCompra;
import inventory.objetos.ObjetosCompra;
import inventory.objetos.ObjetosProducto;
import inventory.objetos.ObjetosProveedor;
import inventory.acceso.AccesoPersona;
import inventory.acceso.AccesoProveedor;
import inventory.acceso.AccesoExcepciones;
import inventory.acceso.AccesoDetalleCompra;
import inventory.acceso.AccesoProducto;
import inventory.acceso.AccesoInventario;
import inventory.acceso.AccesoCompra;
import java.net.URL;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import javax.swing.table.DefaultTableModel;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.util.JRLoader;
import net.sf.jasperreports.view.JasperViewer;

/**
 *
 * @author Megabyte Soluciones Integrales Guatemala
 */
public class wdwMovimientoCompraDeProductos extends javax.swing.JInternalFrame {

    /**
     * Creates new form wdwMovimientoCompraDeProductos
     */
    
    public wdwMovimientoCompraDeProductos() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlEncabezado = new javax.swing.JPanel();
        lblIdCompra = new javax.swing.JLabel();
        txtIdCompra = new javax.swing.JTextField();
        lblFecha = new javax.swing.JLabel();
        txtFechaCompra = new javax.swing.JTextField();
        lblNumFacturaCompra = new javax.swing.JLabel();
        lblSerieFacturaCompra = new javax.swing.JLabel();
        txtSerieFacturaCompra = new javax.swing.JTextField();
        lblFolioFacturaCompra = new javax.swing.JLabel();
        txtFolioFacturaCompra = new javax.swing.JTextField();
        lblTotalFacturaCompra = new javax.swing.JLabel();
        txtTotalCompra = new javax.swing.JTextField();
        lblNitProveedor = new javax.swing.JLabel();
        ckbPrecioPonderado = new javax.swing.JCheckBox();
        txtNitProveedor = new javax.swing.JTextField();
        txtNombreProveedor = new javax.swing.JTextField();
        lblNumeroFactura = new javax.swing.JLabel();
        txtNumeroFacturaCompra = new javax.swing.JTextField();
        lblNombreProveedor = new javax.swing.JLabel();
        pnlBotones = new javax.swing.JPanel();
        btnSalir = new javax.swing.JButton();
        btnGuardar = new javax.swing.JButton();
        btnBuscar = new javax.swing.JButton();
        btnNuevo = new javax.swing.JButton();
        btnReporte = new javax.swing.JButton();
        btnEliminar = new javax.swing.JButton();
        pnlDetalle = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblDetalleCompra = new javax.swing.JTable();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Compra de Productos");
        setFrameIcon(new javax.swing.ImageIcon(getClass().getResource("/inventory/imagenes/compras.png"))); // NOI18N
        setMaximumSize(new java.awt.Dimension(700, 500));
        setMinimumSize(new java.awt.Dimension(700, 500));
        setPreferredSize(new java.awt.Dimension(700, 500));

        pnlEncabezado.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        lblIdCompra.setText("ID Compra");

        txtIdCompra.setBackground(new java.awt.Color(102, 102, 102));
        txtIdCompra.setEditable(false);
        txtIdCompra.setForeground(new java.awt.Color(255, 255, 255));
        txtIdCompra.setToolTipText("El numero de compra se genera automaticamente");

        lblFecha.setText("Fecha");

        txtFechaCompra.setToolTipText("Ingresar la fecha de compra del producto");

        lblNumFacturaCompra.setToolTipText("Ingrese el numero de factura (no es requerido)");

        lblSerieFacturaCompra.setText("Serie");

        txtSerieFacturaCompra.setToolTipText("Ingrese el numero de serie de la factura de compra (no es requerido)");

        lblFolioFacturaCompra.setText("Folio");

        txtFolioFacturaCompra.setToolTipText("Ingrese el numero de folio de la factura (no es requerido)");

        lblTotalFacturaCompra.setText("Total");

        txtTotalCompra.setEditable(false);
        txtTotalCompra.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtTotalCompra.setToolTipText("Ingrese el valor total de la compra realizada");

        lblNitProveedor.setText("NIT");

        ckbPrecioPonderado.setText("Precio Ponderado");
        ckbPrecioPonderado.setToolTipText("Esta opcion automaticamente calculara el precio promedio del producto segun el nuevo ingreso");

        txtNitProveedor.setToolTipText("Ingrese el NIT del proveedor de la factura");
        txtNitProveedor.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtNitProveedorFocusLost(evt);
            }
        });

        txtNombreProveedor.setEditable(false);
        txtNombreProveedor.setToolTipText("Este campo lo refresca el sistema en base al NIT del proveedor");

        lblNumeroFactura.setText("Factura");

        txtNumeroFacturaCompra.setToolTipText("Ingrese el numero de factura");

        lblNombreProveedor.setText("Nombre");

        javax.swing.GroupLayout pnlEncabezadoLayout = new javax.swing.GroupLayout(pnlEncabezado);
        pnlEncabezado.setLayout(pnlEncabezadoLayout);
        pnlEncabezadoLayout.setHorizontalGroup(
            pnlEncabezadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlEncabezadoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlEncabezadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblIdCompra)
                    .addComponent(lblNitProveedor)
                    .addComponent(lblFecha))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlEncabezadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txtFechaCompra, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE)
                    .addComponent(txtNitProveedor)
                    .addComponent(txtIdCompra))
                .addGap(18, 18, 18)
                .addGroup(pnlEncabezadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlEncabezadoLayout.createSequentialGroup()
                        .addGroup(pnlEncabezadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnlEncabezadoLayout.createSequentialGroup()
                                .addComponent(lblNumeroFactura)
                                .addGap(18, 18, 18)
                                .addComponent(txtNumeroFacturaCompra)
                                .addGap(18, 18, 18)
                                .addComponent(lblSerieFacturaCompra))
                            .addGroup(pnlEncabezadoLayout.createSequentialGroup()
                                .addGap(171, 171, 171)
                                .addComponent(lblNumFacturaCompra)
                                .addGap(0, 73, Short.MAX_VALUE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtSerieFacturaCompra, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(lblFolioFacturaCompra)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtFolioFacturaCompra, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlEncabezadoLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(ckbPrecioPonderado)
                        .addGap(18, 18, 18)
                        .addComponent(lblTotalFacturaCompra)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtTotalCompra, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlEncabezadoLayout.createSequentialGroup()
                        .addComponent(lblNombreProveedor)
                        .addGap(18, 18, 18)
                        .addComponent(txtNombreProveedor)))
                .addContainerGap())
        );
        pnlEncabezadoLayout.setVerticalGroup(
            pnlEncabezadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlEncabezadoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlEncabezadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblIdCompra)
                    .addComponent(txtIdCompra, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblNumFacturaCompra)
                    .addComponent(lblSerieFacturaCompra)
                    .addComponent(txtSerieFacturaCompra, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblFolioFacturaCompra)
                    .addComponent(txtFolioFacturaCompra, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblNumeroFactura)
                    .addComponent(txtNumeroFacturaCompra, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlEncabezadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblNitProveedor)
                    .addComponent(txtNitProveedor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtNombreProveedor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblNombreProveedor))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 8, Short.MAX_VALUE)
                .addGroup(pnlEncabezadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtTotalCompra, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblTotalFacturaCompra)
                    .addComponent(lblFecha)
                    .addComponent(txtFechaCompra, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ckbPrecioPonderado))
                .addContainerGap())
        );

        pnlBotones.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        btnSalir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/inventory/imagenes/salir.png"))); // NOI18N
        btnSalir.setText("Salir");
        btnSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalirActionPerformed(evt);
            }
        });

        btnGuardar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/inventory/imagenes/guardar.png"))); // NOI18N
        btnGuardar.setText("Guardar");
        btnGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarActionPerformed(evt);
            }
        });

        btnBuscar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/inventory/imagenes/buscar.png"))); // NOI18N
        btnBuscar.setActionCommand("buscar");
        btnBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarActionPerformed(evt);
            }
        });

        btnNuevo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/inventory/imagenes/nuevo.png"))); // NOI18N
        btnNuevo.setText("Nuevo");
        btnNuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNuevoActionPerformed(evt);
            }
        });

        btnReporte.setIcon(new javax.swing.ImageIcon(getClass().getResource("/inventory/imagenes/impresora.png"))); // NOI18N
        btnReporte.setActionCommand("btnReporte");
        btnReporte.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReporteActionPerformed(evt);
            }
        });

        btnEliminar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/inventory/imagenes/eliminar.png"))); // NOI18N
        btnEliminar.setText("Eliminar");
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlBotonesLayout = new javax.swing.GroupLayout(pnlBotones);
        pnlBotones.setLayout(pnlBotonesLayout);
        pnlBotonesLayout.setHorizontalGroup(
            pnlBotonesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlBotonesLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnReporte)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnGuardar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnNuevo)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnEliminar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnSalir)
                .addContainerGap())
        );
        pnlBotonesLayout.setVerticalGroup(
            pnlBotonesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlBotonesLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlBotonesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnBuscar)
                    .addGroup(pnlBotonesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnSalir)
                        .addComponent(btnGuardar)
                        .addComponent(btnNuevo)
                        .addComponent(btnReporte)
                        .addComponent(btnEliminar)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pnlDetalle.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        tblDetalleCompra.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "No.", "Codigo", "Descripcion del Producto", "Cantidad", "P. Compra", "P. Normal", "Total", "Comentario", "Arancel"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.Float.class, java.lang.Float.class, java.lang.Float.class, java.lang.Float.class, java.lang.String.class, java.lang.Float.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, true, true, true, true, true, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblDetalleCompra.getTableHeader().setReorderingAllowed(false);
        tblDetalleCompra.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblDetalleCompraMouseClicked(evt);
            }
        });
        tblDetalleCompra.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tblDetalleCompraKeyPressed(evt);
            }
        });
        jScrollPane1.setViewportView(tblDetalleCompra);
        tblDetalleCompra.getColumnModel().getColumn(0).setResizable(false);
        tblDetalleCompra.getColumnModel().getColumn(0).setPreferredWidth(20);
        tblDetalleCompra.getColumnModel().getColumn(1).setResizable(false);
        tblDetalleCompra.getColumnModel().getColumn(1).setPreferredWidth(30);
        tblDetalleCompra.getColumnModel().getColumn(2).setPreferredWidth(200);
        tblDetalleCompra.getColumnModel().getColumn(3).setResizable(false);
        tblDetalleCompra.getColumnModel().getColumn(3).setPreferredWidth(20);
        tblDetalleCompra.getColumnModel().getColumn(4).setResizable(false);
        tblDetalleCompra.getColumnModel().getColumn(4).setPreferredWidth(30);
        tblDetalleCompra.getColumnModel().getColumn(5).setResizable(false);
        tblDetalleCompra.getColumnModel().getColumn(5).setPreferredWidth(30);
        tblDetalleCompra.getColumnModel().getColumn(6).setResizable(false);
        tblDetalleCompra.getColumnModel().getColumn(6).setPreferredWidth(20);

        javax.swing.GroupLayout pnlDetalleLayout = new javax.swing.GroupLayout(pnlDetalle);
        pnlDetalle.setLayout(pnlDetalleLayout);
        pnlDetalleLayout.setHorizontalGroup(
            pnlDetalleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlDetalleLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 640, Short.MAX_VALUE)
                .addContainerGap())
        );
        pnlDetalleLayout.setVerticalGroup(
            pnlDetalleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlDetalleLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 259, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pnlEncabezado, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pnlBotones, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pnlDetalle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pnlEncabezado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlDetalle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlBotones, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    //VARIABLES GLOBALES
    ObjetosCompra Compra = new ObjetosCompra();
    ObjetosDetalleCompra Detalle = new ObjetosDetalleCompra();
    AccesoProveedor NuevoProveedor = new AccesoProveedor();
    AccesoCompra NuevaCompra = new AccesoCompra();
    AccesoPersona NuevaPersona = new AccesoPersona();
    AccesoProducto NuevoProducto = new AccesoProducto();
    AccesoDetalleCompra NuevoDetalleCompra = new AccesoDetalleCompra();
    AccesoExcepciones Mensaje = new AccesoExcepciones();
    
    Date fecha = new Date();
    String producto_actual;
    float total_compra = 0;
    float cantidad = 0;
    float precio = 0;
    int fila_seleccionada = 0;
    int columna_seleccionada = 0;
    
    private void limpiarEncabezadoCompra(){
        
        txtIdCompra.setText("");
        txtFechaCompra.setText("");
        txtNumeroFacturaCompra.setText("");
        txtSerieFacturaCompra.setText("");
        txtFolioFacturaCompra.setText("");
        txtTotalCompra.setText("");
        txtNitProveedor.setText("");
        txtNombreProveedor.setText("");
        ckbPrecioPonderado.setSelected(false);
    }
    
    private void limpiarDetalleCompra(){
        String[] columnas = {"No","Codigo","Descripcion del Producto","Cantidad","P. Compra","P. Normal","Total"};
        DefaultTableModel modelo_tabla = new DefaultTableModel(columnas, 30);
        tblDetalleCompra.setModel(modelo_tabla);
        cantidad = 0;
        //cantidad_anterior = 0;
        producto_actual = null;
    }
    
    private void agregarProducto(String pId_producto, float pCantidad) {
        ArrayList<ObjetosProducto> BuscarProducto = new ArrayList();

        try {
            BuscarProducto = NuevoProducto.buscarProducto(pId_producto);
            if (BuscarProducto.isEmpty()) {
                Mensaje.manipulacionExcepciones("critico", "No existe el Producto " + pId_producto + " En la Base de Datos");
            } else {
                if (BuscarProducto.size() > 1) {
                    Mensaje.manipulacionExcepciones("critico", "Existe mas de un Producto con este ID " + pId_producto);
                } else {
                    //PROCEDE A REALIZAR LA ACTUALIZACION DESCONTANDO LA CANTIDAD
                    NuevoProducto.actualizarExistencia(pId_producto, BuscarProducto.get(0).getExi_producto() + pCantidad);
                    //PROCEDE A REALIZAR LA ACTUALIZACION DEL PRECIO SEGUN SEA PONDERADO O NO
                    if(ckbPrecioPonderado.isSelected()==true){
                        float v_total_producto_antiguo = 0;
                        float v_total_producto_nuevo = 0;
                        float v_total_cantidad_producto = 0;
                        float v_precio_ponderado = 0;
                        
                        //MULTIPLICAR LA CANTIDAD ANTIGUA POR PRECIO ANTIGUO
                        v_total_producto_antiguo = BuscarProducto.get(0).getExi_producto() * BuscarProducto.get(0).getPrecio_compra_producto();
                        //MULTIPLICAR LA CANTIDAD NUEVA POR EL PRECIO NUEVO
                        v_total_producto_nuevo = Detalle.getCant_d_compra() * Detalle.getPrecio_d_compra();
                        //SUMAR LA CATIDAD TOTAL DE PRODUCTOS NUEVOS Y ANTIGUOS
                        v_total_cantidad_producto = BuscarProducto.get(0).getExi_producto() + Detalle.getCant_d_compra();
                        //PODERAR EL PRECIO DE COMPRA
                        v_precio_ponderado = (v_total_producto_antiguo + v_total_producto_nuevo) / v_total_cantidad_producto;
                        
                        //ACTUALIZAR EL PRECIO DE COMPRA POR EL PRECIO PONDERADO
                        NuevoProducto.actualizarPrecioCompra(pId_producto, v_precio_ponderado);
                    } else {
                        NuevoProducto.actualizarPrecioCompra(pId_producto, Detalle.getPrecio_d_compra());
                    }
                }
            }
        } catch (Exception error) {
            Mensaje.manipulacionExcepciones("critico", "Ocurrio un error al buscar el Producto: " + pId_producto + " -> " + error);
        }
    }
    
    private ObjetosProducto obtenerDatosProducto(String pId_producto){
        
        ArrayList<ObjetosProducto> BuscarProducto = new ArrayList();
        ObjetosProducto Producto = new ObjetosProducto();
        
        //CONSULTAR EL ID DE PRODUCTO PARA OBTENER LOS DATOS
        try{
            BuscarProducto = NuevoProducto.buscarProducto(pId_producto);
        }catch(Exception error){
            Mensaje.manipulacionExcepciones("critico", "Ocurrio un error al consultar el codigo del producto");
        }
        
        //EVALUAR EL RESULTADO DE LA BUSQUEDA
        if(BuscarProducto.isEmpty()){
            System.out.println("NO EXISTE NINGUN PRODUCTO CON ESTE CODIGO");
            Mensaje.manipulacionExcepciones("informacion", "Este Codigo de Producto no existe en su Base de Datos");
        } else {
            if(BuscarProducto.size()>1){
                System.out.println("EXISTEN "+BuscarProducto.size()+"PRODUCTOS CON ESTE CODIGO");
                Mensaje.manipulacionExcepciones("critico", "Existe mas de un producto con este codigo");
            } else {
                Producto.setId_producto(BuscarProducto.get(0).getId_producto());
                Producto.setId_provedor(BuscarProducto.get(0).getId_proveedor());
                Producto.setMarca_producto(BuscarProducto.get(0).getMarca_producto());
                Producto.setDesc_producto(BuscarProducto.get(0).getDesc_producto());
                Producto.setPrecio_compra_producto(BuscarProducto.get(0).getPrecio_compra_producto());
                Producto.setPrecio_est_producto(BuscarProducto.get(0).getPrecio_est_producto());
                Producto.setExi_producto(BuscarProducto.get(0).getExi_producto());
                Producto.setUnidad_medida_producto(BuscarProducto.get(0).getUnidad_medida_producto());
                Producto.setMaximo_producto(BuscarProducto.get(0).getMaximo_producto());
                Producto.setMinimo_producto(BuscarProducto.get(0).getMinimo_producto());
            }
        }
        
        return Producto;
    }
    
    private void obtenerDatosProveedor(String pNit_persona){
        
        ArrayList<ObjetosPersona> BuscarPersona = new ArrayList();
        ArrayList<ObjetosProveedor> BuscarProveedor = new ArrayList();
        
        //CONSULTAR EL NUMERO DE NIT DE LA PERSONA
        try{
            BuscarPersona = NuevaPersona.buscarPersona(pNit_persona);
        }catch(Exception error){
            Mensaje.manipulacionExcepciones("critico", "Ocurrio un error al buscar esta persona -> "+error);
        }
        
        //EVALUAR EL RESULTADO DE LA BUSQUEDA
        if(BuscarPersona.isEmpty()){
            System.out.println("NO SE ENCONTRO NINGUNA PERSONA CON ESTE NIT");
            Mensaje.manipulacionExcepciones("critico", "No existen datos de esta Persona en la Base de Datos");
        } else {
            if(BuscarPersona.size()>1){
                System.out.println("EXISTE "+BuscarPersona.size()+" PERSONAS CON ESTE NUMERO DE NIT");
                Mensaje.manipulacionExcepciones("critico", "Existe mas de una persona con este numero de NIT");
            } else {
                txtNombreProveedor.setText(BuscarPersona.get(0).getNom_persona());
            }
        }
        
        //CONSULTAR EL NIT DEL PROVEEDOR
        try{
            BuscarProveedor = NuevoProveedor.buscarProveedor(BuscarPersona.get(0).getId_persona());
        }catch(Exception error){
            Mensaje.manipulacionExcepciones("critico", "Ocurrio un error al buscar los datos del proveedor -> "+error);
        }
        
        if(BuscarProveedor.isEmpty()){
            System.out.println("NO EXISTE NINGUN PROVEEDOR CON ESTE NUMERO DE NIT");
            Mensaje.manipulacionExcepciones("interrogante", "Desea crear este proveedor en la Base de Datos");
            System.out.println("VALOR DEL MENSAJE = "+Mensaje.valor);
            if(Mensaje.valor==0){
                wdwCatalogoProveedores catalogoProveedores = new wdwCatalogoProveedores();
                Inventory.pnlPrincipal.add(catalogoProveedores);
                catalogoProveedores.toFront();
                catalogoProveedores.setVisible(true);
            } else {
                txtNitProveedor.setText("C/F");
                txtNitProveedor.requestFocus();
            }
        } else {
            if(BuscarProveedor.size()>1){
                System.out.println("SE ENCONTRARON "+BuscarProveedor.size()+" PROVEEDORES CON ESTE NUMERO DE NIT");
                Mensaje.manipulacionExcepciones("critico", "Se encontro mas de un Proveedor con este numero de NIT");
            } else {
                txtFechaCompra.setText((1900 + fecha.getYear()) + "-" + (fecha.getMonth()+1) + "-" + fecha.getDate());
                txtTotalCompra.setText("0.00");
                ckbPrecioPonderado.requestFocus();
            }
        }
        
        BuscarPersona.removeAll(BuscarProveedor);
        BuscarProveedor.removeAll(BuscarProveedor);
    }
    
    private int obtenerIdProveedor(String pNit_proveedor){
        
        ArrayList<ObjetosPersona> BuscarPersona = new ArrayList();
        ArrayList<ObjetosProveedor> BuscarProveedor = new ArrayList();
        int vId_proveedor = 0;
        
        //CONSULTAR EL NUMERO DE NIT DE LA PERSONA
        try{
            BuscarPersona = NuevaPersona.buscarPersona(pNit_proveedor);
            System.out.println("PERSONA ENCONTRADA: "+BuscarPersona.get(0).getId_persona());
        }catch(Exception error){
            System.out.println("NO SE ENCONTRO NINGUNA PERSONA CON ESTE NIT");
            Mensaje.manipulacionExcepciones("critico", "Ocurrio un error al consulta el NIT del Proveedor -> "+error);
        }
        
        //EVALUANDO LOS DATOS OPTENDIOS DE PERSONA
        if(BuscarPersona.isEmpty()){
            Mensaje.manipulacionExcepciones("critico", "No existe este Proveedor en la Base de Datos");
        } else {
            if(BuscarPersona.size()>1){
                Mensaje.manipulacionExcepciones("critico", "Existen mas personas con este Numero de NIT");
            }
        }
                
        //CONSULTAR EL ID DE LA PERSONA EN PROVEEDOR
        try{
            BuscarProveedor = NuevoProveedor.buscarProveedor(BuscarPersona.get(0).getId_persona());
            System.out.println("PROVEEDOR ENCONTRADO: "+BuscarProveedor.get(0).getId_proveedor());
        }catch(Exception error){
            Mensaje.manipulacionExcepciones("informacion", "Ocurrio un error al consulta este numero de NIT -> "+error);
        }
        
        //EVALUAR EL RESULTADO DE LA BUSQUEDA
        if(BuscarProveedor.isEmpty()){
            System.out.println("NO SE ENCONTRO EL PROVEEDOR SE MOSTRA PANTALLA DE INGRESO DE PROVEEDORES");
            Mensaje.manipulacionExcepciones("critico", "Debe crear este proveedor en la base de datos");
        }else{
            if(BuscarProveedor.size()>1){
                System.out.println("EXISTEN "+BuscarProveedor.size()+" PROVEEDORES CON ESTE NUMERO DE NIT");
                Mensaje.manipulacionExcepciones("critical", "Este numero de Nit esta repetido");
            } else {
                vId_proveedor = BuscarProveedor.get(0).getId_proveedor();
            }
        }
        
        return vId_proveedor;
    }
    
    private boolean verificarDatosCompra(ObjetosCompra pCompra) {
        boolean vDatos_correctos = false;

        if ("".equals(txtIdCompra.getText())) {
            vDatos_correctos = true;
        }
        
        if ("".equals(txtNitProveedor.getText())) {
            Mensaje.manipulacionExcepciones("critical", "Por favor ingrese el numero de NIT");
        } else {
            if ("".equals(pCompra.getFecha_factura_compra())) {
                Mensaje.manipulacionExcepciones("critical", "Ingrese la fecha de esta factura");
            } else {
                vDatos_correctos = true;
            }
        }
        
        return vDatos_correctos;
    }
    
    private void btnGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarActionPerformed

        boolean error_grabar = false;

        /**
         * *******************************************************************
         * GUARDAR LOS DATOS DE LA COMPRA SOLAMENTE SI ESTA, AUN NO TIENE UN
         * NUMERO DE ID ASIGNADO. DE LO CONTRARIO DEBERA CAMBIAR EL NUMERO DE ID
         * PRECIONANDO DEL BOTON DE GUARDAR NUEVAMENTE LA COMPRA, PERO ESTO
         * LIMPIARA EL NUMERO DE FACTURA LA SERIE Y EL FOLIO DEL ENCABEZADO PARA
         * QUE EL USUARIO LO INGRESE NUEVAMENTE Y ASI PUEDA GUARDARLO
        *********************************************************************
         */
        if (txtIdCompra.getText().equals("")) {
            try {
                Compra.setNumero_factura_compra(txtNumeroFacturaCompra.getText());
                Compra.setSerie_factura_compra(txtSerieFacturaCompra.getText());
                Compra.setFolio_factura_compra(txtFolioFacturaCompra.getText());

                //OBTENER EL ID PERSONA ATRAVEZ DEL NUMERO DE NIT
                Compra.setId_proveedor(obtenerIdProveedor(txtNitProveedor.getText()));
                Compra.setFecha_factura_compra(txtFechaCompra.getText());

                //EN ESTE MOMENTO TOTAL ES IGUAL A CERO
                Compra.setTotal_factura_compra(Float.parseFloat(txtTotalCompra.getText()));
            } catch (Error error) {
                Mensaje.manipulacionExcepciones("critico", "Ocurrio un error al leer los datos de Factura -> " + error);
            }

            if (verificarDatosCompra(Compra)) {
                NuevaCompra.insertarCompra(Compra);
                System.out.println("SE INSERTO LA FACTURA NO: " + Compra.getNumero_factura_compra() + " DEL PROVEEDOR : " + Compra.getId_proveedor());

            } else {
                Mensaje.manipulacionExcepciones("critico", "Por favor verifique los datos de la compra");
            }

            //OBTENER EL ID DE LA COMPRA INGRESADA PARA EL DETALLE DE LA COMPRA
            try {
                ArrayList<ObjetosCompra> BuscarCompra = new ArrayList();
                BuscarCompra = NuevaCompra.seleccionarIdCompra(Compra);
                System.out.println("ESTOY RETORNANDO EL ID COMPRA" + BuscarCompra.get(0).getId_compra());
                if (BuscarCompra.isEmpty()) {
                    Mensaje.manipulacionExcepciones("critico", "No existe este numero de compra en la Base de Datos");
                } else {
                    if (BuscarCompra.size() > 1) {
                        Mensaje.manipulacionExcepciones("critico", "Existen mas Facturas de Compra con los mismos Datos");
                    } else {
                        txtIdCompra.setText(String.valueOf(BuscarCompra.get(0).getId_compra()));
                    }
                }
            } catch (Exception error) {
                Mensaje.manipulacionExcepciones("critico", "Ocurrio un error al consultar el ID de la Compra -> " + error);
            }

            //ALMACENAR EL DETALLE DE LA COMPRA Y ACTUALIZAR EL CATALOGO DE PRODUCTOS
            try {
                for (int cFilas = 0; cFilas < tblDetalleCompra.getRowCount(); cFilas++) {
                    //INSERTAR EN D_COMPRA LOS PRODUCTOS COMPRADOS
                    if (tblDetalleCompra.getValueAt(cFilas, 0) != null) {
                        try {
                            System.out.println("TRATANDO DE GUARDAR EL REGISTRO NO: " + tblDetalleCompra.getValueAt(cFilas, 0));

                            Detalle.setId_d_compra((Integer) tblDetalleCompra.getValueAt(cFilas, 0));
                            Detalle.setId_compra(Integer.parseInt(txtIdCompra.getText()));
                            Detalle.setId_producto(tblDetalleCompra.getValueAt(cFilas, 1).toString());
                            Detalle.setCant_d_compra(Float.parseFloat(tblDetalleCompra.getValueAt(cFilas, 3).toString()));
                            Detalle.setPrecio_d_compra(Float.parseFloat(tblDetalleCompra.getValueAt(cFilas, 4).toString()));
                            Detalle.setSub_total_d_compra(Float.parseFloat(tblDetalleCompra.getValueAt(cFilas, 6).toString()));
                            Detalle.setComentario_compra(tblDetalleCompra.getValueAt(cFilas, 7).toString());
                            Detalle.setAracel_compra(Float.parseFloat(tblDetalleCompra.getValueAt(cFilas, 8).toString()));
                            
                            NuevoDetalleCompra.insertarDetalleCompra(Detalle);
                            agregarProducto(Detalle.getId_producto(), Detalle.getCant_d_compra());

                        } catch (Exception error) {
                            Mensaje.manipulacionExcepciones("critico", "Ocurrio un error en la Fila " + cFilas + " -> " + error);
                            error_grabar = true;
                        }
                    }
                }

                if (error_grabar == false) {
                    Mensaje.manipulacionExcepciones("informacion", "Registros guardados exitosamente para la Compra No. " + txtIdCompra.getText());
                }

            } catch (Exception error) {
                Mensaje.manipulacionExcepciones("critico", "Ocurrio un error al almacenar le detalle -> " + error);
            }
        } else {
            Mensaje.manipulacionExcepciones("critico", "Esta facutra ya fue guardada con aterioridad");
        }
    }//GEN-LAST:event_btnGuardarActionPerformed

    private void txtNitProveedorFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtNitProveedorFocusLost
        
        if (txtNitProveedor.getText().equals("c/f") || txtNitProveedor.getText().equals("C/F") || txtNitProveedor.getText().equals("")) {
            txtNitProveedor.setText("C/F");
            txtNombreProveedor.setText("Consumidor Final");
            txtFechaCompra.setText((1900 + fecha.getYear()) + "-" + (fecha.getMonth()+1) + "-" + fecha.getDate());
            txtTotalCompra.setText("0.00");
            ckbPrecioPonderado.requestFocus();
        } else {
            obtenerDatosProveedor(txtNitProveedor.getText());
        }
    }//GEN-LAST:event_txtNitProveedorFocusLost

    private void totalCompra() {

        total_compra = 0;
        
        for(int cFilas = 0; cFilas <= 30; cFilas++) {
            try{
                total_compra = total_compra + (float) tblDetalleCompra.getValueAt(cFilas, 3) * (float) tblDetalleCompra.getValueAt(cFilas, 4);
            } catch(Exception error) {
                total_compra = total_compra + 0;
            }
        }
        
        txtTotalCompra.setText(String.valueOf(Math.rint(total_compra * 100)/100));
    }
    
    private void tblDetalleCompraKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tblDetalleCompraKeyPressed
        
        ObjetosProducto Producto = new ObjetosProducto();

        //VERIFICAR SI SURGE ALGUN EVENTO SOBRE CUALQUIER CELDA DE LA TABLA
        if (evt.getKeyCode() == 9) {

            fila_seleccionada = tblDetalleCompra.getSelectedRow();
            columna_seleccionada = tblDetalleCompra.getSelectedColumn();

            //VERIFICAR LA OPERACION A REALIZAR SEGUN SU POSICION
            System.out.println("POSICIONADO EN LA FILA: " + fila_seleccionada + " COLUMNA: " + columna_seleccionada);

            //BUSCAR LA INFORMACION DEL PRODUCTO SELECCIONADO
            if (columna_seleccionada == 2) {
                Producto = obtenerDatosProducto(tblDetalleCompra.getValueAt(fila_seleccionada, columna_seleccionada - 1).toString());
                System.out.println("PRODUCTO " + Producto.getId_producto() + " ENCONTRADO: " + Producto.getDesc_producto() + " EXISTENCIAS: " + Producto.getExi_producto());
                tblDetalleCompra.setValueAt((String) Producto.getDesc_producto(), fila_seleccionada, columna_seleccionada);
                tblDetalleCompra.setValueAt((float) Producto.getPrecio_compra_producto(), fila_seleccionada, columna_seleccionada + 2);
                tblDetalleCompra.setValueAt((float) Producto.getPrecio_est_producto(), fila_seleccionada, columna_seleccionada + 3);
            }

            //VERIFICA LA CANTIDAD ACTUAL Y SU EXISTENCIA EN PODUCTOS
            if (columna_seleccionada == 4) {

                if (tblDetalleCompra.getValueAt(fila_seleccionada, columna_seleccionada - 1) == null) {
                    Mensaje.manipulacionExcepciones("critico", "Por favor ingrese la cantidad comprada");
                    tblDetalleCompra.setValueAt(1.00, fila_seleccionada, columna_seleccionada - 1);
                } else {
                    if ((float) tblDetalleCompra.getValueAt(fila_seleccionada, columna_seleccionada - 1) < 0.01) {
                        Mensaje.manipulacionExcepciones("critico", "Por favor ingrese la cantidad comprada");
                        tblDetalleCompra.setValueAt(1.00, fila_seleccionada, columna_seleccionada - 1);
                    } else {
                        Producto = obtenerDatosProducto(tblDetalleCompra.getValueAt(fila_seleccionada, columna_seleccionada - 3).toString());
                        cantidad = (float) tblDetalleCompra.getValueAt(fila_seleccionada, columna_seleccionada - 1);
                        System.out.println("CANTIDAD DE PRODUCTO POR AGREGAR " + cantidad + " DE " + Producto.getExi_producto());

                        if (cantidad > Producto.getMaximo_producto()) {
                            Mensaje.manipulacionExcepciones("informacion", "Esta incluyendo una cantidad mayor a la sugerida del Producto " + Producto.getId_producto());
                        } else {
                            if (Producto.getExi_producto() <= Producto.getMinimo_producto()) {
                                Mensaje.manipulacionExcepciones("informacion", "La Existencia del Producto " + Producto.getId_producto() + " esta al Minimo");
                            }
                        }
                    }
                }
            }

            //COLOCA EL SUB TOTAL SEGUN LOS DATOS INGRESADOS DEL PRODUCTO Y SUMA AL TOTAL DICHA CANTIDAD
            if (columna_seleccionada == 5) {

                precio = (float) tblDetalleCompra.getValueAt(fila_seleccionada, columna_seleccionada - 1);

                //CALCULAR EL SUB TOTAL Y TOTAL DE LA FACTURA Y REDONDEARLO
                tblDetalleCompra.setValueAt(Math.rint(cantidad * precio * 100) / 100, fila_seleccionada, columna_seleccionada + 1);
                tblDetalleCompra.setValueAt(fila_seleccionada + 1, fila_seleccionada, 0);
                totalCompra();
            }
            
            //[20150404][INVG][INICIO]
            if(columna_seleccionada==7){
                tblDetalleCompra.setValueAt("NA", fila_seleccionada, columna_seleccionada);
            }
            
            if(columna_seleccionada==8){
                tblDetalleCompra.setValueAt(0.00, fila_seleccionada, columna_seleccionada);
            }
            //[20150404][INVG][FIN]

        }
    }//GEN-LAST:event_tblDetalleCompraKeyPressed

    private void btnSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalirActionPerformed

        Mensaje.manipulacionExcepciones("interrogante", "Deseas salir de la pantalla de compras");
        if (Mensaje.valor == 0) {
            this.dispose();
        }
    }//GEN-LAST:event_btnSalirActionPerformed

    private void btnNuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNuevoActionPerformed
       this.dispose();
       wdwMovimientoCompraDeProductos Compras = new wdwMovimientoCompraDeProductos();
       Compras.setVisible(true);
       Inventory.pnlPrincipal.add(Compras);
       Compras.toFront();
    }//GEN-LAST:event_btnNuevoActionPerformed

    private void btnBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarActionPerformed
        wdwCatalogoProductos BuscarProducto = new wdwCatalogoProductos();
        BuscarProducto.btnAgregar.setEnabled(true);
        Inventory.pnlPrincipal.add(BuscarProducto);
        BuscarProducto.setVisible(true);
        BuscarProducto.toFront(); 
    }//GEN-LAST:event_btnBuscarActionPerformed

    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActionPerformed
        
        float sub_total = 0;
        
        try{
            DefaultTableModel tabla = new DefaultTableModel();
            tabla.addColumn("No.");
            tabla.addColumn("Codigo");
            tabla.addColumn("Descripcion del Producto");
            tabla.addColumn("Cantidad");
            tabla.addColumn("P. Compra");
            tabla.addColumn("P. Normal");
            tabla.addColumn("Total");
            tabla.addColumn("Comentario");
            tabla.addColumn("Arancel");
            
            int cCompra = 0;
            
           //ELIMINAR LA FILA SELECCIONADA Y DESCONTAR EL SUB TOTAL AL TOTAL DE LA COMPRA
            sub_total = Float.parseFloat(String.valueOf(Math.rint( (double) tblDetalleCompra.getValueAt(fila_seleccionada, 6) * 100) / 100));
            total_compra = total_compra - sub_total;
            txtTotalCompra.setText(String.valueOf((Math.rint(total_compra * 100) / 100)));
            
            DefaultTableModel modelo = (DefaultTableModel) tblDetalleCompra.getModel();
            Object nueva_fila[] = {null,null,null,null,null,null};
            modelo.addRow(nueva_fila);
            modelo.removeRow(fila_seleccionada);
  
            //REORDENAR LA NUMERACION DE LA FILAS
            for(int cFilas = 0; cFilas <= 30; cFilas++){
                if (tblDetalleCompra.getValueAt(cFilas, 0) != null){
                    tblDetalleCompra.setValueAt(cFilas + 1, cFilas, 0);
                }
            }

        }catch(Exception error){
            Mensaje.manipulacionExcepciones("critico", "Se ha eliminado una fila");
        }
        
        totalCompra();
    }//GEN-LAST:event_btnEliminarActionPerformed

    private void tblDetalleCompraMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblDetalleCompraMouseClicked
       
        //CAPTURAR LA FILA SELECCIONADA PAR LA ELIMINACION
        fila_seleccionada = tblDetalleCompra.getSelectedRow();
        columna_seleccionada = tblDetalleCompra.getSelectedColumn();
    }//GEN-LAST:event_tblDetalleCompraMouseClicked

    private void btnReporteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnReporteActionPerformed
        
        try{
            AccesoInventario Acceso = new AccesoInventario(); 
            URL url_reporte = this.getClass().getResource("/inventory/reportes/rptCompra.jasper");
            JasperReport reporte = (JasperReport) JRLoader.loadObject(url_reporte);
            
            //ENVIAR EL PARAMETRO AL REPORTES DE LAS COMPRAS
            HashMap parametro = new HashMap();
            parametro.put("P_ID_COMPRA", Integer.parseInt(txtIdCompra.getText()));
            JasperPrint pantalla = JasperFillManager.fillReport(reporte, parametro, Acceso.conectar());
            JasperViewer visualizador = new JasperViewer(pantalla,false);
            visualizador.show();
        }catch(JRException error){
            Mensaje.manipulacionExcepciones("critico", "Ocurrio un error al ejecutar el reporte -> "+error);
        }
    }//GEN-LAST:event_btnReporteActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBuscar;
    private javax.swing.JButton btnEliminar;
    private javax.swing.JButton btnGuardar;
    private javax.swing.JButton btnNuevo;
    private javax.swing.JButton btnReporte;
    private javax.swing.JButton btnSalir;
    private javax.swing.JCheckBox ckbPrecioPonderado;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblFecha;
    private javax.swing.JLabel lblFolioFacturaCompra;
    private javax.swing.JLabel lblIdCompra;
    private javax.swing.JLabel lblNitProveedor;
    private javax.swing.JLabel lblNombreProveedor;
    private javax.swing.JLabel lblNumFacturaCompra;
    private javax.swing.JLabel lblNumeroFactura;
    private javax.swing.JLabel lblSerieFacturaCompra;
    private javax.swing.JLabel lblTotalFacturaCompra;
    private javax.swing.JPanel pnlBotones;
    private javax.swing.JPanel pnlDetalle;
    private javax.swing.JPanel pnlEncabezado;
    public static javax.swing.JTable tblDetalleCompra;
    private javax.swing.JTextField txtFechaCompra;
    private javax.swing.JTextField txtFolioFacturaCompra;
    private javax.swing.JTextField txtIdCompra;
    private javax.swing.JTextField txtNitProveedor;
    private javax.swing.JTextField txtNombreProveedor;
    private javax.swing.JTextField txtNumeroFacturaCompra;
    private javax.swing.JTextField txtSerieFacturaCompra;
    private javax.swing.JTextField txtTotalCompra;
    // End of variables declaration//GEN-END:variables
}
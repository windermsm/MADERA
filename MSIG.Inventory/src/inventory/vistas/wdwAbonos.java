/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package inventory.vistas;

import inventory.acceso.AccesoCliente;
import inventory.acceso.AccesoExcepciones;
import inventory.acceso.AccesoPersona;
import inventory.acceso.AccesoAbono;
import inventory.objetos.ObjetosAbono;
import inventory.objetos.ObjetosCliente;
import inventory.objetos.ObjetosPersona;
import java.util.ArrayList;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Megabytes Soluciones Integrales Guatemala
 */
public class wdwAbonos extends javax.swing.JInternalFrame {

    /**
     * Creates new form wdwIngresoClientes
     */
    public wdwAbonos() {
        initComponents();
        mostrarRegistrosGuardados();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlEncabezado = new javax.swing.JPanel();
        lblIdCliente = new javax.swing.JLabel();
        txtIdCliente = new javax.swing.JTextField();
        lblNombreCliente = new javax.swing.JLabel();
        lblTelCliente = new javax.swing.JLabel();
        txtIdFactura = new javax.swing.JTextField();
        lblDirCliente = new javax.swing.JLabel();
        txtTotalFacturado = new javax.swing.JTextField();
        txtNomPersona = new javax.swing.JTextField();
        lblCelular = new javax.swing.JLabel();
        txtContado = new javax.swing.JTextField();
        lblEmail = new javax.swing.JLabel();
        txtAbonado = new javax.swing.JTextField();
        lblIdPersona = new javax.swing.JLabel();
        txtIdPersona = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        txtAbono = new javax.swing.JTextField();
        lblTelCliente1 = new javax.swing.JLabel();
        txtNumero = new javax.swing.JTextField();
        lblDirCliente1 = new javax.swing.JLabel();
        txtCredito = new javax.swing.JTextField();
        lblEmail1 = new javax.swing.JLabel();
        txtDiasCredito = new javax.swing.JTextField();
        txtSaldo = new javax.swing.JTextField();
        lblSaldo = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtComision = new javax.swing.JTextField();
        pnlBotones = new javax.swing.JPanel();
        btnSalir = new javax.swing.JButton();
        btnLimpiar = new javax.swing.JButton();
        btnGuardar = new javax.swing.JButton();
        btnBuscar = new javax.swing.JButton();
        lblNitCliente = new javax.swing.JLabel();
        txtNitPersona = new javax.swing.JTextField();
        btnActualizar = new javax.swing.JButton();
        pnlDetalle = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblCliente = new javax.swing.JTable();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Abonos");
        setFrameIcon(new javax.swing.ImageIcon(getClass().getResource("/inventory/imagenes/clientes.png"))); // NOI18N
        setMaximumSize(new java.awt.Dimension(700, 500));
        setMinimumSize(new java.awt.Dimension(700, 500));
        setPreferredSize(new java.awt.Dimension(700, 500));

        pnlEncabezado.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        lblIdCliente.setText("ID Cliente");

        txtIdCliente.setEditable(false);
        txtIdCliente.setToolTipText("ID del cliente");

        lblNombreCliente.setText("Nombre");

        lblTelCliente.setText("ID");

        txtIdFactura.setEditable(false);
        txtIdFactura.setToolTipText("ID del abono, este se genera automaticamente");

        lblDirCliente.setText("Total facturado");

        txtTotalFacturado.setEditable(false);
        txtTotalFacturado.setToolTipText("Total que se facturo cuando se creo la venta");

        txtNomPersona.setEditable(false);
        txtNomPersona.setToolTipText("Nombre de la persona");
        txtNomPersona.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtNomPersonaFocusGained(evt);
            }
        });

        lblCelular.setText("Contado");

        txtContado.setEditable(false);
        txtContado.setToolTipText("La cantidad que canselo al contado");

        lblEmail.setText("Total Abonado");

        txtAbonado.setEditable(false);
        txtAbonado.setToolTipText("Total que el cliente lleva abonado");

        lblIdPersona.setText("ID Persona");

        txtIdPersona.setEditable(false);
        txtIdPersona.setToolTipText("Codigo de la persona en el sistema");

        jLabel1.setText("Abono");

        txtAbono.setToolTipText("Cantidad que esta abonando");
        txtAbono.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtAbonoFocusLost(evt);
            }
        });

        lblTelCliente1.setText("Numero");

        txtNumero.setEditable(false);
        txtNumero.setToolTipText("EL numero de pago");

        lblDirCliente1.setText("Credito");

        txtCredito.setEditable(false);
        txtCredito.setToolTipText("Monto del credito");

        lblEmail1.setText("Dias credito");

        txtDiasCredito.setEditable(false);
        txtDiasCredito.setToolTipText("Dias de credito autorizados");

        txtSaldo.setEditable(false);
        txtSaldo.setToolTipText("El saldo que esta pendiente de pago");

        lblSaldo.setText("Saldo");

        jLabel2.setText("Comision");

        txtComision.setEditable(false);
        txtComision.setToolTipText("Comision ganada por el vendedor");

        javax.swing.GroupLayout pnlEncabezadoLayout = new javax.swing.GroupLayout(pnlEncabezado);
        pnlEncabezado.setLayout(pnlEncabezadoLayout);
        pnlEncabezadoLayout.setHorizontalGroup(
            pnlEncabezadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlEncabezadoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlEncabezadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblTelCliente)
                    .addComponent(lblIdCliente)
                    .addComponent(lblCelular)
                    .addComponent(lblSaldo))
                .addGap(14, 14, 14)
                .addGroup(pnlEncabezadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txtContado)
                    .addGroup(pnlEncabezadoLayout.createSequentialGroup()
                        .addGroup(pnlEncabezadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtIdCliente, javax.swing.GroupLayout.DEFAULT_SIZE, 49, Short.MAX_VALUE)
                            .addComponent(txtIdFactura))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(pnlEncabezadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblIdPersona)
                            .addComponent(lblTelCliente1))
                        .addGap(14, 14, 14)
                        .addGroup(pnlEncabezadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtIdPersona, javax.swing.GroupLayout.DEFAULT_SIZE, 51, Short.MAX_VALUE)
                            .addComponent(txtNumero)))
                    .addComponent(txtSaldo))
                .addGap(18, 18, 18)
                .addGroup(pnlEncabezadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addGroup(pnlEncabezadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(lblDirCliente, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lblEmail, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(lblNombreCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlEncabezadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlEncabezadoLayout.createSequentialGroup()
                        .addGroup(pnlEncabezadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(txtAbonado)
                            .addComponent(txtAbono)
                            .addComponent(txtTotalFacturado, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(pnlEncabezadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(lblEmail1, javax.swing.GroupLayout.DEFAULT_SIZE, 66, Short.MAX_VALUE)
                            .addComponent(lblDirCliente1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(pnlEncabezadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtDiasCredito, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(txtComision, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(txtCredito, javax.swing.GroupLayout.Alignment.TRAILING)))
                    .addComponent(txtNomPersona))
                .addContainerGap())
        );
        pnlEncabezadoLayout.setVerticalGroup(
            pnlEncabezadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlEncabezadoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlEncabezadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblIdCliente)
                    .addComponent(txtIdCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtNomPersona, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblIdPersona)
                    .addComponent(txtIdPersona, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblNombreCliente))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlEncabezadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtIdFactura, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtTotalFacturado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblTelCliente)
                    .addComponent(lblTelCliente1)
                    .addComponent(txtNumero, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtCredito, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblDirCliente)
                    .addComponent(lblDirCliente1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlEncabezadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCelular)
                    .addComponent(txtContado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtAbonado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtDiasCredito, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblEmail)
                    .addComponent(lblEmail1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlEncabezadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtAbono, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtSaldo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblSaldo)
                    .addComponent(txtComision, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pnlBotones.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        btnSalir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/inventory/imagenes/salir.png"))); // NOI18N
        btnSalir.setText("Salir");
        btnSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalirActionPerformed(evt);
            }
        });

        btnLimpiar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/inventory/imagenes/limpiar.png"))); // NOI18N
        btnLimpiar.setText("Limpiar");
        btnLimpiar.setToolTipText("");
        btnLimpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimpiarActionPerformed(evt);
            }
        });

        btnGuardar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/inventory/imagenes/guardar.png"))); // NOI18N
        btnGuardar.setText("Guardar");
        btnGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarActionPerformed(evt);
            }
        });

        btnBuscar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/inventory/imagenes/buscar.png"))); // NOI18N
        btnBuscar.setActionCommand("buscar");
        btnBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarActionPerformed(evt);
            }
        });

        lblNitCliente.setText("NIT Cliente");

        txtNitPersona.setToolTipText("Ingresar el NIT de la persona que esta abonando");

        btnActualizar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/inventory/imagenes/bank.png"))); // NOI18N
        btnActualizar.setActionCommand("buscar");
        btnActualizar.setEnabled(false);
        btnActualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnActualizarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlBotonesLayout = new javax.swing.GroupLayout(pnlBotones);
        pnlBotones.setLayout(pnlBotonesLayout);
        pnlBotonesLayout.setHorizontalGroup(
            pnlBotonesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlBotonesLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblNitCliente)
                .addGap(18, 18, 18)
                .addComponent(txtNitPersona, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnBuscar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnGuardar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnLimpiar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnSalir)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnActualizar)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pnlBotonesLayout.setVerticalGroup(
            pnlBotonesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlBotonesLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlBotonesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(pnlBotonesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtNitPersona, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(lblNitCliente))
                    .addGroup(pnlBotonesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(btnBuscar, javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(pnlBotonesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnSalir)
                            .addComponent(btnLimpiar)
                            .addComponent(btnGuardar))
                        .addComponent(btnActualizar)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pnlDetalle.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        tblCliente.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        tblCliente.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblClienteMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblCliente);

        javax.swing.GroupLayout pnlDetalleLayout = new javax.swing.GroupLayout(pnlDetalle);
        pnlDetalle.setLayout(pnlDetalleLayout);
        pnlDetalleLayout.setHorizontalGroup(
            pnlDetalleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlDetalleLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 640, Short.MAX_VALUE)
                .addContainerGap())
        );
        pnlDetalleLayout.setVerticalGroup(
            pnlDetalleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlDetalleLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 224, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pnlEncabezado, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pnlBotones, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pnlDetalle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pnlEncabezado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(pnlBotones, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(13, 13, 13)
                .addComponent(pnlDetalle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    //VARIABLES GLOBALES
    AccesoExcepciones Mensaje = new AccesoExcepciones();
    AccesoPersona NuevaPersona = new AccesoPersona();
    AccesoCliente NuevoCliente = new AccesoCliente();
    AccesoAbono NuevoAbono = new AccesoAbono();
    ObjetosPersona Persona = new ObjetosPersona();
    ObjetosCliente Cliente = new ObjetosCliente();
    ObjetosAbono Abono = new ObjetosAbono();
    boolean cliente_encontrado = false;
    boolean persona_encontrada = false;

    private void limpiarCampos() {
        /*
        btnGuardar.setEnabled(true);
        
        txtIdCliente.setText("");
        txtIdPersona.setText("");
        txtNitPersona.setText("");
        txtNomPersona.setText("");
        txtIdFactura.setText("");
        txtTotalFacturado.setText("");
        txtContado.setText("");
        txtAbonado.setText("");
        txtAbono.setText("");
        txtDiasCredito.setText("");
        txtTipoCliente.setText("A");

        cliente_encontrado = false;
        persona_encontrada = false;*/
    }

    private void mostrarRegistrosGuardados() {
        
        String vNit_cliente = txtNitPersona.getText();
        
        DefaultTableModel tabla = new DefaultTableModel();
        ArrayList<ObjetosAbono> listaAbonos = new ArrayList();

        try{
            listaAbonos = NuevoAbono.buscarCreditosCliente(vNit_cliente);
            System.out.println("SE CONSULTARON LOS DATOS DE CREDITOS DEL CLIENTE " + vNit_cliente);
        } catch(Error error){
            Mensaje.manipulacionExcepciones("critico", "Ocurrio un error al consultar la informacion -> " + error);
        }
        
        if(listaAbonos.isEmpty()){
                Mensaje.manipulacionExcepciones("critico", "No existen datos almacenados para este cliente");
        }else{
            tabla.addColumn("ID Cliente");
            tabla.addColumn("ID Persona");
            tabla.addColumn("ID Fact");
            tabla.addColumn("NIT");
            tabla.addColumn("Nombre");
            tabla.addColumn("Factura");
            tabla.addColumn("Total");
            tabla.addColumn("Credito");
            tabla.addColumn("Contado");
            tabla.addColumn("Dias de credito");
            tabla.addColumn("Total abonado");
            tabla.addColumn("Saldo pendiente");

            int cCliente = 0;
            int contadorFilas = 1;

            // RECORRO TODA LA LISTA DE PERSONAS
            for (ObjetosAbono xAbono : listaAbonos) {

                // ESTABLECE EL TAMAÑO DE LA TABLA
                tabla.setRowCount(contadorFilas);
                
                tabla.setValueAt(xAbono.getId_cliente(), cCliente, 0);
                tabla.setValueAt(xAbono.getId_persona(), cCliente, 1);
                tabla.setValueAt(xAbono.getId_factura(), cCliente, 2);
                tabla.setValueAt(xAbono.getNit_persona(), cCliente, 3);
                tabla.setValueAt(xAbono.getNom_persona(), cCliente, 4);
                tabla.setValueAt(xAbono.getFactura(), cCliente, 5);
                tabla.setValueAt(xAbono.getTotal(), cCliente, 6);
                tabla.setValueAt(xAbono.getMonto_credito(), cCliente, 7);
                tabla.setValueAt(xAbono.getMonto_contado(), cCliente, 8);
                tabla.setValueAt(xAbono.getDias_de_credito(), cCliente, 9);
                tabla.setValueAt(xAbono.getTotal_abonado(), cCliente, 10);
                tabla.setValueAt(xAbono.getSaldo_pendiente(), cCliente, 11);

                System.out.println("SE ENCONTRO EL REGISTRO BUSCADO: " + xAbono.getNit_persona());

                cCliente++;
                contadorFilas++;
                
            }
            tblCliente.setModel(tabla);
        }

    }

  /*  private int obtenerIdPersona(String pNit_persona) {

        int id_persona = 0;
        ArrayList<ObjetosPersona> BuscarPersona = new ArrayList();

        try {
            BuscarPersona = NuevaPersona.buscarPersona(pNit_persona);
        } catch (Exception error) {
            Mensaje.manipulacionExcepciones("critico", "Ocurrio un error al consulta el NIT del Cliente -> " + error);
        }

        if (BuscarPersona.isEmpty()) {
            Mensaje.manipulacionExcepciones("critico", "No existe esta Persona en la Base de Datos");
        } else {
            id_persona = BuscarPersona.get(0).getId_persona();
        }

        return id_persona;
    }

    private int obtenerIdCliente(String pNit_cliente) {

        ArrayList<ObjetosCliente> BuscarCliente = new ArrayList();
        int vId_persona = 0;
        int vId_cliente = 0;

        //BUSCAR EL ID DE LA PERSONA
        vId_persona = obtenerIdPersona(pNit_cliente);

        //CONSULTAR EL ID DE LA PERSONA EN CLIENTE
        try {
            BuscarCliente = NuevoCliente.buscarCliente(vId_persona);
        } catch (Exception error) {
            Mensaje.manipulacionExcepciones("informacion", "Ocurrio un error al consulta este numero de NIT -> " + error);
        }

        //EVALUAR EL RESULTADO DE LA BUSQUEDA
        if (BuscarCliente.isEmpty()) {
            Mensaje.manipulacionExcepciones("critico", "Debe crear este cliente en la base de datos");
        } else {
            if (BuscarCliente.size() > 1) {
                System.out.println("EXISTEN " + BuscarCliente.size() + " CLIENTES CON ESTE NUMERO DE NIT");
                Mensaje.manipulacionExcepciones("critico", "Este numero de Nit esta repetido");
            } else {
                vId_cliente = BuscarCliente.get(0).getId_cliente();
            }
        }

        return vId_cliente;
    }*/

    private void buscarEnRegistrosGuardados() {
        String vNit_cliente = txtNitPersona.getText();
        
        if(vNit_cliente != null){
            DefaultTableModel tabla = new DefaultTableModel();
            ArrayList<ObjetosAbono> listaAbonos = new ArrayList();
            
            try{
                listaAbonos = NuevoAbono.buscarCreditosCliente(vNit_cliente);
                System.out.println("SE CONSULTARON LOS DATOS DE CREDITOS DEL CLIENTE " + vNit_cliente);
            } catch(Error error){
                Mensaje.manipulacionExcepciones("critico", "Ocurrio un error al consultar la informacion -> " + error);
            }
            
            if(listaAbonos.isEmpty()){
                Mensaje.manipulacionExcepciones("critico", "No existen datos almacenados para este cliente");
            }else{
                tabla.addColumn("ID Cliente");
                tabla.addColumn("ID Persona");
                tabla.addColumn("ID Fact");
                tabla.addColumn("NIT");
                tabla.addColumn("Nombre");
                tabla.addColumn("Factura");
                tabla.addColumn("Total");
                tabla.addColumn("Credito");
                tabla.addColumn("Contado");
                tabla.addColumn("Dias de credito");
                tabla.addColumn("Total abonado");
                tabla.addColumn("Saldo pendiente");

                int cCliente = 0;
                int contadorFilas = 1;

                // RECORRO TODA LA LISTA DE PERSONAS
                for (ObjetosAbono xAbono : listaAbonos) {

                    // COMPARA CADA ELEMENTO NIT Y NOMBRE DE LA LISTA PARA VER SI ALGUNO ES EL BUSCADO
                    if (xAbono.getNit_persona().indexOf(vNit_cliente) >= 0) {

                        // ESTABLECE EL TAMAÑO DE LA TABLA
                        tabla.setRowCount(contadorFilas);

                       tabla.setValueAt(xAbono.getId_cliente(), cCliente, 0);
                        tabla.setValueAt(xAbono.getId_persona(), cCliente, 1);
                        tabla.setValueAt(xAbono.getId_factura(), cCliente, 2);
                        tabla.setValueAt(xAbono.getNit_persona(), cCliente, 3);
                        tabla.setValueAt(xAbono.getNom_persona(), cCliente, 4);
                        tabla.setValueAt(xAbono.getFactura(), cCliente, 5);
                        tabla.setValueAt(xAbono.getTotal(), cCliente, 6);
                        tabla.setValueAt(xAbono.getMonto_credito(), cCliente, 7);
                        tabla.setValueAt(xAbono.getMonto_contado(), cCliente, 8);
                        tabla.setValueAt(xAbono.getDias_de_credito(), cCliente, 9);
                        tabla.setValueAt(xAbono.getTotal_abonado(), cCliente, 10);
                        tabla.setValueAt(xAbono.getSaldo_pendiente(), cCliente, 11);

                        System.out.println("SE ENCONTRO EL REGISTRO BUSCADO: " + xAbono.getNit_persona());

                        cCliente++;
                        contadorFilas++;
                         
                    }
                }
                tblCliente.setModel(tabla);
            }
        }
    }

    private boolean verificarDatosCliente() {

        boolean vDatosCorrectos = true;

        if(txtAbonado.getText().isEmpty()){
            Mensaje.manipulacionExcepciones("critico", "Ingrese el monto a abonar");
            vDatosCorrectos = false;
        }
        
        return vDatosCorrectos;
    }

    private void btnGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarActionPerformed
        if(verificarDatosCliente()){
            Abono.setNit_persona(txtNitPersona.getText());
            Abono.setId_cliente(Integer.parseInt(txtIdCliente.getText()));
            Abono.setId_persona(Integer.parseInt(txtIdPersona.getText()));
            Abono.setNom_persona(txtNomPersona.getText());
            Abono.setId_factura(Integer.parseInt(txtIdFactura.getText()));
            Abono.setFactura(txtNumero.getText());
            Abono.setTotal(Float.parseFloat(txtTotalFacturado.getText()));
            Abono.setMonto_credito(Float.parseFloat(txtCredito.getText()));
            Abono.setMonto_contado(Float.parseFloat(txtContado.getText()));
            Abono.setTotal_abonado(Float.parseFloat(txtAbonado.getText()));
            Abono.setDias_de_credito(Integer.parseInt(txtDiasCredito.getText()));
            Abono.setSaldo_pendiente(Float.parseFloat(txtSaldo.getText()));
            Abono.setMonto_abono(Float.parseFloat(txtAbono.getText()));
            Abono.setComision_sobre_abono(Float.parseFloat(txtComision.getText()));
            
            try{
                NuevoAbono.insertarAbono(Abono);
                limpiarCampos();
                mostrarRegistrosGuardados();
                btnGuardar.setEnabled(false);
                Mensaje.manipulacionExcepciones("informacion", "Datos guardados exitosamente");
            }catch(Exception error){
                btnGuardar.setEnabled(false);
                Mensaje.manipulacionExcepciones("critico", "Ocurrio un erro al guardar la informacion del abono -> " + error);
            }
        }
    }//GEN-LAST:event_btnGuardarActionPerformed

    private void txtNomPersonaFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtNomPersonaFocusGained
/*
        if (txtNitPersona.getText().isEmpty()) {
            txtNitPersona.requestFocus();
            Mensaje.manipulacionExcepciones("critico", "Ingrese el numero de NIT para este cliente");
        }*/
    }//GEN-LAST:event_txtNomPersonaFocusGained

    private void btnLimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimpiarActionPerformed
        limpiarCampos();
    }//GEN-LAST:event_btnLimpiarActionPerformed

    private void btnSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalirActionPerformed

        Mensaje.manipulacionExcepciones("interrogante", "¿Esta seguro que desea salir?");
        if (Mensaje.valor == 0) {
            dispose();
        }
    }//GEN-LAST:event_btnSalirActionPerformed

    private void btnBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarActionPerformed
        buscarEnRegistrosGuardados();
    }//GEN-LAST:event_btnBuscarActionPerformed

    private void tblClienteMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblClienteMouseClicked
        
        if (String.valueOf(tblCliente.getSelectedColumn()).equals("0")) {
            int fila_seleccionada = tblCliente.getSelectedRow();
            int columna_seleccionada = tblCliente.getSelectedColumn();
            
            txtIdCliente.setText(String.valueOf(tblCliente.getValueAt(fila_seleccionada, columna_seleccionada)));
            txtIdPersona.setText(String.valueOf(tblCliente.getValueAt(fila_seleccionada, columna_seleccionada+1)));
            txtNomPersona.setText(String.valueOf(tblCliente.getValueAt(fila_seleccionada, columna_seleccionada + 4)));
            txtIdFactura.setText(String.valueOf(tblCliente.getValueAt(fila_seleccionada, columna_seleccionada +2)));
            txtNumero.setText(String.valueOf(tblCliente.getValueAt(fila_seleccionada, columna_seleccionada + 5)));
            txtTotalFacturado.setText(String.valueOf(tblCliente.getValueAt(fila_seleccionada, columna_seleccionada + 6)));
            txtCredito.setText(String.valueOf(tblCliente.getValueAt(fila_seleccionada, columna_seleccionada + 7)));
            txtContado.setText(String.valueOf(tblCliente.getValueAt(fila_seleccionada, columna_seleccionada + 8)));
            txtAbonado.setText(String.valueOf(tblCliente.getValueAt(fila_seleccionada, columna_seleccionada + 10)));
            txtDiasCredito.setText(String.valueOf(tblCliente.getValueAt(fila_seleccionada, columna_seleccionada + 9)));
            txtSaldo.setText(String.valueOf(tblCliente.getValueAt(fila_seleccionada, columna_seleccionada + 11)));
            
            btnGuardar.setEnabled(true);
            txtAbono.setText("");
        }
    }//GEN-LAST:event_tblClienteMouseClicked

    private void txtAbonoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtAbonoFocusLost
        float vPorcentaje_comision = NuevoAbono.obtieneComisionEmpleado(Integer.parseInt(txtIdFactura.getText()));
        float vComision = (Float.parseFloat(txtAbono.getText()) * vPorcentaje_comision)/100;
        
        txtComision.setText(String.valueOf(vComision));
        
    }//GEN-LAST:event_txtAbonoFocusLost

    private void btnActualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnActualizarActionPerformed
        ArrayList<ObjetosAbono> listaFacturasCredito = new ArrayList();
        ArrayList<ObjetosAbono> listaCreditosPagados = new ArrayList();
        ArrayList<ObjetosAbono> listaCreditosPendientes = new ArrayList();
        
        // Lleno la lista con las facturas al credito o credito/contado que existen en el sistema
        listaFacturasCredito = NuevoAbono.listadoFacturasCredito();
        
        // Lleno la lista con las facturas que ya fueron pagadas en su totalidad
        listaCreditosPagados = NuevoAbono.listadoCreditosPagados();
        
        // Lleno la lista con las facturas que aun no han sido pagadas
        listaCreditosPendientes = NuevoAbono.listadoCreditosPendientes();
        
        // Recorro primero la lista de quienes ya pagaron
        for(ObjetosAbono xFactura : listaFacturasCredito){
            for(ObjetosAbono xAbono : listaCreditosPagados){
                if(xFactura.getId_factura() == xAbono.getId_factura()){
                    int vDias_credito = 0;
                    String v_fechaCredito = "";
                    String v_fecha_limite = "";
                    String v_fechaHoy = "";
                    
                    vDias_credito = xFactura.getDias_de_credito();
                    v_fechaCredito = xFactura.getFecha_emision_factura();
                    v_fechaHoy = xFactura.getFecha();
                }
            }
        }
        
        
        
        /*
          // RECORRO TODA LA LISTA DE PERSONAS
                for (ObjetosAbono xAbono : listaAbonos) {

                    // COMPARA CADA ELEMENTO NIT Y NOMBRE DE LA LISTA PARA VER SI ALGUNO ES EL BUSCADO
                    if (xAbono.getNit_persona().indexOf(vNit_cliente) >= 0) {
         */
        
        
    }//GEN-LAST:event_btnActualizarActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnActualizar;
    private javax.swing.JButton btnBuscar;
    private javax.swing.JButton btnGuardar;
    private javax.swing.JButton btnLimpiar;
    private javax.swing.JButton btnSalir;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblCelular;
    private javax.swing.JLabel lblDirCliente;
    private javax.swing.JLabel lblDirCliente1;
    private javax.swing.JLabel lblEmail;
    private javax.swing.JLabel lblEmail1;
    private javax.swing.JLabel lblIdCliente;
    private javax.swing.JLabel lblIdPersona;
    private javax.swing.JLabel lblNitCliente;
    private javax.swing.JLabel lblNombreCliente;
    private javax.swing.JLabel lblSaldo;
    private javax.swing.JLabel lblTelCliente;
    private javax.swing.JLabel lblTelCliente1;
    private javax.swing.JPanel pnlBotones;
    private javax.swing.JPanel pnlDetalle;
    private javax.swing.JPanel pnlEncabezado;
    private javax.swing.JTable tblCliente;
    private javax.swing.JTextField txtAbonado;
    private javax.swing.JTextField txtAbono;
    private javax.swing.JTextField txtComision;
    private javax.swing.JTextField txtContado;
    private javax.swing.JTextField txtCredito;
    private javax.swing.JTextField txtDiasCredito;
    private javax.swing.JTextField txtIdCliente;
    private javax.swing.JTextField txtIdFactura;
    private javax.swing.JTextField txtIdPersona;
    private javax.swing.JTextField txtNitPersona;
    private javax.swing.JTextField txtNomPersona;
    private javax.swing.JTextField txtNumero;
    private javax.swing.JTextField txtSaldo;
    private javax.swing.JTextField txtTotalFacturado;
    // End of variables declaration//GEN-END:variables
}
